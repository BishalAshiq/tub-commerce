"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@reduxjs";
exports.ids = ["vendor-chunks/@reduxjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiProvider: () => (/* binding */ ApiProvider),\n/* harmony export */   QueryStatus: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.QueryStatus),\n/* harmony export */   buildCreateApi: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.buildCreateApi),\n/* harmony export */   copyWithStructuralSharing: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.copyWithStructuralSharing),\n/* harmony export */   coreModule: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.coreModule),\n/* harmony export */   coreModuleName: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.coreModuleName),\n/* harmony export */   createApi: () => (/* binding */ createApi),\n/* harmony export */   defaultSerializeQueryArgs: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.defaultSerializeQueryArgs),\n/* harmony export */   fakeBaseQuery: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.fakeBaseQuery),\n/* harmony export */   fetchBaseQuery: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.fetchBaseQuery),\n/* harmony export */   reactHooksModule: () => (/* binding */ reactHooksModule),\n/* harmony export */   reactHooksModuleName: () => (/* binding */ reactHooksModuleName),\n/* harmony export */   retry: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.retry),\n/* harmony export */   setupListeners: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.setupListeners),\n/* harmony export */   skipToken: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @reduxjs/toolkit/query */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ \"(ssr)/./node_modules/react-redux/dist/react-redux.mjs\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/redux/dist/redux.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/dist/reselect.mjs\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\");\n// src/query/react/index.ts\n\n// src/query/react/module.ts\n\n// src/query/react/buildHooks.ts\n\n\n\n\n\n// src/query/react/useSerializedStableValue.ts\n\nfunction useStableQueryArgs(queryArgs, serialize, endpointDefinition, endpointName) {\n    const incoming = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            queryArgs,\n            serialized: typeof queryArgs == \"object\" ? serialize({\n                queryArgs,\n                endpointDefinition,\n                endpointName\n            }) : queryArgs\n        }), [\n        queryArgs,\n        serialize,\n        endpointDefinition,\n        endpointName\n    ]);\n    const cache2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(incoming);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (cache2.current.serialized !== incoming.serialized) {\n            cache2.current = incoming;\n        }\n    }, [\n        incoming\n    ]);\n    return cache2.current.serialized === incoming.serialized ? cache2.current.queryArgs : queryArgs;\n}\n// src/query/react/constants.ts\nvar UNINITIALIZED_VALUE = Symbol();\n// src/query/react/useShallowStableValue.ts\n\n\nfunction useShallowStableValue(value) {\n    const cache2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!(0,react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual)(cache2.current, value)) {\n            cache2.current = value;\n        }\n    }, [\n        value\n    ]);\n    return (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual)(cache2.current, value) ? cache2.current : value;\n}\n// src/query/core/rtkImports.ts\n\n// src/query/defaultSerializeQueryArgs.ts\nvar cache = WeakMap ? /* @__PURE__ */ new WeakMap() : void 0;\nvar defaultSerializeQueryArgs = ({ endpointName, queryArgs })=>{\n    let serialized = \"\";\n    const cached = cache?.get(queryArgs);\n    if (typeof cached === \"string\") {\n        serialized = cached;\n    } else {\n        const stringified = JSON.stringify(queryArgs, (key, value)=>(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(value) ? Object.keys(value).sort().reduce((acc, key2)=>{\n                acc[key2] = value[key2];\n                return acc;\n            }, {}) : value);\n        if ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(queryArgs)) {\n            cache?.set(queryArgs, stringified);\n        }\n        serialized = stringified;\n    }\n    return `${endpointName}(${serialized})`;\n};\n// src/query/react/buildHooks.ts\nvar useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nvar noPendingQueryStateSelector = (selected)=>{\n    if (selected.isUninitialized) {\n        return {\n            ...selected,\n            isUninitialized: false,\n            isFetching: true,\n            isLoading: selected.data !== void 0 ? false : true,\n            status: _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.QueryStatus.pending\n        };\n    }\n    return selected;\n};\nfunction buildHooks({ api, moduleOptions: { batch, hooks: { useDispatch, useSelector, useStore }, unstable__sideEffectsInRender, createSelector: createSelector2 }, serializeQueryArgs, context }) {\n    const usePossiblyImmediateEffect = unstable__sideEffectsInRender ? (cb)=>cb() : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n    return {\n        buildQueryHooks,\n        buildMutationHook,\n        usePrefetch\n    };\n    function queryStatePreSelector(currentState, lastResult, queryArgs) {\n        if (lastResult?.endpointName && currentState.isUninitialized) {\n            const { endpointName } = lastResult;\n            const endpointDefinition = context.endpointDefinitions[endpointName];\n            if (serializeQueryArgs({\n                queryArgs: lastResult.originalArgs,\n                endpointDefinition,\n                endpointName\n            }) === serializeQueryArgs({\n                queryArgs,\n                endpointDefinition,\n                endpointName\n            })) lastResult = void 0;\n        }\n        let data = currentState.isSuccess ? currentState.data : lastResult?.data;\n        if (data === void 0) data = currentState.data;\n        const hasData = data !== void 0;\n        const isFetching = currentState.isLoading;\n        const isLoading = !hasData && isFetching;\n        const isSuccess = currentState.isSuccess || isFetching && hasData;\n        return {\n            ...currentState,\n            data,\n            currentData: currentState.data,\n            isFetching,\n            isLoading,\n            isSuccess\n        };\n    }\n    function usePrefetch(endpointName, defaultOptions) {\n        const dispatch = useDispatch();\n        const stableDefaultOptions = useShallowStableValue(defaultOptions);\n        return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((arg, options)=>dispatch(api.util.prefetch(endpointName, arg, {\n                ...stableDefaultOptions,\n                ...options\n            })), [\n            endpointName,\n            dispatch,\n            stableDefaultOptions\n        ]);\n    }\n    function buildQueryHooks(name) {\n        const useQuerySubscription = (arg, { refetchOnReconnect, refetchOnFocus, refetchOnMountOrArgChange, skip = false, pollingInterval = 0, skipPollingIfUnfocused = false } = {})=>{\n            const { initiate } = api.endpoints[name];\n            const dispatch = useDispatch();\n            const subscriptionSelectorsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n            if (!subscriptionSelectorsRef.current) {\n                const returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());\n                if (true) {\n                    if (typeof returnedValue !== \"object\" || typeof returnedValue?.type === \"string\") {\n                        throw new Error( false ? 0 : `Warning: Middleware for RTK-Query API at reducerPath \"${api.reducerPath}\" has not been added to the store.\n    You must add the middleware for RTK-Query to function correctly!`);\n                    }\n                }\n                subscriptionSelectorsRef.current = returnedValue;\n            }\n            const stableArg = useStableQueryArgs(skip ? _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken : arg, // Even if the user provided a per-endpoint `serializeQueryArgs` with\n            // a consistent return value, _here_ we want to use the default behavior\n            // so we can tell if _anything_ actually changed. Otherwise, we can end up\n            // with a case where the query args did change but the serialization doesn't,\n            // and then we never try to initiate a refetch.\n            defaultSerializeQueryArgs, context.endpointDefinitions[name], name);\n            const stableSubscriptionOptions = useShallowStableValue({\n                refetchOnReconnect,\n                refetchOnFocus,\n                pollingInterval,\n                skipPollingIfUnfocused\n            });\n            const lastRenderHadSubscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n            const promiseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n            let { queryCacheKey, requestId } = promiseRef.current || {};\n            let currentRenderHasSubscription = false;\n            if (queryCacheKey && requestId) {\n                currentRenderHasSubscription = subscriptionSelectorsRef.current.isRequestSubscribed(queryCacheKey, requestId);\n            }\n            const subscriptionRemoved = !currentRenderHasSubscription && lastRenderHadSubscription.current;\n            usePossiblyImmediateEffect(()=>{\n                lastRenderHadSubscription.current = currentRenderHasSubscription;\n            });\n            usePossiblyImmediateEffect(()=>{\n                if (subscriptionRemoved) {\n                    promiseRef.current = void 0;\n                }\n            }, [\n                subscriptionRemoved\n            ]);\n            usePossiblyImmediateEffect(()=>{\n                const lastPromise = promiseRef.current;\n                if (typeof process !== \"undefined\" && \"development\" === \"removeMeOnCompilation\") {}\n                if (stableArg === _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken) {\n                    lastPromise?.unsubscribe();\n                    promiseRef.current = void 0;\n                    return;\n                }\n                const lastSubscriptionOptions = promiseRef.current?.subscriptionOptions;\n                if (!lastPromise || lastPromise.arg !== stableArg) {\n                    lastPromise?.unsubscribe();\n                    const promise = dispatch(initiate(stableArg, {\n                        subscriptionOptions: stableSubscriptionOptions,\n                        forceRefetch: refetchOnMountOrArgChange\n                    }));\n                    promiseRef.current = promise;\n                } else if (stableSubscriptionOptions !== lastSubscriptionOptions) {\n                    lastPromise.updateSubscriptionOptions(stableSubscriptionOptions);\n                }\n            }, [\n                dispatch,\n                initiate,\n                refetchOnMountOrArgChange,\n                stableArg,\n                stableSubscriptionOptions,\n                subscriptionRemoved\n            ]);\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n                return ()=>{\n                    promiseRef.current?.unsubscribe();\n                    promiseRef.current = void 0;\n                };\n            }, []);\n            return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n                    /**\n         * A method to manually refetch data for the query\n         */ refetch: ()=>{\n                        if (!promiseRef.current) throw new Error( false ? 0 : \"Cannot refetch a query that has not been started yet.\");\n                        return promiseRef.current?.refetch();\n                    }\n                }), []);\n        };\n        const useLazyQuerySubscription = ({ refetchOnReconnect, refetchOnFocus, pollingInterval = 0, skipPollingIfUnfocused = false } = {})=>{\n            const { initiate } = api.endpoints[name];\n            const dispatch = useDispatch();\n            const [arg, setArg] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(UNINITIALIZED_VALUE);\n            const promiseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n            const stableSubscriptionOptions = useShallowStableValue({\n                refetchOnReconnect,\n                refetchOnFocus,\n                pollingInterval,\n                skipPollingIfUnfocused\n            });\n            usePossiblyImmediateEffect(()=>{\n                const lastSubscriptionOptions = promiseRef.current?.subscriptionOptions;\n                if (stableSubscriptionOptions !== lastSubscriptionOptions) {\n                    promiseRef.current?.updateSubscriptionOptions(stableSubscriptionOptions);\n                }\n            }, [\n                stableSubscriptionOptions\n            ]);\n            const subscriptionOptionsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(stableSubscriptionOptions);\n            usePossiblyImmediateEffect(()=>{\n                subscriptionOptionsRef.current = stableSubscriptionOptions;\n            }, [\n                stableSubscriptionOptions\n            ]);\n            const trigger = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(arg2, preferCacheValue = false) {\n                let promise;\n                batch(()=>{\n                    promiseRef.current?.unsubscribe();\n                    promiseRef.current = promise = dispatch(initiate(arg2, {\n                        subscriptionOptions: subscriptionOptionsRef.current,\n                        forceRefetch: !preferCacheValue\n                    }));\n                    setArg(arg2);\n                });\n                return promise;\n            }, [\n                dispatch,\n                initiate\n            ]);\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n                return ()=>{\n                    promiseRef?.current?.unsubscribe();\n                };\n            }, []);\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n                if (arg !== UNINITIALIZED_VALUE && !promiseRef.current) {\n                    trigger(arg, true);\n                }\n            }, [\n                arg,\n                trigger\n            ]);\n            return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>[\n                    trigger,\n                    arg\n                ], [\n                trigger,\n                arg\n            ]);\n        };\n        const useQueryState = (arg, { skip = false, selectFromResult } = {})=>{\n            const { select } = api.endpoints[name];\n            const stableArg = useStableQueryArgs(skip ? _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken : arg, serializeQueryArgs, context.endpointDefinitions[name], name);\n            const lastValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n            const selectDefaultResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>createSelector2([\n                    select(stableArg),\n                    (_, lastResult)=>lastResult,\n                    (_)=>stableArg\n                ], queryStatePreSelector, {\n                    memoizeOptions: {\n                        resultEqualityCheck: react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual\n                    }\n                }), [\n                select,\n                stableArg\n            ]);\n            const querySelector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>selectFromResult ? createSelector2([\n                    selectDefaultResult\n                ], selectFromResult, {\n                    devModeChecks: {\n                        identityFunctionCheck: \"never\"\n                    }\n                }) : selectDefaultResult, [\n                selectDefaultResult,\n                selectFromResult\n            ]);\n            const currentState = useSelector((state)=>querySelector(state, lastValue.current), react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual);\n            const store = useStore();\n            const newLastValue = selectDefaultResult(store.getState(), lastValue.current);\n            useIsomorphicLayoutEffect(()=>{\n                lastValue.current = newLastValue;\n            }, [\n                newLastValue\n            ]);\n            return currentState;\n        };\n        return {\n            useQueryState,\n            useQuerySubscription,\n            useLazyQuerySubscription,\n            useLazyQuery (options) {\n                const [trigger, arg] = useLazyQuerySubscription(options);\n                const queryStateResults = useQueryState(arg, {\n                    ...options,\n                    skip: arg === UNINITIALIZED_VALUE\n                });\n                const info = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n                        lastArg: arg\n                    }), [\n                    arg\n                ]);\n                return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>[\n                        trigger,\n                        queryStateResults,\n                        info\n                    ], [\n                    trigger,\n                    queryStateResults,\n                    info\n                ]);\n            },\n            useQuery (arg, options) {\n                const querySubscriptionResults = useQuerySubscription(arg, options);\n                const queryStateResults = useQueryState(arg, {\n                    selectFromResult: arg === _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken || options?.skip ? void 0 : noPendingQueryStateSelector,\n                    ...options\n                });\n                const { data, status, isLoading, isSuccess, isError, error } = queryStateResults;\n                (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)({\n                    data,\n                    status,\n                    isLoading,\n                    isSuccess,\n                    isError,\n                    error\n                });\n                return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n                        ...queryStateResults,\n                        ...querySubscriptionResults\n                    }), [\n                    queryStateResults,\n                    querySubscriptionResults\n                ]);\n            }\n        };\n    }\n    function buildMutationHook(name) {\n        return ({ selectFromResult, fixedCacheKey } = {})=>{\n            const { select, initiate } = api.endpoints[name];\n            const dispatch = useDispatch();\n            const [promise, setPromise] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n                    if (!promise?.arg.fixedCacheKey) {\n                        promise?.reset();\n                    }\n                }, [\n                promise\n            ]);\n            const triggerMutation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(arg) {\n                const promise2 = dispatch(initiate(arg, {\n                    fixedCacheKey\n                }));\n                setPromise(promise2);\n                return promise2;\n            }, [\n                dispatch,\n                initiate,\n                fixedCacheKey\n            ]);\n            const { requestId } = promise || {};\n            const selectDefaultResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>select({\n                    fixedCacheKey,\n                    requestId: promise?.requestId\n                }), [\n                fixedCacheKey,\n                promise,\n                select\n            ]);\n            const mutationSelector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>selectFromResult ? createSelector2([\n                    selectDefaultResult\n                ], selectFromResult) : selectDefaultResult, [\n                selectFromResult,\n                selectDefaultResult\n            ]);\n            const currentState = useSelector(mutationSelector, react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual);\n            const originalArgs = fixedCacheKey == null ? promise?.arg.originalArgs : void 0;\n            const reset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n                batch(()=>{\n                    if (promise) {\n                        setPromise(void 0);\n                    }\n                    if (fixedCacheKey) {\n                        dispatch(api.internalActions.removeMutationResult({\n                            requestId,\n                            fixedCacheKey\n                        }));\n                    }\n                });\n            }, [\n                dispatch,\n                fixedCacheKey,\n                promise,\n                requestId\n            ]);\n            const { endpointName, data, status, isLoading, isSuccess, isError, error } = currentState;\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)({\n                endpointName,\n                data,\n                status,\n                isLoading,\n                isSuccess,\n                isError,\n                error\n            });\n            const finalState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n                    ...currentState,\n                    originalArgs,\n                    reset\n                }), [\n                currentState,\n                originalArgs,\n                reset\n            ]);\n            return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>[\n                    triggerMutation,\n                    finalState\n                ], [\n                triggerMutation,\n                finalState\n            ]);\n        };\n    }\n}\n// src/query/endpointDefinitions.ts\nfunction isQueryDefinition(e) {\n    return e.type === \"query\" /* query */ ;\n}\nfunction isMutationDefinition(e) {\n    return e.type === \"mutation\" /* mutation */ ;\n}\n// src/query/utils/capitalize.ts\nfunction capitalize(str) {\n    return str.replace(str[0], str[0].toUpperCase());\n}\n// src/query/tsHelpers.ts\nfunction safeAssign(target, ...args) {\n    return Object.assign(target, ...args);\n}\n// src/query/react/module.ts\n\n// src/query/utils/countObjectKeys.ts\nfunction countObjectKeys(obj) {\n    let count = 0;\n    for(const _key in obj){\n        count++;\n    }\n    return count;\n}\n// src/query/react/module.ts\n\nvar reactHooksModuleName = /* @__PURE__ */ Symbol();\nvar reactHooksModule = ({ batch = react_redux__WEBPACK_IMPORTED_MODULE_1__.batch, hooks = {\n    useDispatch: react_redux__WEBPACK_IMPORTED_MODULE_1__.useDispatch,\n    useSelector: react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector,\n    useStore: react_redux__WEBPACK_IMPORTED_MODULE_1__.useStore\n}, createSelector: createSelector2 = reselect__WEBPACK_IMPORTED_MODULE_4__.createSelector, unstable__sideEffectsInRender = false, ...rest } = {})=>{\n    if (true) {\n        const hookNames = [\n            \"useDispatch\",\n            \"useSelector\",\n            \"useStore\"\n        ];\n        let warned = false;\n        for (const hookName of hookNames){\n            if (countObjectKeys(rest) > 0) {\n                if (rest[hookName]) {\n                    if (!warned) {\n                        console.warn(\"As of RTK 2.0, the hooks now need to be specified as one object, provided under a `hooks` key:\\n`reactHooksModule({ hooks: { useDispatch, useSelector, useStore } })`\");\n                        warned = true;\n                    }\n                }\n                hooks[hookName] = rest[hookName];\n            }\n            if (typeof hooks[hookName] !== \"function\") {\n                throw new Error( false ? 0 : `When using custom hooks for context, all ${hookNames.length} hooks need to be provided: ${hookNames.join(\", \")}.\nHook ${hookName} was either not provided or not a function.`);\n            }\n        }\n    }\n    return {\n        name: reactHooksModuleName,\n        init (api, { serializeQueryArgs }, context) {\n            const anyApi = api;\n            const { buildQueryHooks, buildMutationHook, usePrefetch } = buildHooks({\n                api,\n                moduleOptions: {\n                    batch,\n                    hooks,\n                    unstable__sideEffectsInRender,\n                    createSelector: createSelector2\n                },\n                serializeQueryArgs,\n                context\n            });\n            safeAssign(anyApi, {\n                usePrefetch\n            });\n            safeAssign(context, {\n                batch\n            });\n            return {\n                injectEndpoint (endpointName, definition) {\n                    if (isQueryDefinition(definition)) {\n                        const { useQuery, useLazyQuery, useLazyQuerySubscription, useQueryState, useQuerySubscription } = buildQueryHooks(endpointName);\n                        safeAssign(anyApi.endpoints[endpointName], {\n                            useQuery,\n                            useLazyQuery,\n                            useLazyQuerySubscription,\n                            useQueryState,\n                            useQuerySubscription\n                        });\n                        api[`use${capitalize(endpointName)}Query`] = useQuery;\n                        api[`useLazy${capitalize(endpointName)}Query`] = useLazyQuery;\n                    } else if (isMutationDefinition(definition)) {\n                        const useMutation = buildMutationHook(endpointName);\n                        safeAssign(anyApi.endpoints[endpointName], {\n                            useMutation\n                        });\n                        api[`use${capitalize(endpointName)}Mutation`] = useMutation;\n                    }\n                }\n            };\n        }\n    };\n};\n// src/query/react/index.ts\n\n// src/query/react/ApiProvider.tsx\n\n\n\n\n\n\n\nfunction ApiProvider(props) {\n    const context = props.context || react_redux__WEBPACK_IMPORTED_MODULE_1__.ReactReduxContext;\n    const existingContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context);\n    if (existingContext) {\n        throw new Error( false ? 0 : \"Existing Redux context detected. If you already have a store set up, please use the traditional Redux setup.\");\n    }\n    const [store] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_5__.configureStore)({\n            reducer: {\n                [props.api.reducerPath]: props.api.reducer\n            },\n            middleware: (gDM)=>gDM().concat(props.api.middleware)\n        }));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>props.setupListeners === false ? void 0 : (0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.setupListeners)(store.dispatch, props.setupListeners), [\n        props.setupListeners,\n        store.dispatch\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_redux__WEBPACK_IMPORTED_MODULE_1__.Provider, {\n        store,\n        context\n    }, props.children);\n}\n// src/query/react/index.ts\nvar createApi = /* @__PURE__ */ (0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.buildCreateApi)((0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.coreModule)(), reactHooksModule());\n //# sourceMappingURL=rtk-query-react.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryStatus: () => (/* binding */ QueryStatus),\n/* harmony export */   buildCreateApi: () => (/* binding */ buildCreateApi),\n/* harmony export */   copyWithStructuralSharing: () => (/* binding */ copyWithStructuralSharing),\n/* harmony export */   coreModule: () => (/* binding */ coreModule),\n/* harmony export */   coreModuleName: () => (/* binding */ coreModuleName),\n/* harmony export */   createApi: () => (/* binding */ createApi),\n/* harmony export */   defaultSerializeQueryArgs: () => (/* binding */ defaultSerializeQueryArgs),\n/* harmony export */   fakeBaseQuery: () => (/* binding */ fakeBaseQuery),\n/* harmony export */   fetchBaseQuery: () => (/* binding */ fetchBaseQuery),\n/* harmony export */   retry: () => (/* binding */ retry),\n/* harmony export */   setupListeners: () => (/* binding */ setupListeners),\n/* harmony export */   skipToken: () => (/* binding */ skipToken)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/redux/dist/redux.mjs\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/dist/reselect.mjs\");\n// src/query/core/apiState.ts\nvar QueryStatus = /* @__PURE__ */ ((QueryStatus2)=>{\n    QueryStatus2[\"uninitialized\"] = \"uninitialized\";\n    QueryStatus2[\"pending\"] = \"pending\";\n    QueryStatus2[\"fulfilled\"] = \"fulfilled\";\n    QueryStatus2[\"rejected\"] = \"rejected\";\n    return QueryStatus2;\n})(QueryStatus || {});\nfunction getRequestStatusFlags(status) {\n    return {\n        status,\n        isUninitialized: status === \"uninitialized\" /* uninitialized */ ,\n        isLoading: status === \"pending\" /* pending */ ,\n        isSuccess: status === \"fulfilled\" /* fulfilled */ ,\n        isError: status === \"rejected\" /* rejected */ \n    };\n}\n// src/query/utils/isAbsoluteUrl.ts\nfunction isAbsoluteUrl(url) {\n    return new RegExp(`(^|:)//`).test(url);\n}\n// src/query/utils/joinUrls.ts\nvar withoutTrailingSlash = (url)=>url.replace(/\\/$/, \"\");\nvar withoutLeadingSlash = (url)=>url.replace(/^\\//, \"\");\nfunction joinUrls(base, url) {\n    if (!base) {\n        return url;\n    }\n    if (!url) {\n        return base;\n    }\n    if (isAbsoluteUrl(url)) {\n        return url;\n    }\n    const delimiter = base.endsWith(\"/\") || !url.startsWith(\"?\") ? \"/\" : \"\";\n    base = withoutTrailingSlash(base);\n    url = withoutLeadingSlash(url);\n    return `${base}${delimiter}${url}`;\n}\n// src/query/utils/flatten.ts\nvar flatten = (arr)=>[].concat(...arr);\n// src/query/utils/isOnline.ts\nfunction isOnline() {\n    return typeof navigator === \"undefined\" ? true : navigator.onLine === void 0 ? true : navigator.onLine;\n}\n// src/query/utils/isDocumentVisible.ts\nfunction isDocumentVisible() {\n    if (typeof document === \"undefined\") {\n        return true;\n    }\n    return document.visibilityState !== \"hidden\";\n}\n// src/query/core/rtkImports.ts\n\n// src/query/utils/copyWithStructuralSharing.ts\nvar isPlainObject2 = _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject;\nfunction copyWithStructuralSharing(oldObj, newObj) {\n    if (oldObj === newObj || !(isPlainObject2(oldObj) && isPlainObject2(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {\n        return newObj;\n    }\n    const newKeys = Object.keys(newObj);\n    const oldKeys = Object.keys(oldObj);\n    let isSameObject = newKeys.length === oldKeys.length;\n    const mergeObj = Array.isArray(newObj) ? [] : {};\n    for (const key of newKeys){\n        mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);\n        if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];\n    }\n    return isSameObject ? oldObj : mergeObj;\n}\n// src/query/fetchBaseQuery.ts\nvar defaultFetchFn = (...args)=>fetch(...args);\nvar defaultValidateStatus = (response)=>response.status >= 200 && response.status <= 299;\nvar defaultIsJsonContentType = (headers)=>/*applicat*/ /ion\\/(vnd\\.api\\+)?json/.test(headers.get(\"content-type\") || \"\");\nfunction stripUndefined(obj) {\n    if (!(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(obj)) {\n        return obj;\n    }\n    const copy = {\n        ...obj\n    };\n    for (const [k, v] of Object.entries(copy)){\n        if (v === void 0) delete copy[k];\n    }\n    return copy;\n}\nfunction fetchBaseQuery({ baseUrl, prepareHeaders = (x)=>x, fetchFn = defaultFetchFn, paramsSerializer, isJsonContentType = defaultIsJsonContentType, jsonContentType = \"application/json\", jsonReplacer, timeout: defaultTimeout, responseHandler: globalResponseHandler, validateStatus: globalValidateStatus, ...baseFetchOptions } = {}) {\n    if (typeof fetch === \"undefined\" && fetchFn === defaultFetchFn) {\n        console.warn(\"Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.\");\n    }\n    return async (arg, api)=>{\n        const { signal, getState, extra, endpoint, forced, type } = api;\n        let meta;\n        let { url, headers = new Headers(baseFetchOptions.headers), params = void 0, responseHandler = globalResponseHandler ?? \"json\", validateStatus = globalValidateStatus ?? defaultValidateStatus, timeout = defaultTimeout, ...rest } = typeof arg == \"string\" ? {\n            url: arg\n        } : arg;\n        let config = {\n            ...baseFetchOptions,\n            signal,\n            ...rest\n        };\n        headers = new Headers(stripUndefined(headers));\n        config.headers = await prepareHeaders(headers, {\n            getState,\n            extra,\n            endpoint,\n            forced,\n            type\n        }) || headers;\n        const isJsonifiable = (body)=>typeof body === \"object\" && ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(body) || Array.isArray(body) || typeof body.toJSON === \"function\");\n        if (!config.headers.has(\"content-type\") && isJsonifiable(config.body)) {\n            config.headers.set(\"content-type\", jsonContentType);\n        }\n        if (isJsonifiable(config.body) && isJsonContentType(config.headers)) {\n            config.body = JSON.stringify(config.body, jsonReplacer);\n        }\n        if (params) {\n            const divider = ~url.indexOf(\"?\") ? \"&\" : \"?\";\n            const query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));\n            url += divider + query;\n        }\n        url = joinUrls(baseUrl, url);\n        const request = new Request(url, config);\n        const requestClone = new Request(url, config);\n        meta = {\n            request: requestClone\n        };\n        let response, timedOut = false, timeoutId = timeout && setTimeout(()=>{\n            timedOut = true;\n            api.abort();\n        }, timeout);\n        try {\n            response = await fetchFn(request);\n        } catch (e) {\n            return {\n                error: {\n                    status: timedOut ? \"TIMEOUT_ERROR\" : \"FETCH_ERROR\",\n                    error: String(e)\n                },\n                meta\n            };\n        } finally{\n            if (timeoutId) clearTimeout(timeoutId);\n        }\n        const responseClone = response.clone();\n        meta.response = responseClone;\n        let resultData;\n        let responseText = \"\";\n        try {\n            let handleResponseError;\n            await Promise.all([\n                handleResponse(response, responseHandler).then((r)=>resultData = r, (e)=>handleResponseError = e),\n                // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182\n                // we *have* to \"use up\" both streams at the same time or they will stop running in node-fetch scenarios\n                responseClone.text().then((r)=>responseText = r, ()=>{})\n            ]);\n            if (handleResponseError) throw handleResponseError;\n        } catch (e) {\n            return {\n                error: {\n                    status: \"PARSING_ERROR\",\n                    originalStatus: response.status,\n                    data: responseText,\n                    error: String(e)\n                },\n                meta\n            };\n        }\n        return validateStatus(response, resultData) ? {\n            data: resultData,\n            meta\n        } : {\n            error: {\n                status: response.status,\n                data: resultData\n            },\n            meta\n        };\n    };\n    async function handleResponse(response, responseHandler) {\n        if (typeof responseHandler === \"function\") {\n            return responseHandler(response);\n        }\n        if (responseHandler === \"content-type\") {\n            responseHandler = isJsonContentType(response.headers) ? \"json\" : \"text\";\n        }\n        if (responseHandler === \"json\") {\n            const text = await response.text();\n            return text.length ? JSON.parse(text) : null;\n        }\n        return response.text();\n    }\n}\n// src/query/HandledError.ts\nvar HandledError = class {\n    constructor(value, meta = void 0){\n        this.value = value;\n        this.meta = meta;\n    }\n};\n// src/query/retry.ts\nasync function defaultBackoff(attempt = 0, maxRetries = 5) {\n    const attempts = Math.min(attempt, maxRetries);\n    const timeout = ~~((Math.random() + 0.4) * (300 << attempts));\n    await new Promise((resolve)=>setTimeout((res)=>resolve(res), timeout));\n}\nfunction fail(e) {\n    throw Object.assign(new HandledError({\n        error: e\n    }), {\n        throwImmediately: true\n    });\n}\nvar EMPTY_OPTIONS = {};\nvar retryWithBackoff = (baseQuery, defaultOptions)=>async (args, api, extraOptions)=>{\n        const possibleMaxRetries = [\n            5,\n            (defaultOptions || EMPTY_OPTIONS).maxRetries,\n            (extraOptions || EMPTY_OPTIONS).maxRetries\n        ].filter((x)=>x !== void 0);\n        const [maxRetries] = possibleMaxRetries.slice(-1);\n        const defaultRetryCondition = (_, __, { attempt })=>attempt <= maxRetries;\n        const options = {\n            maxRetries,\n            backoff: defaultBackoff,\n            retryCondition: defaultRetryCondition,\n            ...defaultOptions,\n            ...extraOptions\n        };\n        let retry2 = 0;\n        while(true){\n            try {\n                const result = await baseQuery(args, api, extraOptions);\n                if (result.error) {\n                    throw new HandledError(result);\n                }\n                return result;\n            } catch (e) {\n                retry2++;\n                if (e.throwImmediately) {\n                    if (e instanceof HandledError) {\n                        return e.value;\n                    }\n                    throw e;\n                }\n                if (e instanceof HandledError && !options.retryCondition(e.value.error, args, {\n                    attempt: retry2,\n                    baseQueryApi: api,\n                    extraOptions\n                })) {\n                    return e.value;\n                }\n                await options.backoff(retry2, options.maxRetries);\n            }\n        }\n    };\nvar retry = /* @__PURE__ */ Object.assign(retryWithBackoff, {\n    fail\n});\n// src/query/core/setupListeners.ts\nvar onFocus = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"__rtkq/focused\");\nvar onFocusLost = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"__rtkq/unfocused\");\nvar onOnline = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"__rtkq/online\");\nvar onOffline = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"__rtkq/offline\");\nvar initialized = false;\nfunction setupListeners(dispatch, customHandler) {\n    function defaultHandler() {\n        const handleFocus = ()=>dispatch(onFocus());\n        const handleFocusLost = ()=>dispatch(onFocusLost());\n        const handleOnline = ()=>dispatch(onOnline());\n        const handleOffline = ()=>dispatch(onOffline());\n        const handleVisibilityChange = ()=>{\n            if (window.document.visibilityState === \"visible\") {\n                handleFocus();\n            } else {\n                handleFocusLost();\n            }\n        };\n        if (!initialized) {\n            if (false) {}\n        }\n        const unsubscribe = ()=>{\n            window.removeEventListener(\"focus\", handleFocus);\n            window.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n            window.removeEventListener(\"online\", handleOnline);\n            window.removeEventListener(\"offline\", handleOffline);\n            initialized = false;\n        };\n        return unsubscribe;\n    }\n    return customHandler ? customHandler(dispatch, {\n        onFocus,\n        onFocusLost,\n        onOffline,\n        onOnline\n    }) : defaultHandler();\n}\n// src/query/endpointDefinitions.ts\nfunction isQueryDefinition(e) {\n    return e.type === \"query\" /* query */ ;\n}\nfunction isMutationDefinition(e) {\n    return e.type === \"mutation\" /* mutation */ ;\n}\nfunction calculateProvidedBy(description, result, error, queryArg, meta, assertTagTypes) {\n    if (isFunction(description)) {\n        return description(result, error, queryArg, meta).map(expandTagDescription).map(assertTagTypes);\n    }\n    if (Array.isArray(description)) {\n        return description.map(expandTagDescription).map(assertTagTypes);\n    }\n    return [];\n}\nfunction isFunction(t) {\n    return typeof t === \"function\";\n}\nfunction expandTagDescription(description) {\n    return typeof description === \"string\" ? {\n        type: description\n    } : description;\n}\n// src/query/core/buildInitiate.ts\n\n// src/query/utils/isNotNullish.ts\nfunction isNotNullish(v) {\n    return v != null;\n}\n// src/query/utils/countObjectKeys.ts\nfunction countObjectKeys(obj) {\n    let count = 0;\n    for(const _key in obj){\n        count++;\n    }\n    return count;\n}\n// src/tsHelpers.ts\nfunction asSafePromise(promise, fallback) {\n    return promise.catch(fallback);\n}\n// src/query/core/buildInitiate.ts\nvar forceQueryFnSymbol = Symbol(\"forceQueryFn\");\nvar isUpsertQuery = (arg)=>typeof arg[forceQueryFnSymbol] === \"function\";\nfunction buildInitiate({ serializeQueryArgs, queryThunk, mutationThunk, api, context }) {\n    const runningQueries = /* @__PURE__ */ new Map();\n    const runningMutations = /* @__PURE__ */ new Map();\n    const { unsubscribeQueryResult, removeMutationResult, updateSubscriptionOptions } = api.internalActions;\n    return {\n        buildInitiateQuery,\n        buildInitiateMutation,\n        getRunningQueryThunk,\n        getRunningMutationThunk,\n        getRunningQueriesThunk,\n        getRunningMutationsThunk\n    };\n    function getRunningQueryThunk(endpointName, queryArgs) {\n        return (dispatch)=>{\n            const endpointDefinition = context.endpointDefinitions[endpointName];\n            const queryCacheKey = serializeQueryArgs({\n                queryArgs,\n                endpointDefinition,\n                endpointName\n            });\n            return runningQueries.get(dispatch)?.[queryCacheKey];\n        };\n    }\n    function getRunningMutationThunk(_endpointName, fixedCacheKeyOrRequestId) {\n        return (dispatch)=>{\n            return runningMutations.get(dispatch)?.[fixedCacheKeyOrRequestId];\n        };\n    }\n    function getRunningQueriesThunk() {\n        return (dispatch)=>Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish);\n    }\n    function getRunningMutationsThunk() {\n        return (dispatch)=>Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish);\n    }\n    function middlewareWarning(dispatch) {\n        if (true) {\n            if (middlewareWarning.triggered) return;\n            const returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());\n            middlewareWarning.triggered = true;\n            if (typeof returnedValue !== \"object\" || typeof returnedValue?.type === \"string\") {\n                throw new Error( false ? 0 : `Warning: Middleware for RTK-Query API at reducerPath \"${api.reducerPath}\" has not been added to the store.\nYou must add the middleware for RTK-Query to function correctly!`);\n            }\n        }\n    }\n    function buildInitiateQuery(endpointName, endpointDefinition) {\n        const queryAction = (arg, { subscribe = true, forceRefetch, subscriptionOptions, [forceQueryFnSymbol]: forceQueryFn } = {})=>(dispatch, getState)=>{\n                const queryCacheKey = serializeQueryArgs({\n                    queryArgs: arg,\n                    endpointDefinition,\n                    endpointName\n                });\n                const thunk = queryThunk({\n                    type: \"query\",\n                    subscribe,\n                    forceRefetch,\n                    subscriptionOptions,\n                    endpointName,\n                    originalArgs: arg,\n                    queryCacheKey,\n                    [forceQueryFnSymbol]: forceQueryFn\n                });\n                const selector = api.endpoints[endpointName].select(arg);\n                const thunkResult = dispatch(thunk);\n                const stateAfter = selector(getState());\n                middlewareWarning(dispatch);\n                const { requestId, abort } = thunkResult;\n                const skippedSynchronously = stateAfter.requestId !== requestId;\n                const runningQuery = runningQueries.get(dispatch)?.[queryCacheKey];\n                const selectFromState = ()=>selector(getState());\n                const statePromise = Object.assign(forceQueryFn ? // a query has been forced (upsertQueryData)\n                // -> we want to resolve it once data has been written with the data that will be written\n                thunkResult.then(selectFromState) : skippedSynchronously && !runningQuery ? // a query has been skipped due to a condition and we do not have any currently running query\n                // -> we want to resolve it immediately with the current data\n                Promise.resolve(stateAfter) : // query just started or one is already in flight\n                // -> wait for the running query, then resolve with data from after that\n                Promise.all([\n                    runningQuery,\n                    thunkResult\n                ]).then(selectFromState), {\n                    arg,\n                    requestId,\n                    subscriptionOptions,\n                    queryCacheKey,\n                    abort,\n                    async unwrap () {\n                        const result = await statePromise;\n                        if (result.isError) {\n                            throw result.error;\n                        }\n                        return result.data;\n                    },\n                    refetch: ()=>dispatch(queryAction(arg, {\n                            subscribe: false,\n                            forceRefetch: true\n                        })),\n                    unsubscribe () {\n                        if (subscribe) dispatch(unsubscribeQueryResult({\n                            queryCacheKey,\n                            requestId\n                        }));\n                    },\n                    updateSubscriptionOptions (options) {\n                        statePromise.subscriptionOptions = options;\n                        dispatch(updateSubscriptionOptions({\n                            endpointName,\n                            requestId,\n                            queryCacheKey,\n                            options\n                        }));\n                    }\n                });\n                if (!runningQuery && !skippedSynchronously && !forceQueryFn) {\n                    const running = runningQueries.get(dispatch) || {};\n                    running[queryCacheKey] = statePromise;\n                    runningQueries.set(dispatch, running);\n                    statePromise.then(()=>{\n                        delete running[queryCacheKey];\n                        if (!countObjectKeys(running)) {\n                            runningQueries.delete(dispatch);\n                        }\n                    });\n                }\n                return statePromise;\n            };\n        return queryAction;\n    }\n    function buildInitiateMutation(endpointName) {\n        return (arg, { track = true, fixedCacheKey } = {})=>(dispatch, getState)=>{\n                const thunk = mutationThunk({\n                    type: \"mutation\",\n                    endpointName,\n                    originalArgs: arg,\n                    track,\n                    fixedCacheKey\n                });\n                const thunkResult = dispatch(thunk);\n                middlewareWarning(dispatch);\n                const { requestId, abort, unwrap } = thunkResult;\n                const returnValuePromise = asSafePromise(thunkResult.unwrap().then((data)=>({\n                        data\n                    })), (error)=>({\n                        error\n                    }));\n                const reset = ()=>{\n                    dispatch(removeMutationResult({\n                        requestId,\n                        fixedCacheKey\n                    }));\n                };\n                const ret = Object.assign(returnValuePromise, {\n                    arg: thunkResult.arg,\n                    requestId,\n                    abort,\n                    unwrap,\n                    reset\n                });\n                const running = runningMutations.get(dispatch) || {};\n                runningMutations.set(dispatch, running);\n                running[requestId] = ret;\n                ret.then(()=>{\n                    delete running[requestId];\n                    if (!countObjectKeys(running)) {\n                        runningMutations.delete(dispatch);\n                    }\n                });\n                if (fixedCacheKey) {\n                    running[fixedCacheKey] = ret;\n                    ret.then(()=>{\n                        if (running[fixedCacheKey] === ret) {\n                            delete running[fixedCacheKey];\n                            if (!countObjectKeys(running)) {\n                                runningMutations.delete(dispatch);\n                            }\n                        }\n                    });\n                }\n                return ret;\n            };\n    }\n}\n// src/query/core/buildThunks.ts\n\nfunction defaultTransformResponse(baseQueryReturnValue) {\n    return baseQueryReturnValue;\n}\nfunction buildThunks({ reducerPath, baseQuery, context: { endpointDefinitions }, serializeQueryArgs, api, assertTagType }) {\n    const patchQueryData = (endpointName, args, patches, updateProvided)=>(dispatch, getState)=>{\n            const endpointDefinition = endpointDefinitions[endpointName];\n            const queryCacheKey = serializeQueryArgs({\n                queryArgs: args,\n                endpointDefinition,\n                endpointName\n            });\n            dispatch(api.internalActions.queryResultPatched({\n                queryCacheKey,\n                patches\n            }));\n            if (!updateProvided) {\n                return;\n            }\n            const newValue = api.endpoints[endpointName].select(args)(// Work around TS 4.1 mismatch\n            getState());\n            const providedTags = calculateProvidedBy(endpointDefinition.providesTags, newValue.data, void 0, args, {}, assertTagType);\n            dispatch(api.internalActions.updateProvidedBy({\n                queryCacheKey,\n                providedTags\n            }));\n        };\n    const updateQueryData = (endpointName, args, updateRecipe, updateProvided = true)=>(dispatch, getState)=>{\n            const endpointDefinition = api.endpoints[endpointName];\n            const currentState = endpointDefinition.select(args)(// Work around TS 4.1 mismatch\n            getState());\n            let ret = {\n                patches: [],\n                inversePatches: [],\n                undo: ()=>dispatch(api.util.patchQueryData(endpointName, args, ret.inversePatches, updateProvided))\n            };\n            if (currentState.status === \"uninitialized\" /* uninitialized */ ) {\n                return ret;\n            }\n            let newValue;\n            if (\"data\" in currentState) {\n                if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(currentState.data)) {\n                    const [value, patches, inversePatches] = (0,immer__WEBPACK_IMPORTED_MODULE_2__.produceWithPatches)(currentState.data, updateRecipe);\n                    ret.patches.push(...patches);\n                    ret.inversePatches.push(...inversePatches);\n                    newValue = value;\n                } else {\n                    newValue = updateRecipe(currentState.data);\n                    ret.patches.push({\n                        op: \"replace\",\n                        path: [],\n                        value: newValue\n                    });\n                    ret.inversePatches.push({\n                        op: \"replace\",\n                        path: [],\n                        value: currentState.data\n                    });\n                }\n            }\n            dispatch(api.util.patchQueryData(endpointName, args, ret.patches, updateProvided));\n            return ret;\n        };\n    const upsertQueryData = (endpointName, args, value)=>(dispatch)=>{\n            return dispatch(api.endpoints[endpointName].initiate(args, {\n                subscribe: false,\n                forceRefetch: true,\n                [forceQueryFnSymbol]: ()=>({\n                        data: value\n                    })\n            }));\n        };\n    const executeEndpoint = async (arg, { signal, abort, rejectWithValue, fulfillWithValue, dispatch, getState, extra })=>{\n        const endpointDefinition = endpointDefinitions[arg.endpointName];\n        try {\n            let transformResponse = defaultTransformResponse;\n            let result;\n            const baseQueryApi = {\n                signal,\n                abort,\n                dispatch,\n                getState,\n                extra,\n                endpoint: arg.endpointName,\n                type: arg.type,\n                forced: arg.type === \"query\" ? isForcedQuery(arg, getState()) : void 0\n            };\n            const forceQueryFn = arg.type === \"query\" ? arg[forceQueryFnSymbol] : void 0;\n            if (forceQueryFn) {\n                result = forceQueryFn();\n            } else if (endpointDefinition.query) {\n                result = await baseQuery(endpointDefinition.query(arg.originalArgs), baseQueryApi, endpointDefinition.extraOptions);\n                if (endpointDefinition.transformResponse) {\n                    transformResponse = endpointDefinition.transformResponse;\n                }\n            } else {\n                result = await endpointDefinition.queryFn(arg.originalArgs, baseQueryApi, endpointDefinition.extraOptions, (arg2)=>baseQuery(arg2, baseQueryApi, endpointDefinition.extraOptions));\n            }\n            if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n                const what = endpointDefinition.query ? \"`baseQuery`\" : \"`queryFn`\";\n                let err;\n                if (!result) {\n                    err = `${what} did not return anything.`;\n                } else if (typeof result !== \"object\") {\n                    err = `${what} did not return an object.`;\n                } else if (result.error && result.data) {\n                    err = `${what} returned an object containing both \\`error\\` and \\`result\\`.`;\n                } else if (result.error === void 0 && result.data === void 0) {\n                    err = `${what} returned an object containing neither a valid \\`error\\` and \\`result\\`. At least one of them should not be \\`undefined\\``;\n                } else {\n                    for (const key of Object.keys(result)){\n                        if (key !== \"error\" && key !== \"data\" && key !== \"meta\") {\n                            err = `The object returned by ${what} has the unknown property ${key}.`;\n                            break;\n                        }\n                    }\n                }\n                if (err) {\n                    console.error(`Error encountered handling the endpoint ${arg.endpointName}.\n              ${err}\n              It needs to return an object with either the shape \\`{ data: <value> }\\` or \\`{ error: <value> }\\` that may contain an optional \\`meta\\` property.\n              Object returned was:`, result);\n                }\n            }\n            if (result.error) throw new HandledError(result.error, result.meta);\n            return fulfillWithValue(await transformResponse(result.data, result.meta, arg.originalArgs), {\n                fulfilledTimeStamp: Date.now(),\n                baseQueryMeta: result.meta,\n                [_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.SHOULD_AUTOBATCH]: true\n            });\n        } catch (error) {\n            let catchedError = error;\n            if (catchedError instanceof HandledError) {\n                let transformErrorResponse = defaultTransformResponse;\n                if (endpointDefinition.query && endpointDefinition.transformErrorResponse) {\n                    transformErrorResponse = endpointDefinition.transformErrorResponse;\n                }\n                try {\n                    return rejectWithValue(await transformErrorResponse(catchedError.value, catchedError.meta, arg.originalArgs), {\n                        baseQueryMeta: catchedError.meta,\n                        [_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.SHOULD_AUTOBATCH]: true\n                    });\n                } catch (e) {\n                    catchedError = e;\n                }\n            }\n            if (typeof process !== \"undefined\" && \"development\" !== \"production\") {\n                console.error(`An unhandled error occurred processing a request for the endpoint \"${arg.endpointName}\".\nIn the case of an unhandled error, no tags will be \"provided\" or \"invalidated\".`, catchedError);\n            } else {\n                console.error(catchedError);\n            }\n            throw catchedError;\n        }\n    };\n    function isForcedQuery(arg, state) {\n        const requestState = state[reducerPath]?.queries?.[arg.queryCacheKey];\n        const baseFetchOnMountOrArgChange = state[reducerPath]?.config.refetchOnMountOrArgChange;\n        const fulfilledVal = requestState?.fulfilledTimeStamp;\n        const refetchVal = arg.forceRefetch ?? (arg.subscribe && baseFetchOnMountOrArgChange);\n        if (refetchVal) {\n            return refetchVal === true || (Number(/* @__PURE__ */ new Date()) - Number(fulfilledVal)) / 1e3 >= refetchVal;\n        }\n        return false;\n    }\n    const queryThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAsyncThunk)(`${reducerPath}/executeQuery`, executeEndpoint, {\n        getPendingMeta () {\n            return {\n                startedTimeStamp: Date.now(),\n                [_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.SHOULD_AUTOBATCH]: true\n            };\n        },\n        condition (queryThunkArgs, { getState }) {\n            const state = getState();\n            const requestState = state[reducerPath]?.queries?.[queryThunkArgs.queryCacheKey];\n            const fulfilledVal = requestState?.fulfilledTimeStamp;\n            const currentArg = queryThunkArgs.originalArgs;\n            const previousArg = requestState?.originalArgs;\n            const endpointDefinition = endpointDefinitions[queryThunkArgs.endpointName];\n            if (isUpsertQuery(queryThunkArgs)) {\n                return true;\n            }\n            if (requestState?.status === \"pending\") {\n                return false;\n            }\n            if (isForcedQuery(queryThunkArgs, state)) {\n                return true;\n            }\n            if (isQueryDefinition(endpointDefinition) && endpointDefinition?.forceRefetch?.({\n                currentArg,\n                previousArg,\n                endpointState: requestState,\n                state\n            })) {\n                return true;\n            }\n            if (fulfilledVal) {\n                return false;\n            }\n            return true;\n        },\n        dispatchConditionRejection: true\n    });\n    const mutationThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAsyncThunk)(`${reducerPath}/executeMutation`, executeEndpoint, {\n        getPendingMeta () {\n            return {\n                startedTimeStamp: Date.now(),\n                [_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.SHOULD_AUTOBATCH]: true\n            };\n        }\n    });\n    const hasTheForce = (options)=>\"force\" in options;\n    const hasMaxAge = (options)=>\"ifOlderThan\" in options;\n    const prefetch = (endpointName, arg, options)=>(dispatch, getState)=>{\n            const force = hasTheForce(options) && options.force;\n            const maxAge = hasMaxAge(options) && options.ifOlderThan;\n            const queryAction = (force2 = true)=>api.endpoints[endpointName].initiate(arg, {\n                    forceRefetch: force2\n                });\n            const latestStateValue = api.endpoints[endpointName].select(arg)(getState());\n            if (force) {\n                dispatch(queryAction());\n            } else if (maxAge) {\n                const lastFulfilledTs = latestStateValue?.fulfilledTimeStamp;\n                if (!lastFulfilledTs) {\n                    dispatch(queryAction());\n                    return;\n                }\n                const shouldRetrigger = (Number(/* @__PURE__ */ new Date()) - Number(new Date(lastFulfilledTs))) / 1e3 >= maxAge;\n                if (shouldRetrigger) {\n                    dispatch(queryAction());\n                }\n            } else {\n                dispatch(queryAction(false));\n            }\n        };\n    function matchesEndpoint(endpointName) {\n        return (action)=>action?.meta?.arg?.endpointName === endpointName;\n    }\n    function buildMatchThunkActions(thunk, endpointName) {\n        return {\n            matchPending: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAllOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isPending)(thunk), matchesEndpoint(endpointName)),\n            matchFulfilled: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAllOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(thunk), matchesEndpoint(endpointName)),\n            matchRejected: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAllOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejected)(thunk), matchesEndpoint(endpointName))\n        };\n    }\n    return {\n        queryThunk,\n        mutationThunk,\n        prefetch,\n        updateQueryData,\n        upsertQueryData,\n        patchQueryData,\n        buildMatchThunkActions\n    };\n}\nfunction calculateProvidedByThunk(action, type, endpointDefinitions, assertTagType) {\n    return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type], (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(action) ? action.payload : void 0, (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejectedWithValue)(action) ? action.payload : void 0, action.meta.arg.originalArgs, \"baseQueryMeta\" in action.meta ? action.meta.baseQueryMeta : void 0, assertTagType);\n}\n// src/query/core/buildSlice.ts\n\n\nfunction updateQuerySubstateIfExists(state, queryCacheKey, update) {\n    const substate = state[queryCacheKey];\n    if (substate) {\n        update(substate);\n    }\n}\nfunction getMutationCacheKey(id) {\n    return (\"arg\" in id ? id.arg.fixedCacheKey : id.fixedCacheKey) ?? id.requestId;\n}\nfunction updateMutationSubstateIfExists(state, id, update) {\n    const substate = state[getMutationCacheKey(id)];\n    if (substate) {\n        update(substate);\n    }\n}\nvar initialState = {};\nfunction buildSlice({ reducerPath, queryThunk, mutationThunk, context: { endpointDefinitions: definitions, apiUid, extractRehydrationInfo, hasRehydrationInfo }, assertTagType, config }) {\n    const resetApiState = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(`${reducerPath}/resetApiState`);\n    const querySlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n        name: `${reducerPath}/queries`,\n        initialState,\n        reducers: {\n            removeQueryResult: {\n                reducer (draft, { payload: { queryCacheKey } }) {\n                    delete draft[queryCacheKey];\n                },\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n            },\n            queryResultPatched: {\n                reducer (draft, { payload: { queryCacheKey, patches } }) {\n                    updateQuerySubstateIfExists(draft, queryCacheKey, (substate)=>{\n                        substate.data = (0,immer__WEBPACK_IMPORTED_MODULE_2__.applyPatches)(substate.data, patches.concat());\n                    });\n                },\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n            }\n        },\n        extraReducers (builder) {\n            builder.addCase(queryThunk.pending, (draft, { meta, meta: { arg } })=>{\n                const upserting = isUpsertQuery(arg);\n                draft[arg.queryCacheKey] ??= {\n                    status: \"uninitialized\" /* uninitialized */ ,\n                    endpointName: arg.endpointName\n                };\n                updateQuerySubstateIfExists(draft, arg.queryCacheKey, (substate)=>{\n                    substate.status = \"pending\" /* pending */ ;\n                    substate.requestId = upserting && substate.requestId ? // for `upsertQuery` **updates**, keep the current `requestId`\n                    substate.requestId : // for normal queries or `upsertQuery` **inserts** always update the `requestId`\n                    meta.requestId;\n                    if (arg.originalArgs !== void 0) {\n                        substate.originalArgs = arg.originalArgs;\n                    }\n                    substate.startedTimeStamp = meta.startedTimeStamp;\n                });\n            }).addCase(queryThunk.fulfilled, (draft, { meta, payload })=>{\n                updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, (substate)=>{\n                    if (substate.requestId !== meta.requestId && !isUpsertQuery(meta.arg)) return;\n                    const { merge } = definitions[meta.arg.endpointName];\n                    substate.status = \"fulfilled\" /* fulfilled */ ;\n                    if (merge) {\n                        if (substate.data !== void 0) {\n                            const { fulfilledTimeStamp, arg, baseQueryMeta, requestId } = meta;\n                            let newData = (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(substate.data, (draftSubstateData)=>{\n                                return merge(draftSubstateData, payload, {\n                                    arg: arg.originalArgs,\n                                    baseQueryMeta,\n                                    fulfilledTimeStamp,\n                                    requestId\n                                });\n                            });\n                            substate.data = newData;\n                        } else {\n                            substate.data = payload;\n                        }\n                    } else {\n                        substate.data = definitions[meta.arg.endpointName].structuralSharing ?? true ? copyWithStructuralSharing((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(substate.data) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.original)(substate.data) : substate.data, payload) : payload;\n                    }\n                    delete substate.error;\n                    substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n                });\n            }).addCase(queryThunk.rejected, (draft, { meta: { condition, arg, requestId }, error, payload })=>{\n                updateQuerySubstateIfExists(draft, arg.queryCacheKey, (substate)=>{\n                    if (condition) {} else {\n                        if (substate.requestId !== requestId) return;\n                        substate.status = \"rejected\" /* rejected */ ;\n                        substate.error = payload ?? error;\n                    }\n                });\n            }).addMatcher(hasRehydrationInfo, (draft, action)=>{\n                const { queries } = extractRehydrationInfo(action);\n                for (const [key, entry] of Object.entries(queries)){\n                    if (// do not rehydrate entries that were currently in flight.\n                    entry?.status === \"fulfilled\" /* fulfilled */  || entry?.status === \"rejected\" /* rejected */ ) {\n                        draft[key] = entry;\n                    }\n                }\n            });\n        }\n    });\n    const mutationSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n        name: `${reducerPath}/mutations`,\n        initialState,\n        reducers: {\n            removeMutationResult: {\n                reducer (draft, { payload }) {\n                    const cacheKey = getMutationCacheKey(payload);\n                    if (cacheKey in draft) {\n                        delete draft[cacheKey];\n                    }\n                },\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n            }\n        },\n        extraReducers (builder) {\n            builder.addCase(mutationThunk.pending, (draft, { meta, meta: { requestId, arg, startedTimeStamp } })=>{\n                if (!arg.track) return;\n                draft[getMutationCacheKey(meta)] = {\n                    requestId,\n                    status: \"pending\" /* pending */ ,\n                    endpointName: arg.endpointName,\n                    startedTimeStamp\n                };\n            }).addCase(mutationThunk.fulfilled, (draft, { payload, meta })=>{\n                if (!meta.arg.track) return;\n                updateMutationSubstateIfExists(draft, meta, (substate)=>{\n                    if (substate.requestId !== meta.requestId) return;\n                    substate.status = \"fulfilled\" /* fulfilled */ ;\n                    substate.data = payload;\n                    substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n                });\n            }).addCase(mutationThunk.rejected, (draft, { payload, error, meta })=>{\n                if (!meta.arg.track) return;\n                updateMutationSubstateIfExists(draft, meta, (substate)=>{\n                    if (substate.requestId !== meta.requestId) return;\n                    substate.status = \"rejected\" /* rejected */ ;\n                    substate.error = payload ?? error;\n                });\n            }).addMatcher(hasRehydrationInfo, (draft, action)=>{\n                const { mutations } = extractRehydrationInfo(action);\n                for (const [key, entry] of Object.entries(mutations)){\n                    if (// do not rehydrate entries that were currently in flight.\n                    (entry?.status === \"fulfilled\" /* fulfilled */  || entry?.status === \"rejected\" /* rejected */ ) && // only rehydrate endpoints that were persisted using a `fixedCacheKey`\n                    key !== entry?.requestId) {\n                        draft[key] = entry;\n                    }\n                }\n            });\n        }\n    });\n    const invalidationSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n        name: `${reducerPath}/invalidation`,\n        initialState,\n        reducers: {\n            updateProvidedBy: {\n                reducer (draft, action) {\n                    const { queryCacheKey, providedTags } = action.payload;\n                    for (const tagTypeSubscriptions of Object.values(draft)){\n                        for (const idSubscriptions of Object.values(tagTypeSubscriptions)){\n                            const foundAt = idSubscriptions.indexOf(queryCacheKey);\n                            if (foundAt !== -1) {\n                                idSubscriptions.splice(foundAt, 1);\n                            }\n                        }\n                    }\n                    for (const { type, id } of providedTags){\n                        const subscribedQueries = (draft[type] ??= {})[id || \"__internal_without_id\"] ??= [];\n                        const alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n                        if (!alreadySubscribed) {\n                            subscribedQueries.push(queryCacheKey);\n                        }\n                    }\n                },\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n            }\n        },\n        extraReducers (builder) {\n            builder.addCase(querySlice.actions.removeQueryResult, (draft, { payload: { queryCacheKey } })=>{\n                for (const tagTypeSubscriptions of Object.values(draft)){\n                    for (const idSubscriptions of Object.values(tagTypeSubscriptions)){\n                        const foundAt = idSubscriptions.indexOf(queryCacheKey);\n                        if (foundAt !== -1) {\n                            idSubscriptions.splice(foundAt, 1);\n                        }\n                    }\n                }\n            }).addMatcher(hasRehydrationInfo, (draft, action)=>{\n                const { provided } = extractRehydrationInfo(action);\n                for (const [type, incomingTags] of Object.entries(provided)){\n                    for (const [id, cacheKeys] of Object.entries(incomingTags)){\n                        const subscribedQueries = (draft[type] ??= {})[id || \"__internal_without_id\"] ??= [];\n                        for (const queryCacheKey of cacheKeys){\n                            const alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n                            if (!alreadySubscribed) {\n                                subscribedQueries.push(queryCacheKey);\n                            }\n                        }\n                    }\n                }\n            }).addMatcher((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(queryThunk), (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejectedWithValue)(queryThunk)), (draft, action)=>{\n                const providedTags = calculateProvidedByThunk(action, \"providesTags\", definitions, assertTagType);\n                const { queryCacheKey } = action.meta.arg;\n                invalidationSlice.caseReducers.updateProvidedBy(draft, invalidationSlice.actions.updateProvidedBy({\n                    queryCacheKey,\n                    providedTags\n                }));\n            });\n        }\n    });\n    const subscriptionSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n        name: `${reducerPath}/subscriptions`,\n        initialState,\n        reducers: {\n            updateSubscriptionOptions (d, a) {},\n            unsubscribeQueryResult (d, a) {},\n            internal_getRTKQSubscriptions () {}\n        }\n    });\n    const internalSubscriptionsSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n        name: `${reducerPath}/internalSubscriptions`,\n        initialState,\n        reducers: {\n            subscriptionsUpdated: {\n                reducer (state, action) {\n                    return (0,immer__WEBPACK_IMPORTED_MODULE_2__.applyPatches)(state, action.payload);\n                },\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n            }\n        }\n    });\n    const configSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n        name: `${reducerPath}/config`,\n        initialState: {\n            online: isOnline(),\n            focused: isDocumentVisible(),\n            middlewareRegistered: false,\n            ...config\n        },\n        reducers: {\n            middlewareRegistered (state, { payload }) {\n                state.middlewareRegistered = state.middlewareRegistered === \"conflict\" || apiUid !== payload ? \"conflict\" : true;\n            }\n        },\n        extraReducers: (builder)=>{\n            builder.addCase(onOnline, (state)=>{\n                state.online = true;\n            }).addCase(onOffline, (state)=>{\n                state.online = false;\n            }).addCase(onFocus, (state)=>{\n                state.focused = true;\n            }).addCase(onFocusLost, (state)=>{\n                state.focused = false;\n            }).addMatcher(hasRehydrationInfo, (draft)=>({\n                    ...draft\n                }));\n        }\n    });\n    const combinedReducer = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.combineReducers)({\n        queries: querySlice.reducer,\n        mutations: mutationSlice.reducer,\n        provided: invalidationSlice.reducer,\n        subscriptions: internalSubscriptionsSlice.reducer,\n        config: configSlice.reducer\n    });\n    const reducer = (state, action)=>combinedReducer(resetApiState.match(action) ? void 0 : state, action);\n    const actions = {\n        ...configSlice.actions,\n        ...querySlice.actions,\n        ...subscriptionSlice.actions,\n        ...internalSubscriptionsSlice.actions,\n        ...mutationSlice.actions,\n        ...invalidationSlice.actions,\n        resetApiState\n    };\n    return {\n        reducer,\n        actions\n    };\n}\n// src/query/core/buildSelectors.ts\nvar skipToken = /* @__PURE__ */ Symbol.for(\"RTKQ/skipToken\");\nvar initialSubState = {\n    status: \"uninitialized\" /* uninitialized */ \n};\nvar defaultQuerySubState = /* @__PURE__ */ (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(initialSubState, ()=>{});\nvar defaultMutationSubState = /* @__PURE__ */ (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(initialSubState, ()=>{});\nfunction buildSelectors({ serializeQueryArgs, reducerPath, createSelector: createSelector2 }) {\n    const selectSkippedQuery = (state)=>defaultQuerySubState;\n    const selectSkippedMutation = (state)=>defaultMutationSubState;\n    return {\n        buildQuerySelector,\n        buildMutationSelector,\n        selectInvalidatedBy,\n        selectCachedArgsForQuery\n    };\n    function withRequestFlags(substate) {\n        return {\n            ...substate,\n            ...getRequestStatusFlags(substate.status)\n        };\n    }\n    function selectInternalState(rootState) {\n        const state = rootState[reducerPath];\n        if (true) {\n            if (!state) {\n                if (selectInternalState.triggered) return state;\n                selectInternalState.triggered = true;\n                console.error(`Error: No data found at \\`state.${reducerPath}\\`. Did you forget to add the reducer to the store?`);\n            }\n        }\n        return state;\n    }\n    function buildQuerySelector(endpointName, endpointDefinition) {\n        return (queryArgs)=>{\n            const serializedArgs = serializeQueryArgs({\n                queryArgs,\n                endpointDefinition,\n                endpointName\n            });\n            const selectQuerySubstate = (state)=>selectInternalState(state)?.queries?.[serializedArgs] ?? defaultQuerySubState;\n            const finalSelectQuerySubState = queryArgs === skipToken ? selectSkippedQuery : selectQuerySubstate;\n            return createSelector2(finalSelectQuerySubState, withRequestFlags);\n        };\n    }\n    function buildMutationSelector() {\n        return (id)=>{\n            let mutationId;\n            if (typeof id === \"object\") {\n                mutationId = getMutationCacheKey(id) ?? skipToken;\n            } else {\n                mutationId = id;\n            }\n            const selectMutationSubstate = (state)=>selectInternalState(state)?.mutations?.[mutationId] ?? defaultMutationSubState;\n            const finalSelectMutationSubstate = mutationId === skipToken ? selectSkippedMutation : selectMutationSubstate;\n            return createSelector2(finalSelectMutationSubstate, withRequestFlags);\n        };\n    }\n    function selectInvalidatedBy(state, tags) {\n        const apiState = state[reducerPath];\n        const toInvalidate = /* @__PURE__ */ new Set();\n        for (const tag of tags.map(expandTagDescription)){\n            const provided = apiState.provided[tag.type];\n            if (!provided) {\n                continue;\n            }\n            let invalidateSubscriptions = (tag.id !== void 0 ? // id given: invalidate all queries that provide this type & id\n            provided[tag.id] : // no id: invalidate all queries that provide this type\n            flatten(Object.values(provided))) ?? [];\n            for (const invalidate of invalidateSubscriptions){\n                toInvalidate.add(invalidate);\n            }\n        }\n        return flatten(Array.from(toInvalidate.values()).map((queryCacheKey)=>{\n            const querySubState = apiState.queries[queryCacheKey];\n            return querySubState ? [\n                {\n                    queryCacheKey,\n                    endpointName: querySubState.endpointName,\n                    originalArgs: querySubState.originalArgs\n                }\n            ] : [];\n        }));\n    }\n    function selectCachedArgsForQuery(state, queryName) {\n        return Object.values(state[reducerPath].queries).filter((entry)=>entry?.endpointName === queryName && entry.status !== \"uninitialized\" /* uninitialized */ ).map((entry)=>entry.originalArgs);\n    }\n}\n// src/query/defaultSerializeQueryArgs.ts\nvar cache = WeakMap ? /* @__PURE__ */ new WeakMap() : void 0;\nvar defaultSerializeQueryArgs = ({ endpointName, queryArgs })=>{\n    let serialized = \"\";\n    const cached = cache?.get(queryArgs);\n    if (typeof cached === \"string\") {\n        serialized = cached;\n    } else {\n        const stringified = JSON.stringify(queryArgs, (key, value)=>(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value) ? Object.keys(value).sort().reduce((acc, key2)=>{\n                acc[key2] = value[key2];\n                return acc;\n            }, {}) : value);\n        if ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(queryArgs)) {\n            cache?.set(queryArgs, stringified);\n        }\n        serialized = stringified;\n    }\n    return `${endpointName}(${serialized})`;\n};\n// src/query/createApi.ts\n\nfunction buildCreateApi(...modules) {\n    return function baseCreateApi(options) {\n        const extractRehydrationInfo = (0,reselect__WEBPACK_IMPORTED_MODULE_3__.weakMapMemoize)((action)=>options.extractRehydrationInfo?.(action, {\n                reducerPath: options.reducerPath ?? \"api\"\n            }));\n        const optionsWithDefaults = {\n            reducerPath: \"api\",\n            keepUnusedDataFor: 60,\n            refetchOnMountOrArgChange: false,\n            refetchOnFocus: false,\n            refetchOnReconnect: false,\n            invalidationBehavior: \"delayed\",\n            ...options,\n            extractRehydrationInfo,\n            serializeQueryArgs (queryArgsApi) {\n                let finalSerializeQueryArgs = defaultSerializeQueryArgs;\n                if (\"serializeQueryArgs\" in queryArgsApi.endpointDefinition) {\n                    const endpointSQA = queryArgsApi.endpointDefinition.serializeQueryArgs;\n                    finalSerializeQueryArgs = (queryArgsApi2)=>{\n                        const initialResult = endpointSQA(queryArgsApi2);\n                        if (typeof initialResult === \"string\") {\n                            return initialResult;\n                        } else {\n                            return defaultSerializeQueryArgs({\n                                ...queryArgsApi2,\n                                queryArgs: initialResult\n                            });\n                        }\n                    };\n                } else if (options.serializeQueryArgs) {\n                    finalSerializeQueryArgs = options.serializeQueryArgs;\n                }\n                return finalSerializeQueryArgs(queryArgsApi);\n            },\n            tagTypes: [\n                ...options.tagTypes || []\n            ]\n        };\n        const context = {\n            endpointDefinitions: {},\n            batch (fn) {\n                fn();\n            },\n            apiUid: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.nanoid)(),\n            extractRehydrationInfo,\n            hasRehydrationInfo: (0,reselect__WEBPACK_IMPORTED_MODULE_3__.weakMapMemoize)((action)=>extractRehydrationInfo(action) != null)\n        };\n        const api = {\n            injectEndpoints,\n            enhanceEndpoints ({ addTagTypes, endpoints }) {\n                if (addTagTypes) {\n                    for (const eT of addTagTypes){\n                        if (!optionsWithDefaults.tagTypes.includes(eT)) {\n                            ;\n                            optionsWithDefaults.tagTypes.push(eT);\n                        }\n                    }\n                }\n                if (endpoints) {\n                    for (const [endpointName, partialDefinition] of Object.entries(endpoints)){\n                        if (typeof partialDefinition === \"function\") {\n                            partialDefinition(context.endpointDefinitions[endpointName]);\n                        } else {\n                            Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);\n                        }\n                    }\n                }\n                return api;\n            }\n        };\n        const initializedModules = modules.map((m)=>m.init(api, optionsWithDefaults, context));\n        function injectEndpoints(inject) {\n            const evaluatedEndpoints = inject.endpoints({\n                query: (x)=>({\n                        ...x,\n                        type: \"query\" /* query */ \n                    }),\n                mutation: (x)=>({\n                        ...x,\n                        type: \"mutation\" /* mutation */ \n                    })\n            });\n            for (const [endpointName, definition] of Object.entries(evaluatedEndpoints)){\n                if (!inject.overrideExisting && endpointName in context.endpointDefinitions) {\n                    if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n                        console.error(`called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``);\n                    }\n                    continue;\n                }\n                context.endpointDefinitions[endpointName] = definition;\n                for (const m of initializedModules){\n                    m.injectEndpoint(endpointName, definition);\n                }\n            }\n            return api;\n        }\n        return api.injectEndpoints({\n            endpoints: options.endpoints\n        });\n    };\n}\n// src/query/fakeBaseQuery.ts\n\nfunction fakeBaseQuery() {\n    return function() {\n        throw new Error( false ? 0 : \"When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.\");\n    };\n}\n// src/query/core/buildMiddleware/cacheCollection.ts\nfunction isObjectEmpty(obj) {\n    for(let k in obj){\n        return false;\n    }\n    return true;\n}\nvar THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;\nvar buildCacheCollectionHandler = ({ reducerPath, api, context, internalState })=>{\n    const { removeQueryResult, unsubscribeQueryResult } = api.internalActions;\n    function anySubscriptionsRemainingForKey(queryCacheKey) {\n        const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n        return !!subscriptions && !isObjectEmpty(subscriptions);\n    }\n    const currentRemovalTimeouts = {};\n    const handler = (action, mwApi, internalState2)=>{\n        if (unsubscribeQueryResult.match(action)) {\n            const state = mwApi.getState()[reducerPath];\n            const { queryCacheKey } = action.payload;\n            handleUnsubscribe(queryCacheKey, state.queries[queryCacheKey]?.endpointName, mwApi, state.config);\n        }\n        if (api.util.resetApiState.match(action)) {\n            for (const [key, timeout] of Object.entries(currentRemovalTimeouts)){\n                if (timeout) clearTimeout(timeout);\n                delete currentRemovalTimeouts[key];\n            }\n        }\n        if (context.hasRehydrationInfo(action)) {\n            const state = mwApi.getState()[reducerPath];\n            const { queries } = context.extractRehydrationInfo(action);\n            for (const [queryCacheKey, queryState] of Object.entries(queries)){\n                handleUnsubscribe(queryCacheKey, queryState?.endpointName, mwApi, state.config);\n            }\n        }\n    };\n    function handleUnsubscribe(queryCacheKey, endpointName, api2, config) {\n        const endpointDefinition = context.endpointDefinitions[endpointName];\n        const keepUnusedDataFor = endpointDefinition?.keepUnusedDataFor ?? config.keepUnusedDataFor;\n        if (keepUnusedDataFor === Infinity) {\n            return;\n        }\n        const finalKeepUnusedDataFor = Math.max(0, Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS));\n        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n            const currentTimeout = currentRemovalTimeouts[queryCacheKey];\n            if (currentTimeout) {\n                clearTimeout(currentTimeout);\n            }\n            currentRemovalTimeouts[queryCacheKey] = setTimeout(()=>{\n                if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n                    api2.dispatch(removeQueryResult({\n                        queryCacheKey\n                    }));\n                }\n                delete currentRemovalTimeouts[queryCacheKey];\n            }, finalKeepUnusedDataFor * 1e3);\n        }\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/invalidationByTags.ts\nvar buildInvalidationByTagsHandler = ({ reducerPath, context, context: { endpointDefinitions }, mutationThunk, queryThunk, api, assertTagType, refetchQuery, internalState })=>{\n    const { removeQueryResult } = api.internalActions;\n    const isThunkActionWithTags = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(mutationThunk), (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejectedWithValue)(mutationThunk));\n    const isQueryEnd = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(mutationThunk, queryThunk), (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejected)(mutationThunk, queryThunk));\n    let pendingTagInvalidations = [];\n    const handler = (action, mwApi)=>{\n        if (isThunkActionWithTags(action)) {\n            invalidateTags(calculateProvidedByThunk(action, \"invalidatesTags\", endpointDefinitions, assertTagType), mwApi);\n        } else if (isQueryEnd(action)) {\n            invalidateTags([], mwApi);\n        } else if (api.util.invalidateTags.match(action)) {\n            invalidateTags(calculateProvidedBy(action.payload, void 0, void 0, void 0, void 0, assertTagType), mwApi);\n        }\n    };\n    function hasPendingRequests(state) {\n        for(const key in state.queries){\n            if (state.queries[key]?.status === \"pending\" /* pending */ ) return true;\n        }\n        for(const key in state.mutations){\n            if (state.mutations[key]?.status === \"pending\" /* pending */ ) return true;\n        }\n        return false;\n    }\n    function invalidateTags(newTags, mwApi) {\n        const rootState = mwApi.getState();\n        const state = rootState[reducerPath];\n        pendingTagInvalidations.push(...newTags);\n        if (state.config.invalidationBehavior === \"delayed\" && hasPendingRequests(state)) {\n            return;\n        }\n        const tags = pendingTagInvalidations;\n        pendingTagInvalidations = [];\n        if (tags.length === 0) return;\n        const toInvalidate = api.util.selectInvalidatedBy(rootState, tags);\n        context.batch(()=>{\n            const valuesArray = Array.from(toInvalidate.values());\n            for (const { queryCacheKey } of valuesArray){\n                const querySubState = state.queries[queryCacheKey];\n                const subscriptionSubState = internalState.currentSubscriptions[queryCacheKey] ?? {};\n                if (querySubState) {\n                    if (countObjectKeys(subscriptionSubState) === 0) {\n                        mwApi.dispatch(removeQueryResult({\n                            queryCacheKey\n                        }));\n                    } else if (querySubState.status !== \"uninitialized\" /* uninitialized */ ) {\n                        mwApi.dispatch(refetchQuery(querySubState, queryCacheKey));\n                    }\n                }\n            }\n        });\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/polling.ts\nvar buildPollingHandler = ({ reducerPath, queryThunk, api, refetchQuery, internalState })=>{\n    const currentPolls = {};\n    const handler = (action, mwApi)=>{\n        if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {\n            updatePollingInterval(action.payload, mwApi);\n        }\n        if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {\n            updatePollingInterval(action.meta.arg, mwApi);\n        }\n        if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {\n            startNextPoll(action.meta.arg, mwApi);\n        }\n        if (api.util.resetApiState.match(action)) {\n            clearPolls();\n        }\n    };\n    function startNextPoll({ queryCacheKey }, api2) {\n        const state = api2.getState()[reducerPath];\n        const querySubState = state.queries[queryCacheKey];\n        const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n        if (!querySubState || querySubState.status === \"uninitialized\" /* uninitialized */ ) return;\n        const { lowestPollingInterval, skipPollingIfUnfocused } = findLowestPollingInterval(subscriptions);\n        if (!Number.isFinite(lowestPollingInterval)) return;\n        const currentPoll = currentPolls[queryCacheKey];\n        if (currentPoll?.timeout) {\n            clearTimeout(currentPoll.timeout);\n            currentPoll.timeout = void 0;\n        }\n        const nextPollTimestamp = Date.now() + lowestPollingInterval;\n        currentPolls[queryCacheKey] = {\n            nextPollTimestamp,\n            pollingInterval: lowestPollingInterval,\n            timeout: setTimeout(()=>{\n                if (state.config.focused || !skipPollingIfUnfocused) {\n                    api2.dispatch(refetchQuery(querySubState, queryCacheKey));\n                }\n                startNextPoll({\n                    queryCacheKey\n                }, api2);\n            }, lowestPollingInterval)\n        };\n    }\n    function updatePollingInterval({ queryCacheKey }, api2) {\n        const state = api2.getState()[reducerPath];\n        const querySubState = state.queries[queryCacheKey];\n        const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n        if (!querySubState || querySubState.status === \"uninitialized\" /* uninitialized */ ) {\n            return;\n        }\n        const { lowestPollingInterval } = findLowestPollingInterval(subscriptions);\n        if (!Number.isFinite(lowestPollingInterval)) {\n            cleanupPollForKey(queryCacheKey);\n            return;\n        }\n        const currentPoll = currentPolls[queryCacheKey];\n        const nextPollTimestamp = Date.now() + lowestPollingInterval;\n        if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\n            startNextPoll({\n                queryCacheKey\n            }, api2);\n        }\n    }\n    function cleanupPollForKey(key) {\n        const existingPoll = currentPolls[key];\n        if (existingPoll?.timeout) {\n            clearTimeout(existingPoll.timeout);\n        }\n        delete currentPolls[key];\n    }\n    function clearPolls() {\n        for (const key of Object.keys(currentPolls)){\n            cleanupPollForKey(key);\n        }\n    }\n    function findLowestPollingInterval(subscribers = {}) {\n        let skipPollingIfUnfocused = false;\n        let lowestPollingInterval = Number.POSITIVE_INFINITY;\n        for(let key in subscribers){\n            if (!!subscribers[key].pollingInterval) {\n                lowestPollingInterval = Math.min(subscribers[key].pollingInterval, lowestPollingInterval);\n                skipPollingIfUnfocused = subscribers[key].skipPollingIfUnfocused || skipPollingIfUnfocused;\n            }\n        }\n        return {\n            lowestPollingInterval,\n            skipPollingIfUnfocused\n        };\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/windowEventHandling.ts\nvar buildWindowEventHandler = ({ reducerPath, context, api, refetchQuery, internalState })=>{\n    const { removeQueryResult } = api.internalActions;\n    const handler = (action, mwApi)=>{\n        if (onFocus.match(action)) {\n            refetchValidQueries(mwApi, \"refetchOnFocus\");\n        }\n        if (onOnline.match(action)) {\n            refetchValidQueries(mwApi, \"refetchOnReconnect\");\n        }\n    };\n    function refetchValidQueries(api2, type) {\n        const state = api2.getState()[reducerPath];\n        const queries = state.queries;\n        const subscriptions = internalState.currentSubscriptions;\n        context.batch(()=>{\n            for (const queryCacheKey of Object.keys(subscriptions)){\n                const querySubState = queries[queryCacheKey];\n                const subscriptionSubState = subscriptions[queryCacheKey];\n                if (!subscriptionSubState || !querySubState) continue;\n                const shouldRefetch = Object.values(subscriptionSubState).some((sub)=>sub[type] === true) || Object.values(subscriptionSubState).every((sub)=>sub[type] === void 0) && state.config[type];\n                if (shouldRefetch) {\n                    if (countObjectKeys(subscriptionSubState) === 0) {\n                        api2.dispatch(removeQueryResult({\n                            queryCacheKey\n                        }));\n                    } else if (querySubState.status !== \"uninitialized\" /* uninitialized */ ) {\n                        api2.dispatch(refetchQuery(querySubState, queryCacheKey));\n                    }\n                }\n            }\n        });\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/cacheLifecycle.ts\nvar neverResolvedError = new Error(\"Promise never resolved before cacheEntryRemoved.\");\nvar buildCacheLifecycleHandler = ({ api, reducerPath, context, queryThunk, mutationThunk, internalState })=>{\n    const isQueryThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAsyncThunkAction)(queryThunk);\n    const isMutationThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAsyncThunkAction)(mutationThunk);\n    const isFulfilledThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(queryThunk, mutationThunk);\n    const lifecycleMap = {};\n    const handler = (action, mwApi, stateBefore)=>{\n        const cacheKey = getCacheKey(action);\n        if (queryThunk.pending.match(action)) {\n            const oldState = stateBefore[reducerPath].queries[cacheKey];\n            const state = mwApi.getState()[reducerPath].queries[cacheKey];\n            if (!oldState && state) {\n                handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n            }\n        } else if (mutationThunk.pending.match(action)) {\n            const state = mwApi.getState()[reducerPath].mutations[cacheKey];\n            if (state) {\n                handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n            }\n        } else if (isFulfilledThunk(action)) {\n            const lifecycle = lifecycleMap[cacheKey];\n            if (lifecycle?.valueResolved) {\n                lifecycle.valueResolved({\n                    data: action.payload,\n                    meta: action.meta.baseQueryMeta\n                });\n                delete lifecycle.valueResolved;\n            }\n        } else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {\n            const lifecycle = lifecycleMap[cacheKey];\n            if (lifecycle) {\n                delete lifecycleMap[cacheKey];\n                lifecycle.cacheEntryRemoved();\n            }\n        } else if (api.util.resetApiState.match(action)) {\n            for (const [cacheKey2, lifecycle] of Object.entries(lifecycleMap)){\n                delete lifecycleMap[cacheKey2];\n                lifecycle.cacheEntryRemoved();\n            }\n        }\n    };\n    function getCacheKey(action) {\n        if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;\n        if (isMutationThunk(action)) {\n            return action.meta.arg.fixedCacheKey ?? action.meta.requestId;\n        }\n        if (api.internalActions.removeQueryResult.match(action)) return action.payload.queryCacheKey;\n        if (api.internalActions.removeMutationResult.match(action)) return getMutationCacheKey(action.payload);\n        return \"\";\n    }\n    function handleNewKey(endpointName, originalArgs, queryCacheKey, mwApi, requestId) {\n        const endpointDefinition = context.endpointDefinitions[endpointName];\n        const onCacheEntryAdded = endpointDefinition?.onCacheEntryAdded;\n        if (!onCacheEntryAdded) return;\n        let lifecycle = {};\n        const cacheEntryRemoved = new Promise((resolve)=>{\n            lifecycle.cacheEntryRemoved = resolve;\n        });\n        const cacheDataLoaded = Promise.race([\n            new Promise((resolve)=>{\n                lifecycle.valueResolved = resolve;\n            }),\n            cacheEntryRemoved.then(()=>{\n                throw neverResolvedError;\n            })\n        ]);\n        cacheDataLoaded.catch(()=>{});\n        lifecycleMap[queryCacheKey] = lifecycle;\n        const selector = api.endpoints[endpointName].select(endpointDefinition.type === \"query\" /* query */  ? originalArgs : queryCacheKey);\n        const extra = mwApi.dispatch((_, __, extra2)=>extra2);\n        const lifecycleApi = {\n            ...mwApi,\n            getCacheEntry: ()=>selector(mwApi.getState()),\n            requestId,\n            extra,\n            updateCachedData: endpointDefinition.type === \"query\" /* query */  ? (updateRecipe)=>mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe)) : void 0,\n            cacheDataLoaded,\n            cacheEntryRemoved\n        };\n        const runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);\n        Promise.resolve(runningHandler).catch((e)=>{\n            if (e === neverResolvedError) return;\n            throw e;\n        });\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/queryLifecycle.ts\nvar buildQueryLifecycleHandler = ({ api, context, queryThunk, mutationThunk })=>{\n    const isPendingThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isPending)(queryThunk, mutationThunk);\n    const isRejectedThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejected)(queryThunk, mutationThunk);\n    const isFullfilledThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(queryThunk, mutationThunk);\n    const lifecycleMap = {};\n    const handler = (action, mwApi)=>{\n        if (isPendingThunk(action)) {\n            const { requestId, arg: { endpointName, originalArgs } } = action.meta;\n            const endpointDefinition = context.endpointDefinitions[endpointName];\n            const onQueryStarted = endpointDefinition?.onQueryStarted;\n            if (onQueryStarted) {\n                const lifecycle = {};\n                const queryFulfilled = new Promise((resolve, reject)=>{\n                    lifecycle.resolve = resolve;\n                    lifecycle.reject = reject;\n                });\n                queryFulfilled.catch(()=>{});\n                lifecycleMap[requestId] = lifecycle;\n                const selector = api.endpoints[endpointName].select(endpointDefinition.type === \"query\" /* query */  ? originalArgs : requestId);\n                const extra = mwApi.dispatch((_, __, extra2)=>extra2);\n                const lifecycleApi = {\n                    ...mwApi,\n                    getCacheEntry: ()=>selector(mwApi.getState()),\n                    requestId,\n                    extra,\n                    updateCachedData: endpointDefinition.type === \"query\" /* query */  ? (updateRecipe)=>mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe)) : void 0,\n                    queryFulfilled\n                };\n                onQueryStarted(originalArgs, lifecycleApi);\n            }\n        } else if (isFullfilledThunk(action)) {\n            const { requestId, baseQueryMeta } = action.meta;\n            lifecycleMap[requestId]?.resolve({\n                data: action.payload,\n                meta: baseQueryMeta\n            });\n            delete lifecycleMap[requestId];\n        } else if (isRejectedThunk(action)) {\n            const { requestId, rejectedWithValue, baseQueryMeta } = action.meta;\n            lifecycleMap[requestId]?.reject({\n                error: action.payload ?? action.error,\n                isUnhandledError: !rejectedWithValue,\n                meta: baseQueryMeta\n            });\n            delete lifecycleMap[requestId];\n        }\n    };\n    return handler;\n};\n// src/query/core/buildMiddleware/devMiddleware.ts\nvar buildDevCheckHandler = ({ api, context: { apiUid }, reducerPath })=>{\n    return (action, mwApi)=>{\n        if (api.util.resetApiState.match(action)) {\n            mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n        }\n        if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n            if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && mwApi.getState()[reducerPath]?.config?.middlewareRegistered === \"conflict\") {\n                console.warn(`There is a mismatch between slice and middleware for the reducerPath \"${reducerPath}\".\nYou can only have one api per reducer path, this will lead to crashes in various situations!${reducerPath === \"api\" ? `\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!` : \"\"}`);\n            }\n        }\n    };\n};\n// src/query/core/buildMiddleware/batchActions.ts\n\nvar buildBatchedActionsHandler = ({ api, queryThunk, internalState })=>{\n    const subscriptionsPrefix = `${api.reducerPath}/subscriptions`;\n    let previousSubscriptions = null;\n    let updateSyncTimer = null;\n    const { updateSubscriptionOptions, unsubscribeQueryResult } = api.internalActions;\n    const actuallyMutateSubscriptions = (mutableState, action)=>{\n        if (updateSubscriptionOptions.match(action)) {\n            const { queryCacheKey, requestId, options } = action.payload;\n            if (mutableState?.[queryCacheKey]?.[requestId]) {\n                mutableState[queryCacheKey][requestId] = options;\n            }\n            return true;\n        }\n        if (unsubscribeQueryResult.match(action)) {\n            const { queryCacheKey, requestId } = action.payload;\n            if (mutableState[queryCacheKey]) {\n                delete mutableState[queryCacheKey][requestId];\n            }\n            return true;\n        }\n        if (api.internalActions.removeQueryResult.match(action)) {\n            delete mutableState[action.payload.queryCacheKey];\n            return true;\n        }\n        if (queryThunk.pending.match(action)) {\n            const { meta: { arg, requestId } } = action;\n            const substate = mutableState[arg.queryCacheKey] ??= {};\n            substate[`${requestId}_running`] = {};\n            if (arg.subscribe) {\n                substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};\n            }\n            return true;\n        }\n        let mutated = false;\n        if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action)) {\n            const state = mutableState[action.meta.arg.queryCacheKey] || {};\n            const key = `${action.meta.requestId}_running`;\n            mutated ||= !!state[key];\n            delete state[key];\n        }\n        if (queryThunk.rejected.match(action)) {\n            const { meta: { condition, arg, requestId } } = action;\n            if (condition && arg.subscribe) {\n                const substate = mutableState[arg.queryCacheKey] ??= {};\n                substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};\n                mutated = true;\n            }\n        }\n        return mutated;\n    };\n    const getSubscriptions = ()=>internalState.currentSubscriptions;\n    const getSubscriptionCount = (queryCacheKey)=>{\n        const subscriptions = getSubscriptions();\n        const subscriptionsForQueryArg = subscriptions[queryCacheKey] ?? {};\n        return countObjectKeys(subscriptionsForQueryArg);\n    };\n    const isRequestSubscribed = (queryCacheKey, requestId)=>{\n        const subscriptions = getSubscriptions();\n        return !!subscriptions?.[queryCacheKey]?.[requestId];\n    };\n    const subscriptionSelectors = {\n        getSubscriptions,\n        getSubscriptionCount,\n        isRequestSubscribed\n    };\n    return (action, mwApi)=>{\n        if (!previousSubscriptions) {\n            previousSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n        }\n        if (api.util.resetApiState.match(action)) {\n            previousSubscriptions = internalState.currentSubscriptions = {};\n            updateSyncTimer = null;\n            return [\n                true,\n                false\n            ];\n        }\n        if (api.internalActions.internal_getRTKQSubscriptions.match(action)) {\n            return [\n                false,\n                subscriptionSelectors\n            ];\n        }\n        const didMutate = actuallyMutateSubscriptions(internalState.currentSubscriptions, action);\n        let actionShouldContinue = true;\n        if (didMutate) {\n            if (!updateSyncTimer) {\n                updateSyncTimer = setTimeout(()=>{\n                    const newSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n                    const [, patches] = (0,immer__WEBPACK_IMPORTED_MODULE_2__.produceWithPatches)(previousSubscriptions, ()=>newSubscriptions);\n                    mwApi.next(api.internalActions.subscriptionsUpdated(patches));\n                    previousSubscriptions = newSubscriptions;\n                    updateSyncTimer = null;\n                }, 500);\n            }\n            const isSubscriptionSliceAction = typeof action.type == \"string\" && !!action.type.startsWith(subscriptionsPrefix);\n            const isAdditionalSubscriptionAction = queryThunk.rejected.match(action) && action.meta.condition && !!action.meta.arg.subscribe;\n            actionShouldContinue = !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;\n        }\n        return [\n            actionShouldContinue,\n            false\n        ];\n    };\n};\n// src/query/core/buildMiddleware/index.ts\nfunction buildMiddleware(input) {\n    const { reducerPath, queryThunk, api, context } = input;\n    const { apiUid } = context;\n    const actions = {\n        invalidateTags: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(`${reducerPath}/invalidateTags`)\n    };\n    const isThisApiSliceAction = (action)=>action.type.startsWith(`${reducerPath}/`);\n    const handlerBuilders = [\n        buildDevCheckHandler,\n        buildCacheCollectionHandler,\n        buildInvalidationByTagsHandler,\n        buildPollingHandler,\n        buildCacheLifecycleHandler,\n        buildQueryLifecycleHandler\n    ];\n    const middleware = (mwApi)=>{\n        let initialized2 = false;\n        let internalState = {\n            currentSubscriptions: {}\n        };\n        const builderArgs = {\n            ...input,\n            internalState,\n            refetchQuery,\n            isThisApiSliceAction\n        };\n        const handlers = handlerBuilders.map((build)=>build(builderArgs));\n        const batchedActionsHandler = buildBatchedActionsHandler(builderArgs);\n        const windowEventsHandler = buildWindowEventHandler(builderArgs);\n        return (next)=>{\n            return (action)=>{\n                if (!(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n                    return next(action);\n                }\n                if (!initialized2) {\n                    initialized2 = true;\n                    mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n                }\n                const mwApiWithNext = {\n                    ...mwApi,\n                    next\n                };\n                const stateBefore = mwApi.getState();\n                const [actionShouldContinue, internalProbeResult] = batchedActionsHandler(action, mwApiWithNext, stateBefore);\n                let res;\n                if (actionShouldContinue) {\n                    res = next(action);\n                } else {\n                    res = internalProbeResult;\n                }\n                if (!!mwApi.getState()[reducerPath]) {\n                    windowEventsHandler(action, mwApiWithNext, stateBefore);\n                    if (isThisApiSliceAction(action) || context.hasRehydrationInfo(action)) {\n                        for (let handler of handlers){\n                            handler(action, mwApiWithNext, stateBefore);\n                        }\n                    }\n                }\n                return res;\n            };\n        };\n    };\n    return {\n        middleware,\n        actions\n    };\n    function refetchQuery(querySubState, queryCacheKey, override = {}) {\n        return queryThunk({\n            type: \"query\",\n            endpointName: querySubState.endpointName,\n            originalArgs: querySubState.originalArgs,\n            subscribe: false,\n            forceRefetch: true,\n            queryCacheKey,\n            ...override\n        });\n    }\n}\n// src/query/tsHelpers.ts\nfunction assertCast(v) {}\nfunction safeAssign(target, ...args) {\n    return Object.assign(target, ...args);\n}\n// src/query/core/module.ts\n\nvar coreModuleName = /* @__PURE__ */ Symbol();\nvar coreModule = ({ createSelector: createSelector2 = reselect__WEBPACK_IMPORTED_MODULE_3__.createSelector } = {})=>({\n        name: coreModuleName,\n        init (api, { baseQuery, tagTypes, reducerPath, serializeQueryArgs, keepUnusedDataFor, refetchOnMountOrArgChange, refetchOnFocus, refetchOnReconnect, invalidationBehavior }, context) {\n            (0,immer__WEBPACK_IMPORTED_MODULE_2__.enablePatches)();\n            assertCast(serializeQueryArgs);\n            const assertTagType = (tag)=>{\n                if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n                    if (!tagTypes.includes(tag.type)) {\n                        console.error(`Tag type '${tag.type}' was used, but not specified in \\`tagTypes\\`!`);\n                    }\n                }\n                return tag;\n            };\n            Object.assign(api, {\n                reducerPath,\n                endpoints: {},\n                internalActions: {\n                    onOnline,\n                    onOffline,\n                    onFocus,\n                    onFocusLost\n                },\n                util: {}\n            });\n            const { queryThunk, mutationThunk, patchQueryData, updateQueryData, upsertQueryData, prefetch, buildMatchThunkActions } = buildThunks({\n                baseQuery,\n                reducerPath,\n                context,\n                api,\n                serializeQueryArgs,\n                assertTagType\n            });\n            const { reducer, actions: sliceActions } = buildSlice({\n                context,\n                queryThunk,\n                mutationThunk,\n                reducerPath,\n                assertTagType,\n                config: {\n                    refetchOnFocus,\n                    refetchOnReconnect,\n                    refetchOnMountOrArgChange,\n                    keepUnusedDataFor,\n                    reducerPath,\n                    invalidationBehavior\n                }\n            });\n            safeAssign(api.util, {\n                patchQueryData,\n                updateQueryData,\n                upsertQueryData,\n                prefetch,\n                resetApiState: sliceActions.resetApiState\n            });\n            safeAssign(api.internalActions, sliceActions);\n            const { middleware, actions: middlewareActions } = buildMiddleware({\n                reducerPath,\n                context,\n                queryThunk,\n                mutationThunk,\n                api,\n                assertTagType\n            });\n            safeAssign(api.util, middlewareActions);\n            safeAssign(api, {\n                reducer,\n                middleware\n            });\n            const { buildQuerySelector, buildMutationSelector, selectInvalidatedBy, selectCachedArgsForQuery } = buildSelectors({\n                serializeQueryArgs,\n                reducerPath,\n                createSelector: createSelector2\n            });\n            safeAssign(api.util, {\n                selectInvalidatedBy,\n                selectCachedArgsForQuery\n            });\n            const { buildInitiateQuery, buildInitiateMutation, getRunningMutationThunk, getRunningMutationsThunk, getRunningQueriesThunk, getRunningQueryThunk } = buildInitiate({\n                queryThunk,\n                mutationThunk,\n                api,\n                serializeQueryArgs,\n                context\n            });\n            safeAssign(api.util, {\n                getRunningMutationThunk,\n                getRunningMutationsThunk,\n                getRunningQueryThunk,\n                getRunningQueriesThunk\n            });\n            return {\n                name: coreModuleName,\n                injectEndpoint (endpointName, definition) {\n                    const anyApi = api;\n                    anyApi.endpoints[endpointName] ??= {};\n                    if (isQueryDefinition(definition)) {\n                        safeAssign(anyApi.endpoints[endpointName], {\n                            name: endpointName,\n                            select: buildQuerySelector(endpointName, definition),\n                            initiate: buildInitiateQuery(endpointName, definition)\n                        }, buildMatchThunkActions(queryThunk, endpointName));\n                    } else if (isMutationDefinition(definition)) {\n                        safeAssign(anyApi.endpoints[endpointName], {\n                            name: endpointName,\n                            select: buildMutationSelector(),\n                            initiate: buildInitiateMutation(endpointName)\n                        }, buildMatchThunkActions(mutationThunk, endpointName));\n                    }\n                }\n            };\n        }\n    });\n// src/query/core/index.ts\nvar createApi = /* @__PURE__ */ buildCreateApi(coreModule());\n //# sourceMappingURL=rtk-query.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3F1ZXJ5L3J0ay1xdWVyeS5tb2Rlcm4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2QkFBNkI7QUFDN0IsSUFBSUEsY0FBOEIsYUFBSCxHQUFJLEVBQUNDO0lBQ2xDQSxZQUFZLENBQUMsZ0JBQWdCLEdBQUc7SUFDaENBLFlBQVksQ0FBQyxVQUFVLEdBQUc7SUFDMUJBLFlBQVksQ0FBQyxZQUFZLEdBQUc7SUFDNUJBLFlBQVksQ0FBQyxXQUFXLEdBQUc7SUFDM0IsT0FBT0E7QUFDVCxHQUFHRCxlQUFlLENBQUM7QUFDbkIsU0FBU0Usc0JBQXNCQyxNQUFNO0lBQ25DLE9BQU87UUFDTEE7UUFDQUMsaUJBQWlCRCxXQUFXLGdCQUFnQixpQkFBaUI7UUFDN0RFLFdBQVdGLFdBQVcsVUFBVSxXQUFXO1FBQzNDRyxXQUFXSCxXQUFXLFlBQVksYUFBYTtRQUMvQ0ksU0FBU0osV0FBVyxXQUFXLFlBQVk7SUFDN0M7QUFDRjtBQUVBLG1DQUFtQztBQUNuQyxTQUFTSyxjQUFjQyxHQUFHO0lBQ3hCLE9BQU8sSUFBSUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFQyxJQUFJLENBQUNGO0FBQ3BDO0FBRUEsOEJBQThCO0FBQzlCLElBQUlHLHVCQUF1QixDQUFDSCxNQUFRQSxJQUFJSSxPQUFPLENBQUMsT0FBTztBQUN2RCxJQUFJQyxzQkFBc0IsQ0FBQ0wsTUFBUUEsSUFBSUksT0FBTyxDQUFDLE9BQU87QUFDdEQsU0FBU0UsU0FBU0MsSUFBSSxFQUFFUCxHQUFHO0lBQ3pCLElBQUksQ0FBQ08sTUFBTTtRQUNULE9BQU9QO0lBQ1Q7SUFDQSxJQUFJLENBQUNBLEtBQUs7UUFDUixPQUFPTztJQUNUO0lBQ0EsSUFBSVIsY0FBY0MsTUFBTTtRQUN0QixPQUFPQTtJQUNUO0lBQ0EsTUFBTVEsWUFBWUQsS0FBS0UsUUFBUSxDQUFDLFFBQVEsQ0FBQ1QsSUFBSVUsVUFBVSxDQUFD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Q3hDLE9BQU8sSUFBSXhDLHFCQUFxQmtTLGFBQWE7d0JBQzNDd0gsV0FBV08sT0FBT2xXLFNBQVMsQ0FBQ3ZCLGFBQWEsRUFBRTs0QkFDekNvSSxNQUFNcEk7NEJBQ053QixRQUFRcUs7NEJBQ1I1SCxVQUFVdEUsc0JBQXNCSzt3QkFDbEMsR0FBRzZHLHVCQUF1QjVILGVBQWVlO29CQUMzQztnQkFDRjtZQUNGO1FBQ0Y7SUFDRjtBQUVBLDBCQUEwQjtBQUMxQixJQUFJMFgsWUFBWSxhQUFhLEdBQUczSixlQUFldUo7QUFjN0MsQ0FDRiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90dWItZWNjLy4vbm9kZV9tb2R1bGVzL0ByZWR1eGpzL3Rvb2xraXQvZGlzdC9xdWVyeS9ydGstcXVlcnkubW9kZXJuLm1qcz83NzkzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9xdWVyeS9jb3JlL2FwaVN0YXRlLnRzXG52YXIgUXVlcnlTdGF0dXMgPSAvKiBAX19QVVJFX18gKi8gKChRdWVyeVN0YXR1czIpID0+IHtcbiAgUXVlcnlTdGF0dXMyW1widW5pbml0aWFsaXplZFwiXSA9IFwidW5pbml0aWFsaXplZFwiO1xuICBRdWVyeVN0YXR1czJbXCJwZW5kaW5nXCJdID0gXCJwZW5kaW5nXCI7XG4gIFF1ZXJ5U3RhdHVzMltcImZ1bGZpbGxlZFwiXSA9IFwiZnVsZmlsbGVkXCI7XG4gIFF1ZXJ5U3RhdHVzMltcInJlamVjdGVkXCJdID0gXCJyZWplY3RlZFwiO1xuICByZXR1cm4gUXVlcnlTdGF0dXMyO1xufSkoUXVlcnlTdGF0dXMgfHwge30pO1xuZnVuY3Rpb24gZ2V0UmVxdWVzdFN0YXR1c0ZsYWdzKHN0YXR1cykge1xuICByZXR1cm4ge1xuICAgIHN0YXR1cyxcbiAgICBpc1VuaW5pdGlhbGl6ZWQ6IHN0YXR1cyA9PT0gXCJ1bmluaXRpYWxpemVkXCIgLyogdW5pbml0aWFsaXplZCAqLyxcbiAgICBpc0xvYWRpbmc6IHN0YXR1cyA9PT0gXCJwZW5kaW5nXCIgLyogcGVuZGluZyAqLyxcbiAgICBpc1N1Y2Nlc3M6IHN0YXR1cyA9PT0gXCJmdWxmaWxsZWRcIiAvKiBmdWxmaWxsZWQgKi8sXG4gICAgaXNFcnJvcjogc3RhdHVzID09PSBcInJlamVjdGVkXCIgLyogcmVqZWN0ZWQgKi9cbiAgfTtcbn1cblxuLy8gc3JjL3F1ZXJ5L3V0aWxzL2lzQWJzb2x1dGVVcmwudHNcbmZ1bmN0aW9uIGlzQWJzb2x1dGVVcmwodXJsKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKGAoXnw6KS8vYCkudGVzdCh1cmwpO1xufVxuXG4vLyBzcmMvcXVlcnkvdXRpbHMvam9pblVybHMudHNcbnZhciB3aXRob3V0VHJhaWxpbmdTbGFzaCA9ICh1cmwpID0+IHVybC5yZXBsYWNlKC9cXC8kLywgXCJcIik7XG52YXIgd2l0aG91dExlYWRpbmdTbGFzaCA9ICh1cmwpID0+IHVybC5yZXBsYWNlKC9eXFwvLywgXCJcIik7XG5mdW5jdGlvbiBqb2luVXJscyhiYXNlLCB1cmwpIHtcbiAgaWYgKCFiYXNlKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiBiYXNlO1xuICB9XG4gIGlmIChpc0Fic29sdXRlVXJsKHVybCkpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIGNvbnN0IGRlbGltaXRlciA9IGJhc2UuZW5kc1dpdGgoXCIvXCIpIHx8ICF1cmwuc3RhcnRzV2l0aChcIj9cIikgPyBcIi9cIiA6IFwiXCI7XG4gIGJhc2UgPSB3aXRob3V0VHJhaWxpbmdTbGFzaChiYXNlKTtcbiAgdXJsID0gd2l0aG91dExlYWRpbmdTbGFzaCh1cmwpO1xuICByZXR1cm4gYCR7YmFzZX0ke2RlbGltaXRlcn0ke3VybH1gO1xufVxuXG4vLyBzcmMvcXVlcnkvdXRpbHMvZmxhdHRlbi50c1xudmFyIGZsYXR0ZW4gPSAoYXJyKSA9PiBbXS5jb25jYXQoLi4uYXJyKTtcblxuLy8gc3JjL3F1ZXJ5L3V0aWxzL2lzT25saW5lLnRzXG5mdW5jdGlvbiBpc09ubGluZSgpIHtcbiAgcmV0dXJuIHR5cGVvZiBuYXZpZ2F0b3IgPT09IFwidW5kZWZpbmVkXCIgPyB0cnVlIDogbmF2aWdhdG9yLm9uTGluZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IG5hdmlnYXRvci5vbkxpbmU7XG59XG5cbi8vIHNyYy9xdWVyeS91dGlscy9pc0RvY3VtZW50VmlzaWJsZS50c1xuZnVuY3Rpb24gaXNEb2N1bWVudFZpc2libGUoKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlICE9PSBcImhpZGRlblwiO1xufVxuXG4vLyBzcmMvcXVlcnkvY29yZS9ydGtJbXBvcnRzLnRzXG5pbXBvcnQgeyBjcmVhdGVBY3Rpb24sIGNyZWF0ZVNsaWNlLCBjcmVhdGVTZWxlY3RvciwgY3JlYXRlQXN5bmNUaHVuaywgY29tYmluZVJlZHVjZXJzLCBjcmVhdGVOZXh0U3RhdGUsIGlzQW55T2YsIGlzQWxsT2YsIGlzQWN0aW9uLCBpc1BlbmRpbmcsIGlzUmVqZWN0ZWQsIGlzRnVsZmlsbGVkLCBpc1JlamVjdGVkV2l0aFZhbHVlLCBpc0FzeW5jVGh1bmtBY3Rpb24sIHByZXBhcmVBdXRvQmF0Y2hlZCwgU0hPVUxEX0FVVE9CQVRDSCwgaXNQbGFpbk9iamVjdCwgbmFub2lkIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcblxuLy8gc3JjL3F1ZXJ5L3V0aWxzL2NvcHlXaXRoU3RydWN0dXJhbFNoYXJpbmcudHNcbnZhciBpc1BsYWluT2JqZWN0MiA9IGlzUGxhaW5PYmplY3Q7XG5mdW5jdGlvbiBjb3B5V2l0aFN0cnVjdHVyYWxTaGFyaW5nKG9sZE9iaiwgbmV3T2JqKSB7XG4gIGlmIChvbGRPYmogPT09IG5ld09iaiB8fCAhKGlzUGxhaW5PYmplY3QyKG9sZE9iaikgJiYgaXNQbGFpbk9iamVjdDIobmV3T2JqKSB8fCBBcnJheS5pc0FycmF5KG9sZE9iaikgJiYgQXJyYXkuaXNBcnJheShuZXdPYmopKSkge1xuICAgIHJldHVybiBuZXdPYmo7XG4gIH1cbiAgY29uc3QgbmV3S2V5cyA9IE9iamVjdC5rZXlzKG5ld09iaik7XG4gIGNvbnN0IG9sZEtleXMgPSBPYmplY3Qua2V5cyhvbGRPYmopO1xuICBsZXQgaXNTYW1lT2JqZWN0ID0gbmV3S2V5cy5sZW5ndGggPT09IG9sZEtleXMubGVuZ3RoO1xuICBjb25zdCBtZXJnZU9iaiA9IEFycmF5LmlzQXJyYXkobmV3T2JqKSA/IFtdIDoge307XG4gIGZvciAoY29uc3Qga2V5IG9mIG5ld0tleXMpIHtcbiAgICBtZXJnZU9ialtrZXldID0gY29weVdpdGhTdHJ1Y3R1cmFsU2hhcmluZyhvbGRPYmpba2V5XSwgbmV3T2JqW2tleV0pO1xuICAgIGlmIChpc1NhbWVPYmplY3QpXG4gICAgICBpc1NhbWVPYmplY3QgPSBvbGRPYmpba2V5XSA9PT0gbWVyZ2VPYmpba2V5XTtcbiAgfVxuICByZXR1cm4gaXNTYW1lT2JqZWN0ID8gb2xkT2JqIDogbWVyZ2VPYmo7XG59XG5cbi8vIHNyYy9xdWVyeS9mZXRjaEJhc2VRdWVyeS50c1xudmFyIGRlZmF1bHRGZXRjaEZuID0gKC4uLmFyZ3MpID0+IGZldGNoKC4uLmFyZ3MpO1xudmFyIGRlZmF1bHRWYWxpZGF0ZVN0YXR1cyA9IChyZXNwb25zZSkgPT4gcmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPD0gMjk5O1xudmFyIGRlZmF1bHRJc0pzb25Db250ZW50VHlwZSA9IChoZWFkZXJzKSA9PiAoXG4gIC8qYXBwbGljYXQqL1xuICAvaW9uXFwvKHZuZFxcLmFwaVxcKyk/anNvbi8udGVzdChoZWFkZXJzLmdldChcImNvbnRlbnQtdHlwZVwiKSB8fCBcIlwiKVxuKTtcbmZ1bmN0aW9uIHN0cmlwVW5kZWZpbmVkKG9iaikge1xuICBpZiAoIWlzUGxhaW5PYmplY3Qob2JqKSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgY29uc3QgY29weSA9IHtcbiAgICAuLi5vYmpcbiAgfTtcbiAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoY29weSkpIHtcbiAgICBpZiAodiA9PT0gdm9pZCAwKVxuICAgICAgZGVsZXRlIGNvcHlba107XG4gIH1cbiAgcmV0dXJuIGNvcHk7XG59XG5mdW5jdGlvbiBmZXRjaEJhc2VRdWVyeSh7XG4gIGJhc2VVcmwsXG4gIHByZXBhcmVIZWFkZXJzID0gKHgpID0+IHgsXG4gIGZldGNoRm4gPSBkZWZhdWx0RmV0Y2hGbixcbiAgcGFyYW1zU2VyaWFsaXplcixcbiAgaXNKc29uQ29udGVudFR5cGUgPSBkZWZhdWx0SXNKc29uQ29udGVudFR5cGUsXG4gIGpzb25Db250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vanNvblwiLFxuICBqc29uUmVwbGFjZXIsXG4gIHRpbWVvdXQ6IGRlZmF1bHRUaW1lb3V0LFxuICByZXNwb25zZUhhbmRsZXI6IGdsb2JhbFJlc3BvbnNlSGFuZGxlcixcbiAgdmFsaWRhdGVTdGF0dXM6IGdsb2JhbFZhbGlkYXRlU3RhdHVzLFxuICAuLi5iYXNlRmV0Y2hPcHRpb25zXG59ID0ge30pIHtcbiAgaWYgKHR5cGVvZiBmZXRjaCA9PT0gXCJ1bmRlZmluZWRcIiAmJiBmZXRjaEZuID09PSBkZWZhdWx0RmV0Y2hGbikge1xuICAgIGNvbnNvbGUud2FybihcIldhcm5pbmc6IGBmZXRjaGAgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIHN1cHBseSBhIGN1c3RvbSBgZmV0Y2hGbmAgcHJvcGVydHkgdG8gdXNlIGBmZXRjaEJhc2VRdWVyeWAgb24gU1NSIGVudmlyb25tZW50cy5cIik7XG4gIH1cbiAgcmV0dXJuIGFzeW5jIChhcmcsIGFwaSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNpZ25hbCxcbiAgICAgIGdldFN0YXRlLFxuICAgICAgZXh0cmEsXG4gICAgICBlbmRwb2ludCxcbiAgICAgIGZvcmNlZCxcbiAgICAgIHR5cGVcbiAgICB9ID0gYXBpO1xuICAgIGxldCBtZXRhO1xuICAgIGxldCB7XG4gICAgICB1cmwsXG4gICAgICBoZWFkZXJzID0gbmV3IEhlYWRlcnMoYmFzZUZldGNoT3B0aW9ucy5oZWFkZXJzKSxcbiAgICAgIHBhcmFtcyA9IHZvaWQgMCxcbiAgICAgIHJlc3BvbnNlSGFuZGxlciA9IGdsb2JhbFJlc3BvbnNlSGFuZGxlciA/PyBcImpzb25cIixcbiAgICAgIHZhbGlkYXRlU3RhdHVzID0gZ2xvYmFsVmFsaWRhdGVTdGF0dXMgPz8gZGVmYXVsdFZhbGlkYXRlU3RhdHVzLFxuICAgICAgdGltZW91dCA9IGRlZmF1bHRUaW1lb3V0LFxuICAgICAgLi4ucmVzdFxuICAgIH0gPSB0eXBlb2YgYXJnID09IFwic3RyaW5nXCIgPyB7XG4gICAgICB1cmw6IGFyZ1xuICAgIH0gOiBhcmc7XG4gICAgbGV0IGNvbmZpZyA9IHtcbiAgICAgIC4uLmJhc2VGZXRjaE9wdGlvbnMsXG4gICAgICBzaWduYWwsXG4gICAgICAuLi5yZXN0XG4gICAgfTtcbiAgICBoZWFkZXJzID0gbmV3IEhlYWRlcnMoc3RyaXBVbmRlZmluZWQoaGVhZGVycykpO1xuICAgIGNvbmZpZy5oZWFkZXJzID0gYXdhaXQgcHJlcGFyZUhlYWRlcnMoaGVhZGVycywge1xuICAgICAgZ2V0U3RhdGUsXG4gICAgICBleHRyYSxcbiAgICAgIGVuZHBvaW50LFxuICAgICAgZm9yY2VkLFxuICAgICAgdHlwZVxuICAgIH0pIHx8IGhlYWRlcnM7XG4gICAgY29uc3QgaXNKc29uaWZpYWJsZSA9IChib2R5KSA9PiB0eXBlb2YgYm9keSA9PT0gXCJvYmplY3RcIiAmJiAoaXNQbGFpbk9iamVjdChib2R5KSB8fCBBcnJheS5pc0FycmF5KGJvZHkpIHx8IHR5cGVvZiBib2R5LnRvSlNPTiA9PT0gXCJmdW5jdGlvblwiKTtcbiAgICBpZiAoIWNvbmZpZy5oZWFkZXJzLmhhcyhcImNvbnRlbnQtdHlwZVwiKSAmJiBpc0pzb25pZmlhYmxlKGNvbmZpZy5ib2R5KSkge1xuICAgICAgY29uZmlnLmhlYWRlcnMuc2V0KFwiY29udGVudC10eXBlXCIsIGpzb25Db250ZW50VHlwZSk7XG4gICAgfVxuICAgIGlmIChpc0pzb25pZmlhYmxlKGNvbmZpZy5ib2R5KSAmJiBpc0pzb25Db250ZW50VHlwZShjb25maWcuaGVhZGVycykpIHtcbiAgICAgIGNvbmZpZy5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoY29uZmlnLmJvZHksIGpzb25SZXBsYWNlcik7XG4gICAgfVxuICAgIGlmIChwYXJhbXMpIHtcbiAgICAgIGNvbnN0IGRpdmlkZXIgPSB+dXJsLmluZGV4T2YoXCI/XCIpID8gXCImXCIgOiBcIj9cIjtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gcGFyYW1zU2VyaWFsaXplciA/IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKSA6IG5ldyBVUkxTZWFyY2hQYXJhbXMoc3RyaXBVbmRlZmluZWQocGFyYW1zKSk7XG4gICAgICB1cmwgKz0gZGl2aWRlciArIHF1ZXJ5O1xuICAgIH1cbiAgICB1cmwgPSBqb2luVXJscyhiYXNlVXJsLCB1cmwpO1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIGNvbmZpZyk7XG4gICAgY29uc3QgcmVxdWVzdENsb25lID0gbmV3IFJlcXVlc3QodXJsLCBjb25maWcpO1xuICAgIG1ldGEgPSB7XG4gICAgICByZXF1ZXN0OiByZXF1ZXN0Q2xvbmVcbiAgICB9O1xuICAgIGxldCByZXNwb25zZSwgdGltZWRPdXQgPSBmYWxzZSwgdGltZW91dElkID0gdGltZW91dCAmJiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRpbWVkT3V0ID0gdHJ1ZTtcbiAgICAgIGFwaS5hYm9ydCgpO1xuICAgIH0sIHRpbWVvdXQpO1xuICAgIHRyeSB7XG4gICAgICByZXNwb25zZSA9IGF3YWl0IGZldGNoRm4ocmVxdWVzdCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBzdGF0dXM6IHRpbWVkT3V0ID8gXCJUSU1FT1VUX0VSUk9SXCIgOiBcIkZFVENIX0VSUk9SXCIsXG4gICAgICAgICAgZXJyb3I6IFN0cmluZyhlKVxuICAgICAgICB9LFxuICAgICAgICBtZXRhXG4gICAgICB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAodGltZW91dElkKVxuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2VDbG9uZSA9IHJlc3BvbnNlLmNsb25lKCk7XG4gICAgbWV0YS5yZXNwb25zZSA9IHJlc3BvbnNlQ2xvbmU7XG4gICAgbGV0IHJlc3VsdERhdGE7XG4gICAgbGV0IHJlc3BvbnNlVGV4dCA9IFwiXCI7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBoYW5kbGVSZXNwb25zZUVycm9yO1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBoYW5kbGVSZXNwb25zZShyZXNwb25zZSwgcmVzcG9uc2VIYW5kbGVyKS50aGVuKChyKSA9PiByZXN1bHREYXRhID0gciwgKGUpID0+IGhhbmRsZVJlc3BvbnNlRXJyb3IgPSBlKSxcbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlLWZldGNoL25vZGUtZmV0Y2gvaXNzdWVzLzY2NSNpc3N1ZWNvbW1lbnQtNTM4OTk1MTgyXG4gICAgICAgIC8vIHdlICpoYXZlKiB0byBcInVzZSB1cFwiIGJvdGggc3RyZWFtcyBhdCB0aGUgc2FtZSB0aW1lIG9yIHRoZXkgd2lsbCBzdG9wIHJ1bm5pbmcgaW4gbm9kZS1mZXRjaCBzY2VuYXJpb3NcbiAgICAgICAgcmVzcG9uc2VDbG9uZS50ZXh0KCkudGhlbigocikgPT4gcmVzcG9uc2VUZXh0ID0gciwgKCkgPT4ge1xuICAgICAgICB9KVxuICAgICAgXSk7XG4gICAgICBpZiAoaGFuZGxlUmVzcG9uc2VFcnJvcilcbiAgICAgICAgdGhyb3cgaGFuZGxlUmVzcG9uc2VFcnJvcjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIHN0YXR1czogXCJQQVJTSU5HX0VSUk9SXCIsXG4gICAgICAgICAgb3JpZ2luYWxTdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICBkYXRhOiByZXNwb25zZVRleHQsXG4gICAgICAgICAgZXJyb3I6IFN0cmluZyhlKVxuICAgICAgICB9LFxuICAgICAgICBtZXRhXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdmFsaWRhdGVTdGF0dXMocmVzcG9uc2UsIHJlc3VsdERhdGEpID8ge1xuICAgICAgZGF0YTogcmVzdWx0RGF0YSxcbiAgICAgIG1ldGFcbiAgICB9IDoge1xuICAgICAgZXJyb3I6IHtcbiAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgIGRhdGE6IHJlc3VsdERhdGFcbiAgICAgIH0sXG4gICAgICBtZXRhXG4gICAgfTtcbiAgfTtcbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UsIHJlc3BvbnNlSGFuZGxlcikge1xuICAgIGlmICh0eXBlb2YgcmVzcG9uc2VIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiByZXNwb25zZUhhbmRsZXIocmVzcG9uc2UpO1xuICAgIH1cbiAgICBpZiAocmVzcG9uc2VIYW5kbGVyID09PSBcImNvbnRlbnQtdHlwZVwiKSB7XG4gICAgICByZXNwb25zZUhhbmRsZXIgPSBpc0pzb25Db250ZW50VHlwZShyZXNwb25zZS5oZWFkZXJzKSA/IFwianNvblwiIDogXCJ0ZXh0XCI7XG4gICAgfVxuICAgIGlmIChyZXNwb25zZUhhbmRsZXIgPT09IFwianNvblwiKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgcmV0dXJuIHRleHQubGVuZ3RoID8gSlNPTi5wYXJzZSh0ZXh0KSA6IG51bGw7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gIH1cbn1cblxuLy8gc3JjL3F1ZXJ5L0hhbmRsZWRFcnJvci50c1xudmFyIEhhbmRsZWRFcnJvciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IodmFsdWUsIG1ldGEgPSB2b2lkIDApIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5tZXRhID0gbWV0YTtcbiAgfVxufTtcblxuLy8gc3JjL3F1ZXJ5L3JldHJ5LnRzXG5hc3luYyBmdW5jdGlvbiBkZWZhdWx0QmFja29mZihhdHRlbXB0ID0gMCwgbWF4UmV0cmllcyA9IDUpIHtcbiAgY29uc3QgYXR0ZW1wdHMgPSBNYXRoLm1pbihhdHRlbXB0LCBtYXhSZXRyaWVzKTtcbiAgY29uc3QgdGltZW91dCA9IH5+KChNYXRoLnJhbmRvbSgpICsgMC40KSAqICgzMDAgPDwgYXR0ZW1wdHMpKTtcbiAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQoKHJlcykgPT4gcmVzb2x2ZShyZXMpLCB0aW1lb3V0KSk7XG59XG5mdW5jdGlvbiBmYWlsKGUpIHtcbiAgdGhyb3cgT2JqZWN0LmFzc2lnbihuZXcgSGFuZGxlZEVycm9yKHtcbiAgICBlcnJvcjogZVxuICB9KSwge1xuICAgIHRocm93SW1tZWRpYXRlbHk6IHRydWVcbiAgfSk7XG59XG52YXIgRU1QVFlfT1BUSU9OUyA9IHt9O1xudmFyIHJldHJ5V2l0aEJhY2tvZmYgPSAoYmFzZVF1ZXJ5LCBkZWZhdWx0T3B0aW9ucykgPT4gYXN5bmMgKGFyZ3MsIGFwaSwgZXh0cmFPcHRpb25zKSA9PiB7XG4gIGNvbnN0IHBvc3NpYmxlTWF4UmV0cmllcyA9IFs1LCAoZGVmYXVsdE9wdGlvbnMgfHwgRU1QVFlfT1BUSU9OUykubWF4UmV0cmllcywgKGV4dHJhT3B0aW9ucyB8fCBFTVBUWV9PUFRJT05TKS5tYXhSZXRyaWVzXS5maWx0ZXIoKHgpID0+IHggIT09IHZvaWQgMCk7XG4gIGNvbnN0IFttYXhSZXRyaWVzXSA9IHBvc3NpYmxlTWF4UmV0cmllcy5zbGljZSgtMSk7XG4gIGNvbnN0IGRlZmF1bHRSZXRyeUNvbmRpdGlvbiA9IChfLCBfXywge1xuICAgIGF0dGVtcHRcbiAgfSkgPT4gYXR0ZW1wdCA8PSBtYXhSZXRyaWVzO1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIG1heFJldHJpZXMsXG4gICAgYmFja29mZjogZGVmYXVsdEJhY2tvZmYsXG4gICAgcmV0cnlDb25kaXRpb246IGRlZmF1bHRSZXRyeUNvbmRpdGlvbixcbiAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAuLi5leHRyYU9wdGlvbnNcbiAgfTtcbiAgbGV0IHJldHJ5MiA9IDA7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGJhc2VRdWVyeShhcmdzLCBhcGksIGV4dHJhT3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBIYW5kbGVkRXJyb3IocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0cnkyKys7XG4gICAgICBpZiAoZS50aHJvd0ltbWVkaWF0ZWx5KSB7XG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgSGFuZGxlZEVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGUudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICAgIGlmIChlIGluc3RhbmNlb2YgSGFuZGxlZEVycm9yICYmICFvcHRpb25zLnJldHJ5Q29uZGl0aW9uKGUudmFsdWUuZXJyb3IsIGFyZ3MsIHtcbiAgICAgICAgYXR0ZW1wdDogcmV0cnkyLFxuICAgICAgICBiYXNlUXVlcnlBcGk6IGFwaSxcbiAgICAgICAgZXh0cmFPcHRpb25zXG4gICAgICB9KSkge1xuICAgICAgICByZXR1cm4gZS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IG9wdGlvbnMuYmFja29mZihyZXRyeTIsIG9wdGlvbnMubWF4UmV0cmllcyk7XG4gICAgfVxuICB9XG59O1xudmFyIHJldHJ5ID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24ocmV0cnlXaXRoQmFja29mZiwge1xuICBmYWlsXG59KTtcblxuLy8gc3JjL3F1ZXJ5L2NvcmUvc2V0dXBMaXN0ZW5lcnMudHNcbnZhciBvbkZvY3VzID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZUFjdGlvbihcIl9fcnRrcS9mb2N1c2VkXCIpO1xudmFyIG9uRm9jdXNMb3N0ID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZUFjdGlvbihcIl9fcnRrcS91bmZvY3VzZWRcIik7XG52YXIgb25PbmxpbmUgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlQWN0aW9uKFwiX19ydGtxL29ubGluZVwiKTtcbnZhciBvbk9mZmxpbmUgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlQWN0aW9uKFwiX19ydGtxL29mZmxpbmVcIik7XG52YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzKGRpc3BhdGNoLCBjdXN0b21IYW5kbGVyKSB7XG4gIGZ1bmN0aW9uIGRlZmF1bHRIYW5kbGVyKCkge1xuICAgIGNvbnN0IGhhbmRsZUZvY3VzID0gKCkgPT4gZGlzcGF0Y2gob25Gb2N1cygpKTtcbiAgICBjb25zdCBoYW5kbGVGb2N1c0xvc3QgPSAoKSA9PiBkaXNwYXRjaChvbkZvY3VzTG9zdCgpKTtcbiAgICBjb25zdCBoYW5kbGVPbmxpbmUgPSAoKSA9PiBkaXNwYXRjaChvbk9ubGluZSgpKTtcbiAgICBjb25zdCBoYW5kbGVPZmZsaW5lID0gKCkgPT4gZGlzcGF0Y2gob25PZmZsaW5lKCkpO1xuICAgIGNvbnN0IGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICBpZiAod2luZG93LmRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIpIHtcbiAgICAgICAgaGFuZGxlRm9jdXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZUZvY3VzTG9zdCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKCFpbml0aWFsaXplZCkge1xuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBoYW5kbGVGb2N1cywgZmFsc2UpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLCBoYW5kbGVPbmxpbmUsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIGhhbmRsZU9mZmxpbmUsIGZhbHNlKTtcbiAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgaGFuZGxlRm9jdXMpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgaGFuZGxlT25saW5lKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCBoYW5kbGVPZmZsaW5lKTtcbiAgICAgIGluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgfTtcbiAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gIH1cbiAgcmV0dXJuIGN1c3RvbUhhbmRsZXIgPyBjdXN0b21IYW5kbGVyKGRpc3BhdGNoLCB7XG4gICAgb25Gb2N1cyxcbiAgICBvbkZvY3VzTG9zdCxcbiAgICBvbk9mZmxpbmUsXG4gICAgb25PbmxpbmVcbiAgfSkgOiBkZWZhdWx0SGFuZGxlcigpO1xufVxuXG4vLyBzcmMvcXVlcnkvZW5kcG9pbnREZWZpbml0aW9ucy50c1xuZnVuY3Rpb24gaXNRdWVyeURlZmluaXRpb24oZSkge1xuICByZXR1cm4gZS50eXBlID09PSBcInF1ZXJ5XCIgLyogcXVlcnkgKi87XG59XG5mdW5jdGlvbiBpc011dGF0aW9uRGVmaW5pdGlvbihlKSB7XG4gIHJldHVybiBlLnR5cGUgPT09IFwibXV0YXRpb25cIiAvKiBtdXRhdGlvbiAqLztcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZVByb3ZpZGVkQnkoZGVzY3JpcHRpb24sIHJlc3VsdCwgZXJyb3IsIHF1ZXJ5QXJnLCBtZXRhLCBhc3NlcnRUYWdUeXBlcykge1xuICBpZiAoaXNGdW5jdGlvbihkZXNjcmlwdGlvbikpIHtcbiAgICByZXR1cm4gZGVzY3JpcHRpb24ocmVzdWx0LCBlcnJvciwgcXVlcnlBcmcsIG1ldGEpLm1hcChleHBhbmRUYWdEZXNjcmlwdGlvbikubWFwKGFzc2VydFRhZ1R5cGVzKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShkZXNjcmlwdGlvbikpIHtcbiAgICByZXR1cm4gZGVzY3JpcHRpb24ubWFwKGV4cGFuZFRhZ0Rlc2NyaXB0aW9uKS5tYXAoYXNzZXJ0VGFnVHlwZXMpO1xuICB9XG4gIHJldHVybiBbXTtcbn1cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odCkge1xuICByZXR1cm4gdHlwZW9mIHQgPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGV4cGFuZFRhZ0Rlc2NyaXB0aW9uKGRlc2NyaXB0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgZGVzY3JpcHRpb24gPT09IFwic3RyaW5nXCIgPyB7XG4gICAgdHlwZTogZGVzY3JpcHRpb25cbiAgfSA6IGRlc2NyaXB0aW9uO1xufVxuXG4vLyBzcmMvcXVlcnkvY29yZS9idWlsZEluaXRpYXRlLnRzXG5pbXBvcnQgeyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcblxuLy8gc3JjL3F1ZXJ5L3V0aWxzL2lzTm90TnVsbGlzaC50c1xuZnVuY3Rpb24gaXNOb3ROdWxsaXNoKHYpIHtcbiAgcmV0dXJuIHYgIT0gbnVsbDtcbn1cblxuLy8gc3JjL3F1ZXJ5L3V0aWxzL2NvdW50T2JqZWN0S2V5cy50c1xuZnVuY3Rpb24gY291bnRPYmplY3RLZXlzKG9iaikge1xuICBsZXQgY291bnQgPSAwO1xuICBmb3IgKGNvbnN0IF9rZXkgaW4gb2JqKSB7XG4gICAgY291bnQrKztcbiAgfVxuICByZXR1cm4gY291bnQ7XG59XG5cbi8vIHNyYy90c0hlbHBlcnMudHNcbmZ1bmN0aW9uIGFzU2FmZVByb21pc2UocHJvbWlzZSwgZmFsbGJhY2spIHtcbiAgcmV0dXJuIHByb21pc2UuY2F0Y2goZmFsbGJhY2spO1xufVxuXG4vLyBzcmMvcXVlcnkvY29yZS9idWlsZEluaXRpYXRlLnRzXG52YXIgZm9yY2VRdWVyeUZuU3ltYm9sID0gU3ltYm9sKFwiZm9yY2VRdWVyeUZuXCIpO1xudmFyIGlzVXBzZXJ0UXVlcnkgPSAoYXJnKSA9PiB0eXBlb2YgYXJnW2ZvcmNlUXVlcnlGblN5bWJvbF0gPT09IFwiZnVuY3Rpb25cIjtcbmZ1bmN0aW9uIGJ1aWxkSW5pdGlhdGUoe1xuICBzZXJpYWxpemVRdWVyeUFyZ3MsXG4gIHF1ZXJ5VGh1bmssXG4gIG11dGF0aW9uVGh1bmssXG4gIGFwaSxcbiAgY29udGV4dFxufSkge1xuICBjb25zdCBydW5uaW5nUXVlcmllcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IHJ1bm5pbmdNdXRhdGlvbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCB7XG4gICAgdW5zdWJzY3JpYmVRdWVyeVJlc3VsdCxcbiAgICByZW1vdmVNdXRhdGlvblJlc3VsdCxcbiAgICB1cGRhdGVTdWJzY3JpcHRpb25PcHRpb25zXG4gIH0gPSBhcGkuaW50ZXJuYWxBY3Rpb25zO1xuICByZXR1cm4ge1xuICAgIGJ1aWxkSW5pdGlhdGVRdWVyeSxcbiAgICBidWlsZEluaXRpYXRlTXV0YXRpb24sXG4gICAgZ2V0UnVubmluZ1F1ZXJ5VGh1bmssXG4gICAgZ2V0UnVubmluZ011dGF0aW9uVGh1bmssXG4gICAgZ2V0UnVubmluZ1F1ZXJpZXNUaHVuayxcbiAgICBnZXRSdW5uaW5nTXV0YXRpb25zVGh1bmtcbiAgfTtcbiAgZnVuY3Rpb24gZ2V0UnVubmluZ1F1ZXJ5VGh1bmsoZW5kcG9pbnROYW1lLCBxdWVyeUFyZ3MpIHtcbiAgICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XG4gICAgICBjb25zdCBlbmRwb2ludERlZmluaXRpb24gPSBjb250ZXh0LmVuZHBvaW50RGVmaW5pdGlvbnNbZW5kcG9pbnROYW1lXTtcbiAgICAgIGNvbnN0IHF1ZXJ5Q2FjaGVLZXkgPSBzZXJpYWxpemVRdWVyeUFyZ3Moe1xuICAgICAgICBxdWVyeUFyZ3MsXG4gICAgICAgIGVuZHBvaW50RGVmaW5pdGlvbixcbiAgICAgICAgZW5kcG9pbnROYW1lXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBydW5uaW5nUXVlcmllcy5nZXQoZGlzcGF0Y2gpPy5bcXVlcnlDYWNoZUtleV07XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBnZXRSdW5uaW5nTXV0YXRpb25UaHVuayhfZW5kcG9pbnROYW1lLCBmaXhlZENhY2hlS2V5T3JSZXF1ZXN0SWQpIHtcbiAgICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XG4gICAgICByZXR1cm4gcnVubmluZ011dGF0aW9ucy5nZXQoZGlzcGF0Y2gpPy5bZml4ZWRDYWNoZUtleU9yUmVxdWVzdElkXTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGdldFJ1bm5pbmdRdWVyaWVzVGh1bmsoKSB7XG4gICAgcmV0dXJuIChkaXNwYXRjaCkgPT4gT2JqZWN0LnZhbHVlcyhydW5uaW5nUXVlcmllcy5nZXQoZGlzcGF0Y2gpIHx8IHt9KS5maWx0ZXIoaXNOb3ROdWxsaXNoKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRSdW5uaW5nTXV0YXRpb25zVGh1bmsoKSB7XG4gICAgcmV0dXJuIChkaXNwYXRjaCkgPT4gT2JqZWN0LnZhbHVlcyhydW5uaW5nTXV0YXRpb25zLmdldChkaXNwYXRjaCkgfHwge30pLmZpbHRlcihpc05vdE51bGxpc2gpO1xuICB9XG4gIGZ1bmN0aW9uIG1pZGRsZXdhcmVXYXJuaW5nKGRpc3BhdGNoKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKG1pZGRsZXdhcmVXYXJuaW5nLnRyaWdnZXJlZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgcmV0dXJuZWRWYWx1ZSA9IGRpc3BhdGNoKGFwaS5pbnRlcm5hbEFjdGlvbnMuaW50ZXJuYWxfZ2V0UlRLUVN1YnNjcmlwdGlvbnMoKSk7XG4gICAgICBtaWRkbGV3YXJlV2FybmluZy50cmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgaWYgKHR5cGVvZiByZXR1cm5lZFZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiByZXR1cm5lZFZhbHVlPy50eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBfZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNCkgOiBgV2FybmluZzogTWlkZGxld2FyZSBmb3IgUlRLLVF1ZXJ5IEFQSSBhdCByZWR1Y2VyUGF0aCBcIiR7YXBpLnJlZHVjZXJQYXRofVwiIGhhcyBub3QgYmVlbiBhZGRlZCB0byB0aGUgc3RvcmUuXG5Zb3UgbXVzdCBhZGQgdGhlIG1pZGRsZXdhcmUgZm9yIFJUSy1RdWVyeSB0byBmdW5jdGlvbiBjb3JyZWN0bHkhYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGJ1aWxkSW5pdGlhdGVRdWVyeShlbmRwb2ludE5hbWUsIGVuZHBvaW50RGVmaW5pdGlvbikge1xuICAgIGNvbnN0IHF1ZXJ5QWN0aW9uID0gKGFyZywge1xuICAgICAgc3Vic2NyaWJlID0gdHJ1ZSxcbiAgICAgIGZvcmNlUmVmZXRjaCxcbiAgICAgIHN1YnNjcmlwdGlvbk9wdGlvbnMsXG4gICAgICBbZm9yY2VRdWVyeUZuU3ltYm9sXTogZm9yY2VRdWVyeUZuXG4gICAgfSA9IHt9KSA9PiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG4gICAgICBjb25zdCBxdWVyeUNhY2hlS2V5ID0gc2VyaWFsaXplUXVlcnlBcmdzKHtcbiAgICAgICAgcXVlcnlBcmdzOiBhcmcsXG4gICAgICAgIGVuZHBvaW50RGVmaW5pdGlvbixcbiAgICAgICAgZW5kcG9pbnROYW1lXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHRodW5rID0gcXVlcnlUaHVuayh7XG4gICAgICAgIHR5cGU6IFwicXVlcnlcIixcbiAgICAgICAgc3Vic2NyaWJlLFxuICAgICAgICBmb3JjZVJlZmV0Y2gsXG4gICAgICAgIHN1YnNjcmlwdGlvbk9wdGlvbnMsXG4gICAgICAgIGVuZHBvaW50TmFtZSxcbiAgICAgICAgb3JpZ2luYWxBcmdzOiBhcmcsXG4gICAgICAgIHF1ZXJ5Q2FjaGVLZXksXG4gICAgICAgIFtmb3JjZVF1ZXJ5Rm5TeW1ib2xdOiBmb3JjZVF1ZXJ5Rm5cbiAgICAgIH0pO1xuICAgICAgY29uc3Qgc2VsZWN0b3IgPSBhcGkuZW5kcG9pbnRzW2VuZHBvaW50TmFtZV0uc2VsZWN0KGFyZyk7XG4gICAgICBjb25zdCB0aHVua1Jlc3VsdCA9IGRpc3BhdGNoKHRodW5rKTtcbiAgICAgIGNvbnN0IHN0YXRlQWZ0ZXIgPSBzZWxlY3RvcihnZXRTdGF0ZSgpKTtcbiAgICAgIG1pZGRsZXdhcmVXYXJuaW5nKGRpc3BhdGNoKTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICBhYm9ydFxuICAgICAgfSA9IHRodW5rUmVzdWx0O1xuICAgICAgY29uc3Qgc2tpcHBlZFN5bmNocm9ub3VzbHkgPSBzdGF0ZUFmdGVyLnJlcXVlc3RJZCAhPT0gcmVxdWVzdElkO1xuICAgICAgY29uc3QgcnVubmluZ1F1ZXJ5ID0gcnVubmluZ1F1ZXJpZXMuZ2V0KGRpc3BhdGNoKT8uW3F1ZXJ5Q2FjaGVLZXldO1xuICAgICAgY29uc3Qgc2VsZWN0RnJvbVN0YXRlID0gKCkgPT4gc2VsZWN0b3IoZ2V0U3RhdGUoKSk7XG4gICAgICBjb25zdCBzdGF0ZVByb21pc2UgPSBPYmplY3QuYXNzaWduKGZvcmNlUXVlcnlGbiA/IChcbiAgICAgICAgLy8gYSBxdWVyeSBoYXMgYmVlbiBmb3JjZWQgKHVwc2VydFF1ZXJ5RGF0YSlcbiAgICAgICAgLy8gLT4gd2Ugd2FudCB0byByZXNvbHZlIGl0IG9uY2UgZGF0YSBoYXMgYmVlbiB3cml0dGVuIHdpdGggdGhlIGRhdGEgdGhhdCB3aWxsIGJlIHdyaXR0ZW5cbiAgICAgICAgdGh1bmtSZXN1bHQudGhlbihzZWxlY3RGcm9tU3RhdGUpXG4gICAgICApIDogc2tpcHBlZFN5bmNocm9ub3VzbHkgJiYgIXJ1bm5pbmdRdWVyeSA/IChcbiAgICAgICAgLy8gYSBxdWVyeSBoYXMgYmVlbiBza2lwcGVkIGR1ZSB0byBhIGNvbmRpdGlvbiBhbmQgd2UgZG8gbm90IGhhdmUgYW55IGN1cnJlbnRseSBydW5uaW5nIHF1ZXJ5XG4gICAgICAgIC8vIC0+IHdlIHdhbnQgdG8gcmVzb2x2ZSBpdCBpbW1lZGlhdGVseSB3aXRoIHRoZSBjdXJyZW50IGRhdGFcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHN0YXRlQWZ0ZXIpXG4gICAgICApIDogKFxuICAgICAgICAvLyBxdWVyeSBqdXN0IHN0YXJ0ZWQgb3Igb25lIGlzIGFscmVhZHkgaW4gZmxpZ2h0XG4gICAgICAgIC8vIC0+IHdhaXQgZm9yIHRoZSBydW5uaW5nIHF1ZXJ5LCB0aGVuIHJlc29sdmUgd2l0aCBkYXRhIGZyb20gYWZ0ZXIgdGhhdFxuICAgICAgICBQcm9taXNlLmFsbChbcnVubmluZ1F1ZXJ5LCB0aHVua1Jlc3VsdF0pLnRoZW4oc2VsZWN0RnJvbVN0YXRlKVxuICAgICAgKSwge1xuICAgICAgICBhcmcsXG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgc3Vic2NyaXB0aW9uT3B0aW9ucyxcbiAgICAgICAgcXVlcnlDYWNoZUtleSxcbiAgICAgICAgYWJvcnQsXG4gICAgICAgIGFzeW5jIHVud3JhcCgpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdGF0ZVByb21pc2U7XG4gICAgICAgICAgaWYgKHJlc3VsdC5pc0Vycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVmZXRjaDogKCkgPT4gZGlzcGF0Y2gocXVlcnlBY3Rpb24oYXJnLCB7XG4gICAgICAgICAgc3Vic2NyaWJlOiBmYWxzZSxcbiAgICAgICAgICBmb3JjZVJlZmV0Y2g6IHRydWVcbiAgICAgICAgfSkpLFxuICAgICAgICB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICBpZiAoc3Vic2NyaWJlKVxuICAgICAgICAgICAgZGlzcGF0Y2godW5zdWJzY3JpYmVRdWVyeVJlc3VsdCh7XG4gICAgICAgICAgICAgIHF1ZXJ5Q2FjaGVLZXksXG4gICAgICAgICAgICAgIHJlcXVlc3RJZFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVTdWJzY3JpcHRpb25PcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgICBzdGF0ZVByb21pc2Uuc3Vic2NyaXB0aW9uT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICAgZGlzcGF0Y2godXBkYXRlU3Vic2NyaXB0aW9uT3B0aW9ucyh7XG4gICAgICAgICAgICBlbmRwb2ludE5hbWUsXG4gICAgICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgICAgICBxdWVyeUNhY2hlS2V5LFxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIXJ1bm5pbmdRdWVyeSAmJiAhc2tpcHBlZFN5bmNocm9ub3VzbHkgJiYgIWZvcmNlUXVlcnlGbikge1xuICAgICAgICBjb25zdCBydW5uaW5nID0gcnVubmluZ1F1ZXJpZXMuZ2V0KGRpc3BhdGNoKSB8fCB7fTtcbiAgICAgICAgcnVubmluZ1txdWVyeUNhY2hlS2V5XSA9IHN0YXRlUHJvbWlzZTtcbiAgICAgICAgcnVubmluZ1F1ZXJpZXMuc2V0KGRpc3BhdGNoLCBydW5uaW5nKTtcbiAgICAgICAgc3RhdGVQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGRlbGV0ZSBydW5uaW5nW3F1ZXJ5Q2FjaGVLZXldO1xuICAgICAgICAgIGlmICghY291bnRPYmplY3RLZXlzKHJ1bm5pbmcpKSB7XG4gICAgICAgICAgICBydW5uaW5nUXVlcmllcy5kZWxldGUoZGlzcGF0Y2gpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGVQcm9taXNlO1xuICAgIH07XG4gICAgcmV0dXJuIHF1ZXJ5QWN0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIGJ1aWxkSW5pdGlhdGVNdXRhdGlvbihlbmRwb2ludE5hbWUpIHtcbiAgICByZXR1cm4gKGFyZywge1xuICAgICAgdHJhY2sgPSB0cnVlLFxuICAgICAgZml4ZWRDYWNoZUtleVxuICAgIH0gPSB7fSkgPT4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xuICAgICAgY29uc3QgdGh1bmsgPSBtdXRhdGlvblRodW5rKHtcbiAgICAgICAgdHlwZTogXCJtdXRhdGlvblwiLFxuICAgICAgICBlbmRwb2ludE5hbWUsXG4gICAgICAgIG9yaWdpbmFsQXJnczogYXJnLFxuICAgICAgICB0cmFjayxcbiAgICAgICAgZml4ZWRDYWNoZUtleVxuICAgICAgfSk7XG4gICAgICBjb25zdCB0aHVua1Jlc3VsdCA9IGRpc3BhdGNoKHRodW5rKTtcbiAgICAgIG1pZGRsZXdhcmVXYXJuaW5nKGRpc3BhdGNoKTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICBhYm9ydCxcbiAgICAgICAgdW53cmFwXG4gICAgICB9ID0gdGh1bmtSZXN1bHQ7XG4gICAgICBjb25zdCByZXR1cm5WYWx1ZVByb21pc2UgPSBhc1NhZmVQcm9taXNlKHRodW5rUmVzdWx0LnVud3JhcCgpLnRoZW4oKGRhdGEpID0+ICh7XG4gICAgICAgIGRhdGFcbiAgICAgIH0pKSwgKGVycm9yKSA9PiAoe1xuICAgICAgICBlcnJvclxuICAgICAgfSkpO1xuICAgICAgY29uc3QgcmVzZXQgPSAoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHJlbW92ZU11dGF0aW9uUmVzdWx0KHtcbiAgICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgICAgZml4ZWRDYWNoZUtleVxuICAgICAgICB9KSk7XG4gICAgICB9O1xuICAgICAgY29uc3QgcmV0ID0gT2JqZWN0LmFzc2lnbihyZXR1cm5WYWx1ZVByb21pc2UsIHtcbiAgICAgICAgYXJnOiB0aHVua1Jlc3VsdC5hcmcsXG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgYWJvcnQsXG4gICAgICAgIHVud3JhcCxcbiAgICAgICAgcmVzZXRcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcnVubmluZyA9IHJ1bm5pbmdNdXRhdGlvbnMuZ2V0KGRpc3BhdGNoKSB8fCB7fTtcbiAgICAgIHJ1bm5pbmdNdXRhdGlvbnMuc2V0KGRpc3BhdGNoLCBydW5uaW5nKTtcbiAgICAgIHJ1bm5pbmdbcmVxdWVzdElkXSA9IHJldDtcbiAgICAgIHJldC50aGVuKCgpID0+IHtcbiAgICAgICAgZGVsZXRlIHJ1bm5pbmdbcmVxdWVzdElkXTtcbiAgICAgICAgaWYgKCFjb3VudE9iamVjdEtleXMocnVubmluZykpIHtcbiAgICAgICAgICBydW5uaW5nTXV0YXRpb25zLmRlbGV0ZShkaXNwYXRjaCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGZpeGVkQ2FjaGVLZXkpIHtcbiAgICAgICAgcnVubmluZ1tmaXhlZENhY2hlS2V5XSA9IHJldDtcbiAgICAgICAgcmV0LnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGlmIChydW5uaW5nW2ZpeGVkQ2FjaGVLZXldID09PSByZXQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBydW5uaW5nW2ZpeGVkQ2FjaGVLZXldO1xuICAgICAgICAgICAgaWYgKCFjb3VudE9iamVjdEtleXMocnVubmluZykpIHtcbiAgICAgICAgICAgICAgcnVubmluZ011dGF0aW9ucy5kZWxldGUoZGlzcGF0Y2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH07XG4gIH1cbn1cblxuLy8gc3JjL3F1ZXJ5L2NvcmUvYnVpbGRUaHVua3MudHNcbmltcG9ydCB7IGlzRHJhZnRhYmxlLCBwcm9kdWNlV2l0aFBhdGNoZXMgfSBmcm9tIFwiaW1tZXJcIjtcbmZ1bmN0aW9uIGRlZmF1bHRUcmFuc2Zvcm1SZXNwb25zZShiYXNlUXVlcnlSZXR1cm5WYWx1ZSkge1xuICByZXR1cm4gYmFzZVF1ZXJ5UmV0dXJuVmFsdWU7XG59XG5mdW5jdGlvbiBidWlsZFRodW5rcyh7XG4gIHJlZHVjZXJQYXRoLFxuICBiYXNlUXVlcnksXG4gIGNvbnRleHQ6IHtcbiAgICBlbmRwb2ludERlZmluaXRpb25zXG4gIH0sXG4gIHNlcmlhbGl6ZVF1ZXJ5QXJncyxcbiAgYXBpLFxuICBhc3NlcnRUYWdUeXBlXG59KSB7XG4gIGNvbnN0IHBhdGNoUXVlcnlEYXRhID0gKGVuZHBvaW50TmFtZSwgYXJncywgcGF0Y2hlcywgdXBkYXRlUHJvdmlkZWQpID0+IChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludERlZmluaXRpb24gPSBlbmRwb2ludERlZmluaXRpb25zW2VuZHBvaW50TmFtZV07XG4gICAgY29uc3QgcXVlcnlDYWNoZUtleSA9IHNlcmlhbGl6ZVF1ZXJ5QXJncyh7XG4gICAgICBxdWVyeUFyZ3M6IGFyZ3MsXG4gICAgICBlbmRwb2ludERlZmluaXRpb24sXG4gICAgICBlbmRwb2ludE5hbWVcbiAgICB9KTtcbiAgICBkaXNwYXRjaChhcGkuaW50ZXJuYWxBY3Rpb25zLnF1ZXJ5UmVzdWx0UGF0Y2hlZCh7XG4gICAgICBxdWVyeUNhY2hlS2V5LFxuICAgICAgcGF0Y2hlc1xuICAgIH0pKTtcbiAgICBpZiAoIXVwZGF0ZVByb3ZpZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5ld1ZhbHVlID0gYXBpLmVuZHBvaW50c1tlbmRwb2ludE5hbWVdLnNlbGVjdChhcmdzKShcbiAgICAgIC8vIFdvcmsgYXJvdW5kIFRTIDQuMSBtaXNtYXRjaFxuICAgICAgZ2V0U3RhdGUoKVxuICAgICk7XG4gICAgY29uc3QgcHJvdmlkZWRUYWdzID0gY2FsY3VsYXRlUHJvdmlkZWRCeShlbmRwb2ludERlZmluaXRpb24ucHJvdmlkZXNUYWdzLCBuZXdWYWx1ZS5kYXRhLCB2b2lkIDAsIGFyZ3MsIHt9LCBhc3NlcnRUYWdUeXBlKTtcbiAgICBkaXNwYXRjaChhcGkuaW50ZXJuYWxBY3Rpb25zLnVwZGF0ZVByb3ZpZGVkQnkoe1xuICAgICAgcXVlcnlDYWNoZUtleSxcbiAgICAgIHByb3ZpZGVkVGFnc1xuICAgIH0pKTtcbiAgfTtcbiAgY29uc3QgdXBkYXRlUXVlcnlEYXRhID0gKGVuZHBvaW50TmFtZSwgYXJncywgdXBkYXRlUmVjaXBlLCB1cGRhdGVQcm92aWRlZCA9IHRydWUpID0+IChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludERlZmluaXRpb24gPSBhcGkuZW5kcG9pbnRzW2VuZHBvaW50TmFtZV07XG4gICAgY29uc3QgY3VycmVudFN0YXRlID0gZW5kcG9pbnREZWZpbml0aW9uLnNlbGVjdChhcmdzKShcbiAgICAgIC8vIFdvcmsgYXJvdW5kIFRTIDQuMSBtaXNtYXRjaFxuICAgICAgZ2V0U3RhdGUoKVxuICAgICk7XG4gICAgbGV0IHJldCA9IHtcbiAgICAgIHBhdGNoZXM6IFtdLFxuICAgICAgaW52ZXJzZVBhdGNoZXM6IFtdLFxuICAgICAgdW5kbzogKCkgPT4gZGlzcGF0Y2goYXBpLnV0aWwucGF0Y2hRdWVyeURhdGEoZW5kcG9pbnROYW1lLCBhcmdzLCByZXQuaW52ZXJzZVBhdGNoZXMsIHVwZGF0ZVByb3ZpZGVkKSlcbiAgICB9O1xuICAgIGlmIChjdXJyZW50U3RhdGUuc3RhdHVzID09PSBcInVuaW5pdGlhbGl6ZWRcIiAvKiB1bmluaXRpYWxpemVkICovKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBsZXQgbmV3VmFsdWU7XG4gICAgaWYgKFwiZGF0YVwiIGluIGN1cnJlbnRTdGF0ZSkge1xuICAgICAgaWYgKGlzRHJhZnRhYmxlKGN1cnJlbnRTdGF0ZS5kYXRhKSkge1xuICAgICAgICBjb25zdCBbdmFsdWUsIHBhdGNoZXMsIGludmVyc2VQYXRjaGVzXSA9IHByb2R1Y2VXaXRoUGF0Y2hlcyhjdXJyZW50U3RhdGUuZGF0YSwgdXBkYXRlUmVjaXBlKTtcbiAgICAgICAgcmV0LnBhdGNoZXMucHVzaCguLi5wYXRjaGVzKTtcbiAgICAgICAgcmV0LmludmVyc2VQYXRjaGVzLnB1c2goLi4uaW52ZXJzZVBhdGNoZXMpO1xuICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWUgPSB1cGRhdGVSZWNpcGUoY3VycmVudFN0YXRlLmRhdGEpO1xuICAgICAgICByZXQucGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICBvcDogXCJyZXBsYWNlXCIsXG4gICAgICAgICAgcGF0aDogW10sXG4gICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXQuaW52ZXJzZVBhdGNoZXMucHVzaCh7XG4gICAgICAgICAgb3A6IFwicmVwbGFjZVwiLFxuICAgICAgICAgIHBhdGg6IFtdLFxuICAgICAgICAgIHZhbHVlOiBjdXJyZW50U3RhdGUuZGF0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZGlzcGF0Y2goYXBpLnV0aWwucGF0Y2hRdWVyeURhdGEoZW5kcG9pbnROYW1lLCBhcmdzLCByZXQucGF0Y2hlcywgdXBkYXRlUHJvdmlkZWQpKTtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuICBjb25zdCB1cHNlcnRRdWVyeURhdGEgPSAoZW5kcG9pbnROYW1lLCBhcmdzLCB2YWx1ZSkgPT4gKGRpc3BhdGNoKSA9PiB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFwaS5lbmRwb2ludHNbZW5kcG9pbnROYW1lXS5pbml0aWF0ZShhcmdzLCB7XG4gICAgICBzdWJzY3JpYmU6IGZhbHNlLFxuICAgICAgZm9yY2VSZWZldGNoOiB0cnVlLFxuICAgICAgW2ZvcmNlUXVlcnlGblN5bWJvbF06ICgpID0+ICh7XG4gICAgICAgIGRhdGE6IHZhbHVlXG4gICAgICB9KVxuICAgIH0pKTtcbiAgfTtcbiAgY29uc3QgZXhlY3V0ZUVuZHBvaW50ID0gYXN5bmMgKGFyZywge1xuICAgIHNpZ25hbCxcbiAgICBhYm9ydCxcbiAgICByZWplY3RXaXRoVmFsdWUsXG4gICAgZnVsZmlsbFdpdGhWYWx1ZSxcbiAgICBkaXNwYXRjaCxcbiAgICBnZXRTdGF0ZSxcbiAgICBleHRyYVxuICB9KSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnREZWZpbml0aW9uID0gZW5kcG9pbnREZWZpbml0aW9uc1thcmcuZW5kcG9pbnROYW1lXTtcbiAgICB0cnkge1xuICAgICAgbGV0IHRyYW5zZm9ybVJlc3BvbnNlID0gZGVmYXVsdFRyYW5zZm9ybVJlc3BvbnNlO1xuICAgICAgbGV0IHJlc3VsdDtcbiAgICAgIGNvbnN0IGJhc2VRdWVyeUFwaSA9IHtcbiAgICAgICAgc2lnbmFsLFxuICAgICAgICBhYm9ydCxcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlLFxuICAgICAgICBleHRyYSxcbiAgICAgICAgZW5kcG9pbnQ6IGFyZy5lbmRwb2ludE5hbWUsXG4gICAgICAgIHR5cGU6IGFyZy50eXBlLFxuICAgICAgICBmb3JjZWQ6IGFyZy50eXBlID09PSBcInF1ZXJ5XCIgPyBpc0ZvcmNlZFF1ZXJ5KGFyZywgZ2V0U3RhdGUoKSkgOiB2b2lkIDBcbiAgICAgIH07XG4gICAgICBjb25zdCBmb3JjZVF1ZXJ5Rm4gPSBhcmcudHlwZSA9PT0gXCJxdWVyeVwiID8gYXJnW2ZvcmNlUXVlcnlGblN5bWJvbF0gOiB2b2lkIDA7XG4gICAgICBpZiAoZm9yY2VRdWVyeUZuKSB7XG4gICAgICAgIHJlc3VsdCA9IGZvcmNlUXVlcnlGbigpO1xuICAgICAgfSBlbHNlIGlmIChlbmRwb2ludERlZmluaXRpb24ucXVlcnkpIHtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgYmFzZVF1ZXJ5KGVuZHBvaW50RGVmaW5pdGlvbi5xdWVyeShhcmcub3JpZ2luYWxBcmdzKSwgYmFzZVF1ZXJ5QXBpLCBlbmRwb2ludERlZmluaXRpb24uZXh0cmFPcHRpb25zKTtcbiAgICAgICAgaWYgKGVuZHBvaW50RGVmaW5pdGlvbi50cmFuc2Zvcm1SZXNwb25zZSkge1xuICAgICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlID0gZW5kcG9pbnREZWZpbml0aW9uLnRyYW5zZm9ybVJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBhd2FpdCBlbmRwb2ludERlZmluaXRpb24ucXVlcnlGbihhcmcub3JpZ2luYWxBcmdzLCBiYXNlUXVlcnlBcGksIGVuZHBvaW50RGVmaW5pdGlvbi5leHRyYU9wdGlvbnMsIChhcmcyKSA9PiBiYXNlUXVlcnkoYXJnMiwgYmFzZVF1ZXJ5QXBpLCBlbmRwb2ludERlZmluaXRpb24uZXh0cmFPcHRpb25zKSk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICBjb25zdCB3aGF0ID0gZW5kcG9pbnREZWZpbml0aW9uLnF1ZXJ5ID8gXCJgYmFzZVF1ZXJ5YFwiIDogXCJgcXVlcnlGbmBcIjtcbiAgICAgICAgbGV0IGVycjtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICBlcnIgPSBgJHt3aGF0fSBkaWQgbm90IHJldHVybiBhbnl0aGluZy5gO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICBlcnIgPSBgJHt3aGF0fSBkaWQgbm90IHJldHVybiBhbiBvYmplY3QuYDtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZXJyb3IgJiYgcmVzdWx0LmRhdGEpIHtcbiAgICAgICAgICBlcnIgPSBgJHt3aGF0fSByZXR1cm5lZCBhbiBvYmplY3QgY29udGFpbmluZyBib3RoIFxcYGVycm9yXFxgIGFuZCBcXGByZXN1bHRcXGAuYDtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZXJyb3IgPT09IHZvaWQgMCAmJiByZXN1bHQuZGF0YSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgZXJyID0gYCR7d2hhdH0gcmV0dXJuZWQgYW4gb2JqZWN0IGNvbnRhaW5pbmcgbmVpdGhlciBhIHZhbGlkIFxcYGVycm9yXFxgIGFuZCBcXGByZXN1bHRcXGAuIEF0IGxlYXN0IG9uZSBvZiB0aGVtIHNob3VsZCBub3QgYmUgXFxgdW5kZWZpbmVkXFxgYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhyZXN1bHQpKSB7XG4gICAgICAgICAgICBpZiAoa2V5ICE9PSBcImVycm9yXCIgJiYga2V5ICE9PSBcImRhdGFcIiAmJiBrZXkgIT09IFwibWV0YVwiKSB7XG4gICAgICAgICAgICAgIGVyciA9IGBUaGUgb2JqZWN0IHJldHVybmVkIGJ5ICR7d2hhdH0gaGFzIHRoZSB1bmtub3duIHByb3BlcnR5ICR7a2V5fS5gO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGVuY291bnRlcmVkIGhhbmRsaW5nIHRoZSBlbmRwb2ludCAke2FyZy5lbmRwb2ludE5hbWV9LlxuICAgICAgICAgICAgICAke2Vycn1cbiAgICAgICAgICAgICAgSXQgbmVlZHMgdG8gcmV0dXJuIGFuIG9iamVjdCB3aXRoIGVpdGhlciB0aGUgc2hhcGUgXFxgeyBkYXRhOiA8dmFsdWU+IH1cXGAgb3IgXFxgeyBlcnJvcjogPHZhbHVlPiB9XFxgIHRoYXQgbWF5IGNvbnRhaW4gYW4gb3B0aW9uYWwgXFxgbWV0YVxcYCBwcm9wZXJ0eS5cbiAgICAgICAgICAgICAgT2JqZWN0IHJldHVybmVkIHdhczpgLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LmVycm9yKVxuICAgICAgICB0aHJvdyBuZXcgSGFuZGxlZEVycm9yKHJlc3VsdC5lcnJvciwgcmVzdWx0Lm1ldGEpO1xuICAgICAgcmV0dXJuIGZ1bGZpbGxXaXRoVmFsdWUoYXdhaXQgdHJhbnNmb3JtUmVzcG9uc2UocmVzdWx0LmRhdGEsIHJlc3VsdC5tZXRhLCBhcmcub3JpZ2luYWxBcmdzKSwge1xuICAgICAgICBmdWxmaWxsZWRUaW1lU3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIGJhc2VRdWVyeU1ldGE6IHJlc3VsdC5tZXRhLFxuICAgICAgICBbU0hPVUxEX0FVVE9CQVRDSF06IHRydWVcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsZXQgY2F0Y2hlZEVycm9yID0gZXJyb3I7XG4gICAgICBpZiAoY2F0Y2hlZEVycm9yIGluc3RhbmNlb2YgSGFuZGxlZEVycm9yKSB7XG4gICAgICAgIGxldCB0cmFuc2Zvcm1FcnJvclJlc3BvbnNlID0gZGVmYXVsdFRyYW5zZm9ybVJlc3BvbnNlO1xuICAgICAgICBpZiAoZW5kcG9pbnREZWZpbml0aW9uLnF1ZXJ5ICYmIGVuZHBvaW50RGVmaW5pdGlvbi50cmFuc2Zvcm1FcnJvclJlc3BvbnNlKSB7XG4gICAgICAgICAgdHJhbnNmb3JtRXJyb3JSZXNwb25zZSA9IGVuZHBvaW50RGVmaW5pdGlvbi50cmFuc2Zvcm1FcnJvclJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdFdpdGhWYWx1ZShhd2FpdCB0cmFuc2Zvcm1FcnJvclJlc3BvbnNlKGNhdGNoZWRFcnJvci52YWx1ZSwgY2F0Y2hlZEVycm9yLm1ldGEsIGFyZy5vcmlnaW5hbEFyZ3MpLCB7XG4gICAgICAgICAgICBiYXNlUXVlcnlNZXRhOiBjYXRjaGVkRXJyb3IubWV0YSxcbiAgICAgICAgICAgIFtTSE9VTERfQVVUT0JBVENIXTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY2F0Y2hlZEVycm9yID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBBbiB1bmhhbmRsZWQgZXJyb3Igb2NjdXJyZWQgcHJvY2Vzc2luZyBhIHJlcXVlc3QgZm9yIHRoZSBlbmRwb2ludCBcIiR7YXJnLmVuZHBvaW50TmFtZX1cIi5cbkluIHRoZSBjYXNlIG9mIGFuIHVuaGFuZGxlZCBlcnJvciwgbm8gdGFncyB3aWxsIGJlIFwicHJvdmlkZWRcIiBvciBcImludmFsaWRhdGVkXCIuYCwgY2F0Y2hlZEVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoY2F0Y2hlZEVycm9yKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGNhdGNoZWRFcnJvcjtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGlzRm9yY2VkUXVlcnkoYXJnLCBzdGF0ZSkge1xuICAgIGNvbnN0IHJlcXVlc3RTdGF0ZSA9IHN0YXRlW3JlZHVjZXJQYXRoXT8ucXVlcmllcz8uW2FyZy5xdWVyeUNhY2hlS2V5XTtcbiAgICBjb25zdCBiYXNlRmV0Y2hPbk1vdW50T3JBcmdDaGFuZ2UgPSBzdGF0ZVtyZWR1Y2VyUGF0aF0/LmNvbmZpZy5yZWZldGNoT25Nb3VudE9yQXJnQ2hhbmdlO1xuICAgIGNvbnN0IGZ1bGZpbGxlZFZhbCA9IHJlcXVlc3RTdGF0ZT8uZnVsZmlsbGVkVGltZVN0YW1wO1xuICAgIGNvbnN0IHJlZmV0Y2hWYWwgPSBhcmcuZm9yY2VSZWZldGNoID8/IChhcmcuc3Vic2NyaWJlICYmIGJhc2VGZXRjaE9uTW91bnRPckFyZ0NoYW5nZSk7XG4gICAgaWYgKHJlZmV0Y2hWYWwpIHtcbiAgICAgIHJldHVybiByZWZldGNoVmFsID09PSB0cnVlIHx8IChOdW1iZXIoLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCkpIC0gTnVtYmVyKGZ1bGZpbGxlZFZhbCkpIC8gMWUzID49IHJlZmV0Y2hWYWw7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBxdWVyeVRodW5rID0gY3JlYXRlQXN5bmNUaHVuayhgJHtyZWR1Y2VyUGF0aH0vZXhlY3V0ZVF1ZXJ5YCwgZXhlY3V0ZUVuZHBvaW50LCB7XG4gICAgZ2V0UGVuZGluZ01ldGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFydGVkVGltZVN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICBbU0hPVUxEX0FVVE9CQVRDSF06IHRydWVcbiAgICAgIH07XG4gICAgfSxcbiAgICBjb25kaXRpb24ocXVlcnlUaHVua0FyZ3MsIHtcbiAgICAgIGdldFN0YXRlXG4gICAgfSkge1xuICAgICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgY29uc3QgcmVxdWVzdFN0YXRlID0gc3RhdGVbcmVkdWNlclBhdGhdPy5xdWVyaWVzPy5bcXVlcnlUaHVua0FyZ3MucXVlcnlDYWNoZUtleV07XG4gICAgICBjb25zdCBmdWxmaWxsZWRWYWwgPSByZXF1ZXN0U3RhdGU/LmZ1bGZpbGxlZFRpbWVTdGFtcDtcbiAgICAgIGNvbnN0IGN1cnJlbnRBcmcgPSBxdWVyeVRodW5rQXJncy5vcmlnaW5hbEFyZ3M7XG4gICAgICBjb25zdCBwcmV2aW91c0FyZyA9IHJlcXVlc3RTdGF0ZT8ub3JpZ2luYWxBcmdzO1xuICAgICAgY29uc3QgZW5kcG9pbnREZWZpbml0aW9uID0gZW5kcG9pbnREZWZpbml0aW9uc1txdWVyeVRodW5rQXJncy5lbmRwb2ludE5hbWVdO1xuICAgICAgaWYgKGlzVXBzZXJ0UXVlcnkocXVlcnlUaHVua0FyZ3MpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHJlcXVlc3RTdGF0ZT8uc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNGb3JjZWRRdWVyeShxdWVyeVRodW5rQXJncywgc3RhdGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzUXVlcnlEZWZpbml0aW9uKGVuZHBvaW50RGVmaW5pdGlvbikgJiYgZW5kcG9pbnREZWZpbml0aW9uPy5mb3JjZVJlZmV0Y2g/Lih7XG4gICAgICAgIGN1cnJlbnRBcmcsXG4gICAgICAgIHByZXZpb3VzQXJnLFxuICAgICAgICBlbmRwb2ludFN0YXRlOiByZXF1ZXN0U3RhdGUsXG4gICAgICAgIHN0YXRlXG4gICAgICB9KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdWxmaWxsZWRWYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBkaXNwYXRjaENvbmRpdGlvblJlamVjdGlvbjogdHJ1ZVxuICB9KTtcbiAgY29uc3QgbXV0YXRpb25UaHVuayA9IGNyZWF0ZUFzeW5jVGh1bmsoYCR7cmVkdWNlclBhdGh9L2V4ZWN1dGVNdXRhdGlvbmAsIGV4ZWN1dGVFbmRwb2ludCwge1xuICAgIGdldFBlbmRpbmdNZXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnRlZFRpbWVTdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgW1NIT1VMRF9BVVRPQkFUQ0hdOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhc1RoZUZvcmNlID0gKG9wdGlvbnMpID0+IFwiZm9yY2VcIiBpbiBvcHRpb25zO1xuICBjb25zdCBoYXNNYXhBZ2UgPSAob3B0aW9ucykgPT4gXCJpZk9sZGVyVGhhblwiIGluIG9wdGlvbnM7XG4gIGNvbnN0IHByZWZldGNoID0gKGVuZHBvaW50TmFtZSwgYXJnLCBvcHRpb25zKSA9PiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG4gICAgY29uc3QgZm9yY2UgPSBoYXNUaGVGb3JjZShvcHRpb25zKSAmJiBvcHRpb25zLmZvcmNlO1xuICAgIGNvbnN0IG1heEFnZSA9IGhhc01heEFnZShvcHRpb25zKSAmJiBvcHRpb25zLmlmT2xkZXJUaGFuO1xuICAgIGNvbnN0IHF1ZXJ5QWN0aW9uID0gKGZvcmNlMiA9IHRydWUpID0+IGFwaS5lbmRwb2ludHNbZW5kcG9pbnROYW1lXS5pbml0aWF0ZShhcmcsIHtcbiAgICAgIGZvcmNlUmVmZXRjaDogZm9yY2UyXG4gICAgfSk7XG4gICAgY29uc3QgbGF0ZXN0U3RhdGVWYWx1ZSA9IGFwaS5lbmRwb2ludHNbZW5kcG9pbnROYW1lXS5zZWxlY3QoYXJnKShnZXRTdGF0ZSgpKTtcbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIGRpc3BhdGNoKHF1ZXJ5QWN0aW9uKCkpO1xuICAgIH0gZWxzZSBpZiAobWF4QWdlKSB7XG4gICAgICBjb25zdCBsYXN0RnVsZmlsbGVkVHMgPSBsYXRlc3RTdGF0ZVZhbHVlPy5mdWxmaWxsZWRUaW1lU3RhbXA7XG4gICAgICBpZiAoIWxhc3RGdWxmaWxsZWRUcykge1xuICAgICAgICBkaXNwYXRjaChxdWVyeUFjdGlvbigpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2hvdWxkUmV0cmlnZ2VyID0gKE51bWJlcigvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSkgLSBOdW1iZXIobmV3IERhdGUobGFzdEZ1bGZpbGxlZFRzKSkpIC8gMWUzID49IG1heEFnZTtcbiAgICAgIGlmIChzaG91bGRSZXRyaWdnZXIpIHtcbiAgICAgICAgZGlzcGF0Y2gocXVlcnlBY3Rpb24oKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc3BhdGNoKHF1ZXJ5QWN0aW9uKGZhbHNlKSk7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBtYXRjaGVzRW5kcG9pbnQoZW5kcG9pbnROYW1lKSB7XG4gICAgcmV0dXJuIChhY3Rpb24pID0+IGFjdGlvbj8ubWV0YT8uYXJnPy5lbmRwb2ludE5hbWUgPT09IGVuZHBvaW50TmFtZTtcbiAgfVxuICBmdW5jdGlvbiBidWlsZE1hdGNoVGh1bmtBY3Rpb25zKHRodW5rLCBlbmRwb2ludE5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWF0Y2hQZW5kaW5nOiBpc0FsbE9mKGlzUGVuZGluZyh0aHVuayksIG1hdGNoZXNFbmRwb2ludChlbmRwb2ludE5hbWUpKSxcbiAgICAgIG1hdGNoRnVsZmlsbGVkOiBpc0FsbE9mKGlzRnVsZmlsbGVkKHRodW5rKSwgbWF0Y2hlc0VuZHBvaW50KGVuZHBvaW50TmFtZSkpLFxuICAgICAgbWF0Y2hSZWplY3RlZDogaXNBbGxPZihpc1JlamVjdGVkKHRodW5rKSwgbWF0Y2hlc0VuZHBvaW50KGVuZHBvaW50TmFtZSkpXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHF1ZXJ5VGh1bmssXG4gICAgbXV0YXRpb25UaHVuayxcbiAgICBwcmVmZXRjaCxcbiAgICB1cGRhdGVRdWVyeURhdGEsXG4gICAgdXBzZXJ0UXVlcnlEYXRhLFxuICAgIHBhdGNoUXVlcnlEYXRhLFxuICAgIGJ1aWxkTWF0Y2hUaHVua0FjdGlvbnNcbiAgfTtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZVByb3ZpZGVkQnlUaHVuayhhY3Rpb24sIHR5cGUsIGVuZHBvaW50RGVmaW5pdGlvbnMsIGFzc2VydFRhZ1R5cGUpIHtcbiAgcmV0dXJuIGNhbGN1bGF0ZVByb3ZpZGVkQnkoZW5kcG9pbnREZWZpbml0aW9uc1thY3Rpb24ubWV0YS5hcmcuZW5kcG9pbnROYW1lXVt0eXBlXSwgaXNGdWxmaWxsZWQoYWN0aW9uKSA/IGFjdGlvbi5wYXlsb2FkIDogdm9pZCAwLCBpc1JlamVjdGVkV2l0aFZhbHVlKGFjdGlvbikgPyBhY3Rpb24ucGF5bG9hZCA6IHZvaWQgMCwgYWN0aW9uLm1ldGEuYXJnLm9yaWdpbmFsQXJncywgXCJiYXNlUXVlcnlNZXRhXCIgaW4gYWN0aW9uLm1ldGEgPyBhY3Rpb24ubWV0YS5iYXNlUXVlcnlNZXRhIDogdm9pZCAwLCBhc3NlcnRUYWdUeXBlKTtcbn1cblxuLy8gc3JjL3F1ZXJ5L2NvcmUvYnVpbGRTbGljZS50c1xuaW1wb3J0IHsgaXNEcmFmdCB9IGZyb20gXCJpbW1lclwiO1xuaW1wb3J0IHsgYXBwbHlQYXRjaGVzLCBvcmlnaW5hbCB9IGZyb20gXCJpbW1lclwiO1xuZnVuY3Rpb24gdXBkYXRlUXVlcnlTdWJzdGF0ZUlmRXhpc3RzKHN0YXRlLCBxdWVyeUNhY2hlS2V5LCB1cGRhdGUpIHtcbiAgY29uc3Qgc3Vic3RhdGUgPSBzdGF0ZVtxdWVyeUNhY2hlS2V5XTtcbiAgaWYgKHN1YnN0YXRlKSB7XG4gICAgdXBkYXRlKHN1YnN0YXRlKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0TXV0YXRpb25DYWNoZUtleShpZCkge1xuICByZXR1cm4gKFwiYXJnXCIgaW4gaWQgPyBpZC5hcmcuZml4ZWRDYWNoZUtleSA6IGlkLmZpeGVkQ2FjaGVLZXkpID8/IGlkLnJlcXVlc3RJZDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU11dGF0aW9uU3Vic3RhdGVJZkV4aXN0cyhzdGF0ZSwgaWQsIHVwZGF0ZSkge1xuICBjb25zdCBzdWJzdGF0ZSA9IHN0YXRlW2dldE11dGF0aW9uQ2FjaGVLZXkoaWQpXTtcbiAgaWYgKHN1YnN0YXRlKSB7XG4gICAgdXBkYXRlKHN1YnN0YXRlKTtcbiAgfVxufVxudmFyIGluaXRpYWxTdGF0ZSA9IHt9O1xuZnVuY3Rpb24gYnVpbGRTbGljZSh7XG4gIHJlZHVjZXJQYXRoLFxuICBxdWVyeVRodW5rLFxuICBtdXRhdGlvblRodW5rLFxuICBjb250ZXh0OiB7XG4gICAgZW5kcG9pbnREZWZpbml0aW9uczogZGVmaW5pdGlvbnMsXG4gICAgYXBpVWlkLFxuICAgIGV4dHJhY3RSZWh5ZHJhdGlvbkluZm8sXG4gICAgaGFzUmVoeWRyYXRpb25JbmZvXG4gIH0sXG4gIGFzc2VydFRhZ1R5cGUsXG4gIGNvbmZpZ1xufSkge1xuICBjb25zdCByZXNldEFwaVN0YXRlID0gY3JlYXRlQWN0aW9uKGAke3JlZHVjZXJQYXRofS9yZXNldEFwaVN0YXRlYCk7XG4gIGNvbnN0IHF1ZXJ5U2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gICAgbmFtZTogYCR7cmVkdWNlclBhdGh9L3F1ZXJpZXNgLFxuICAgIGluaXRpYWxTdGF0ZSxcbiAgICByZWR1Y2Vyczoge1xuICAgICAgcmVtb3ZlUXVlcnlSZXN1bHQ6IHtcbiAgICAgICAgcmVkdWNlcihkcmFmdCwge1xuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIHF1ZXJ5Q2FjaGVLZXlcbiAgICAgICAgICB9XG4gICAgICAgIH0pIHtcbiAgICAgICAgICBkZWxldGUgZHJhZnRbcXVlcnlDYWNoZUtleV07XG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcmU6IHByZXBhcmVBdXRvQmF0Y2hlZCgpXG4gICAgICB9LFxuICAgICAgcXVlcnlSZXN1bHRQYXRjaGVkOiB7XG4gICAgICAgIHJlZHVjZXIoZHJhZnQsIHtcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBxdWVyeUNhY2hlS2V5LFxuICAgICAgICAgICAgcGF0Y2hlc1xuICAgICAgICAgIH1cbiAgICAgICAgfSkge1xuICAgICAgICAgIHVwZGF0ZVF1ZXJ5U3Vic3RhdGVJZkV4aXN0cyhkcmFmdCwgcXVlcnlDYWNoZUtleSwgKHN1YnN0YXRlKSA9PiB7XG4gICAgICAgICAgICBzdWJzdGF0ZS5kYXRhID0gYXBwbHlQYXRjaGVzKHN1YnN0YXRlLmRhdGEsIHBhdGNoZXMuY29uY2F0KCkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJlOiBwcmVwYXJlQXV0b0JhdGNoZWQoKVxuICAgICAgfVxuICAgIH0sXG4gICAgZXh0cmFSZWR1Y2VycyhidWlsZGVyKSB7XG4gICAgICBidWlsZGVyLmFkZENhc2UocXVlcnlUaHVuay5wZW5kaW5nLCAoZHJhZnQsIHtcbiAgICAgICAgbWV0YSxcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgIGFyZ1xuICAgICAgICB9XG4gICAgICB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHVwc2VydGluZyA9IGlzVXBzZXJ0UXVlcnkoYXJnKTtcbiAgICAgICAgZHJhZnRbYXJnLnF1ZXJ5Q2FjaGVLZXldID8/PSB7XG4gICAgICAgICAgc3RhdHVzOiBcInVuaW5pdGlhbGl6ZWRcIiAvKiB1bmluaXRpYWxpemVkICovLFxuICAgICAgICAgIGVuZHBvaW50TmFtZTogYXJnLmVuZHBvaW50TmFtZVxuICAgICAgICB9O1xuICAgICAgICB1cGRhdGVRdWVyeVN1YnN0YXRlSWZFeGlzdHMoZHJhZnQsIGFyZy5xdWVyeUNhY2hlS2V5LCAoc3Vic3RhdGUpID0+IHtcbiAgICAgICAgICBzdWJzdGF0ZS5zdGF0dXMgPSBcInBlbmRpbmdcIiAvKiBwZW5kaW5nICovO1xuICAgICAgICAgIHN1YnN0YXRlLnJlcXVlc3RJZCA9IHVwc2VydGluZyAmJiBzdWJzdGF0ZS5yZXF1ZXN0SWQgPyAoXG4gICAgICAgICAgICAvLyBmb3IgYHVwc2VydFF1ZXJ5YCAqKnVwZGF0ZXMqKiwga2VlcCB0aGUgY3VycmVudCBgcmVxdWVzdElkYFxuICAgICAgICAgICAgc3Vic3RhdGUucmVxdWVzdElkXG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIC8vIGZvciBub3JtYWwgcXVlcmllcyBvciBgdXBzZXJ0UXVlcnlgICoqaW5zZXJ0cyoqIGFsd2F5cyB1cGRhdGUgdGhlIGByZXF1ZXN0SWRgXG4gICAgICAgICAgICBtZXRhLnJlcXVlc3RJZFxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGFyZy5vcmlnaW5hbEFyZ3MgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgc3Vic3RhdGUub3JpZ2luYWxBcmdzID0gYXJnLm9yaWdpbmFsQXJncztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3Vic3RhdGUuc3RhcnRlZFRpbWVTdGFtcCA9IG1ldGEuc3RhcnRlZFRpbWVTdGFtcDtcbiAgICAgICAgfSk7XG4gICAgICB9KS5hZGRDYXNlKHF1ZXJ5VGh1bmsuZnVsZmlsbGVkLCAoZHJhZnQsIHtcbiAgICAgICAgbWV0YSxcbiAgICAgICAgcGF5bG9hZFxuICAgICAgfSkgPT4ge1xuICAgICAgICB1cGRhdGVRdWVyeVN1YnN0YXRlSWZFeGlzdHMoZHJhZnQsIG1ldGEuYXJnLnF1ZXJ5Q2FjaGVLZXksIChzdWJzdGF0ZSkgPT4ge1xuICAgICAgICAgIGlmIChzdWJzdGF0ZS5yZXF1ZXN0SWQgIT09IG1ldGEucmVxdWVzdElkICYmICFpc1Vwc2VydFF1ZXJ5KG1ldGEuYXJnKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBtZXJnZVxuICAgICAgICAgIH0gPSBkZWZpbml0aW9uc1ttZXRhLmFyZy5lbmRwb2ludE5hbWVdO1xuICAgICAgICAgIHN1YnN0YXRlLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCIgLyogZnVsZmlsbGVkICovO1xuICAgICAgICAgIGlmIChtZXJnZSkge1xuICAgICAgICAgICAgaWYgKHN1YnN0YXRlLmRhdGEgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgZnVsZmlsbGVkVGltZVN0YW1wLFxuICAgICAgICAgICAgICAgIGFyZyxcbiAgICAgICAgICAgICAgICBiYXNlUXVlcnlNZXRhLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RJZFxuICAgICAgICAgICAgICB9ID0gbWV0YTtcbiAgICAgICAgICAgICAgbGV0IG5ld0RhdGEgPSBjcmVhdGVOZXh0U3RhdGUoc3Vic3RhdGUuZGF0YSwgKGRyYWZ0U3Vic3RhdGVEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lcmdlKGRyYWZ0U3Vic3RhdGVEYXRhLCBwYXlsb2FkLCB7XG4gICAgICAgICAgICAgICAgICBhcmc6IGFyZy5vcmlnaW5hbEFyZ3MsXG4gICAgICAgICAgICAgICAgICBiYXNlUXVlcnlNZXRhLFxuICAgICAgICAgICAgICAgICAgZnVsZmlsbGVkVGltZVN0YW1wLFxuICAgICAgICAgICAgICAgICAgcmVxdWVzdElkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBzdWJzdGF0ZS5kYXRhID0gbmV3RGF0YTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN1YnN0YXRlLmRhdGEgPSBwYXlsb2FkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdWJzdGF0ZS5kYXRhID0gZGVmaW5pdGlvbnNbbWV0YS5hcmcuZW5kcG9pbnROYW1lXS5zdHJ1Y3R1cmFsU2hhcmluZyA/PyB0cnVlID8gY29weVdpdGhTdHJ1Y3R1cmFsU2hhcmluZyhpc0RyYWZ0KHN1YnN0YXRlLmRhdGEpID8gb3JpZ2luYWwoc3Vic3RhdGUuZGF0YSkgOiBzdWJzdGF0ZS5kYXRhLCBwYXlsb2FkKSA6IHBheWxvYWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlbGV0ZSBzdWJzdGF0ZS5lcnJvcjtcbiAgICAgICAgICBzdWJzdGF0ZS5mdWxmaWxsZWRUaW1lU3RhbXAgPSBtZXRhLmZ1bGZpbGxlZFRpbWVTdGFtcDtcbiAgICAgICAgfSk7XG4gICAgICB9KS5hZGRDYXNlKHF1ZXJ5VGh1bmsucmVqZWN0ZWQsIChkcmFmdCwge1xuICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgY29uZGl0aW9uLFxuICAgICAgICAgIGFyZyxcbiAgICAgICAgICByZXF1ZXN0SWRcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIHBheWxvYWRcbiAgICAgIH0pID0+IHtcbiAgICAgICAgdXBkYXRlUXVlcnlTdWJzdGF0ZUlmRXhpc3RzKGRyYWZ0LCBhcmcucXVlcnlDYWNoZUtleSwgKHN1YnN0YXRlKSA9PiB7XG4gICAgICAgICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc3Vic3RhdGUucmVxdWVzdElkICE9PSByZXF1ZXN0SWQpXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHN1YnN0YXRlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIiAvKiByZWplY3RlZCAqLztcbiAgICAgICAgICAgIHN1YnN0YXRlLmVycm9yID0gcGF5bG9hZCA/PyBlcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSkuYWRkTWF0Y2hlcihoYXNSZWh5ZHJhdGlvbkluZm8sIChkcmFmdCwgYWN0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBxdWVyaWVzXG4gICAgICAgIH0gPSBleHRyYWN0UmVoeWRyYXRpb25JbmZvKGFjdGlvbik7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgZW50cnldIG9mIE9iamVjdC5lbnRyaWVzKHF1ZXJpZXMpKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gZG8gbm90IHJlaHlkcmF0ZSBlbnRyaWVzIHRoYXQgd2VyZSBjdXJyZW50bHkgaW4gZmxpZ2h0LlxuICAgICAgICAgICAgZW50cnk/LnN0YXR1cyA9PT0gXCJmdWxmaWxsZWRcIiAvKiBmdWxmaWxsZWQgKi8gfHwgZW50cnk/LnN0YXR1cyA9PT0gXCJyZWplY3RlZFwiIC8qIHJlamVjdGVkICovXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBkcmFmdFtrZXldID0gZW50cnk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBtdXRhdGlvblNsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICAgIG5hbWU6IGAke3JlZHVjZXJQYXRofS9tdXRhdGlvbnNgLFxuICAgIGluaXRpYWxTdGF0ZSxcbiAgICByZWR1Y2Vyczoge1xuICAgICAgcmVtb3ZlTXV0YXRpb25SZXN1bHQ6IHtcbiAgICAgICAgcmVkdWNlcihkcmFmdCwge1xuICAgICAgICAgIHBheWxvYWRcbiAgICAgICAgfSkge1xuICAgICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gZ2V0TXV0YXRpb25DYWNoZUtleShwYXlsb2FkKTtcbiAgICAgICAgICBpZiAoY2FjaGVLZXkgaW4gZHJhZnQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBkcmFmdFtjYWNoZUtleV07XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJlOiBwcmVwYXJlQXV0b0JhdGNoZWQoKVxuICAgICAgfVxuICAgIH0sXG4gICAgZXh0cmFSZWR1Y2VycyhidWlsZGVyKSB7XG4gICAgICBidWlsZGVyLmFkZENhc2UobXV0YXRpb25UaHVuay5wZW5kaW5nLCAoZHJhZnQsIHtcbiAgICAgICAgbWV0YSxcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgICBhcmcsXG4gICAgICAgICAgc3RhcnRlZFRpbWVTdGFtcFxuICAgICAgICB9XG4gICAgICB9KSA9PiB7XG4gICAgICAgIGlmICghYXJnLnRyYWNrKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZHJhZnRbZ2V0TXV0YXRpb25DYWNoZUtleShtZXRhKV0gPSB7XG4gICAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICAgIHN0YXR1czogXCJwZW5kaW5nXCIgLyogcGVuZGluZyAqLyxcbiAgICAgICAgICBlbmRwb2ludE5hbWU6IGFyZy5lbmRwb2ludE5hbWUsXG4gICAgICAgICAgc3RhcnRlZFRpbWVTdGFtcFxuICAgICAgICB9O1xuICAgICAgfSkuYWRkQ2FzZShtdXRhdGlvblRodW5rLmZ1bGZpbGxlZCwgKGRyYWZ0LCB7XG4gICAgICAgIHBheWxvYWQsXG4gICAgICAgIG1ldGFcbiAgICAgIH0pID0+IHtcbiAgICAgICAgaWYgKCFtZXRhLmFyZy50cmFjaylcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIHVwZGF0ZU11dGF0aW9uU3Vic3RhdGVJZkV4aXN0cyhkcmFmdCwgbWV0YSwgKHN1YnN0YXRlKSA9PiB7XG4gICAgICAgICAgaWYgKHN1YnN0YXRlLnJlcXVlc3RJZCAhPT0gbWV0YS5yZXF1ZXN0SWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgc3Vic3RhdGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIiAvKiBmdWxmaWxsZWQgKi87XG4gICAgICAgICAgc3Vic3RhdGUuZGF0YSA9IHBheWxvYWQ7XG4gICAgICAgICAgc3Vic3RhdGUuZnVsZmlsbGVkVGltZVN0YW1wID0gbWV0YS5mdWxmaWxsZWRUaW1lU3RhbXA7XG4gICAgICAgIH0pO1xuICAgICAgfSkuYWRkQ2FzZShtdXRhdGlvblRodW5rLnJlamVjdGVkLCAoZHJhZnQsIHtcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIG1ldGFcbiAgICAgIH0pID0+IHtcbiAgICAgICAgaWYgKCFtZXRhLmFyZy50cmFjaylcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIHVwZGF0ZU11dGF0aW9uU3Vic3RhdGVJZkV4aXN0cyhkcmFmdCwgbWV0YSwgKHN1YnN0YXRlKSA9PiB7XG4gICAgICAgICAgaWYgKHN1YnN0YXRlLnJlcXVlc3RJZCAhPT0gbWV0YS5yZXF1ZXN0SWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgc3Vic3RhdGUuc3RhdHVzID0gXCJyZWplY3RlZFwiIC8qIHJlamVjdGVkICovO1xuICAgICAgICAgIHN1YnN0YXRlLmVycm9yID0gcGF5bG9hZCA/PyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgICB9KS5hZGRNYXRjaGVyKGhhc1JlaHlkcmF0aW9uSW5mbywgKGRyYWZ0LCBhY3Rpb24pID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIG11dGF0aW9uc1xuICAgICAgICB9ID0gZXh0cmFjdFJlaHlkcmF0aW9uSW5mbyhhY3Rpb24pO1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIGVudHJ5XSBvZiBPYmplY3QuZW50cmllcyhtdXRhdGlvbnMpKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gZG8gbm90IHJlaHlkcmF0ZSBlbnRyaWVzIHRoYXQgd2VyZSBjdXJyZW50bHkgaW4gZmxpZ2h0LlxuICAgICAgICAgICAgKGVudHJ5Py5zdGF0dXMgPT09IFwiZnVsZmlsbGVkXCIgLyogZnVsZmlsbGVkICovIHx8IGVudHJ5Py5zdGF0dXMgPT09IFwicmVqZWN0ZWRcIiAvKiByZWplY3RlZCAqLykgJiYgLy8gb25seSByZWh5ZHJhdGUgZW5kcG9pbnRzIHRoYXQgd2VyZSBwZXJzaXN0ZWQgdXNpbmcgYSBgZml4ZWRDYWNoZUtleWBcbiAgICAgICAgICAgIGtleSAhPT0gZW50cnk/LnJlcXVlc3RJZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgZHJhZnRba2V5XSA9IGVudHJ5O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaW52YWxpZGF0aW9uU2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gICAgbmFtZTogYCR7cmVkdWNlclBhdGh9L2ludmFsaWRhdGlvbmAsXG4gICAgaW5pdGlhbFN0YXRlLFxuICAgIHJlZHVjZXJzOiB7XG4gICAgICB1cGRhdGVQcm92aWRlZEJ5OiB7XG4gICAgICAgIHJlZHVjZXIoZHJhZnQsIGFjdGlvbikge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHF1ZXJ5Q2FjaGVLZXksXG4gICAgICAgICAgICBwcm92aWRlZFRhZ3NcbiAgICAgICAgICB9ID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICAgICAgZm9yIChjb25zdCB0YWdUeXBlU3Vic2NyaXB0aW9ucyBvZiBPYmplY3QudmFsdWVzKGRyYWZ0KSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpZFN1YnNjcmlwdGlvbnMgb2YgT2JqZWN0LnZhbHVlcyh0YWdUeXBlU3Vic2NyaXB0aW9ucykpIHtcbiAgICAgICAgICAgICAgY29uc3QgZm91bmRBdCA9IGlkU3Vic2NyaXB0aW9ucy5pbmRleE9mKHF1ZXJ5Q2FjaGVLZXkpO1xuICAgICAgICAgICAgICBpZiAoZm91bmRBdCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZFN1YnNjcmlwdGlvbnMuc3BsaWNlKGZvdW5kQXQsIDEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoY29uc3Qge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGlkXG4gICAgICAgICAgfSBvZiBwcm92aWRlZFRhZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmliZWRRdWVyaWVzID0gKGRyYWZ0W3R5cGVdID8/PSB7fSlbaWQgfHwgXCJfX2ludGVybmFsX3dpdGhvdXRfaWRcIl0gPz89IFtdO1xuICAgICAgICAgICAgY29uc3QgYWxyZWFkeVN1YnNjcmliZWQgPSBzdWJzY3JpYmVkUXVlcmllcy5pbmNsdWRlcyhxdWVyeUNhY2hlS2V5KTtcbiAgICAgICAgICAgIGlmICghYWxyZWFkeVN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgc3Vic2NyaWJlZFF1ZXJpZXMucHVzaChxdWVyeUNhY2hlS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcmU6IHByZXBhcmVBdXRvQmF0Y2hlZCgpXG4gICAgICB9XG4gICAgfSxcbiAgICBleHRyYVJlZHVjZXJzKGJ1aWxkZXIpIHtcbiAgICAgIGJ1aWxkZXIuYWRkQ2FzZShxdWVyeVNsaWNlLmFjdGlvbnMucmVtb3ZlUXVlcnlSZXN1bHQsIChkcmFmdCwge1xuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgcXVlcnlDYWNoZUtleVxuICAgICAgICB9XG4gICAgICB9KSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgdGFnVHlwZVN1YnNjcmlwdGlvbnMgb2YgT2JqZWN0LnZhbHVlcyhkcmFmdCkpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGlkU3Vic2NyaXB0aW9ucyBvZiBPYmplY3QudmFsdWVzKHRhZ1R5cGVTdWJzY3JpcHRpb25zKSkge1xuICAgICAgICAgICAgY29uc3QgZm91bmRBdCA9IGlkU3Vic2NyaXB0aW9ucy5pbmRleE9mKHF1ZXJ5Q2FjaGVLZXkpO1xuICAgICAgICAgICAgaWYgKGZvdW5kQXQgIT09IC0xKSB7XG4gICAgICAgICAgICAgIGlkU3Vic2NyaXB0aW9ucy5zcGxpY2UoZm91bmRBdCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5hZGRNYXRjaGVyKGhhc1JlaHlkcmF0aW9uSW5mbywgKGRyYWZ0LCBhY3Rpb24pID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHByb3ZpZGVkXG4gICAgICAgIH0gPSBleHRyYWN0UmVoeWRyYXRpb25JbmZvKGFjdGlvbik7XG4gICAgICAgIGZvciAoY29uc3QgW3R5cGUsIGluY29taW5nVGFnc10gb2YgT2JqZWN0LmVudHJpZXMocHJvdmlkZWQpKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBbaWQsIGNhY2hlS2V5c10gb2YgT2JqZWN0LmVudHJpZXMoaW5jb21pbmdUYWdzKSkge1xuICAgICAgICAgICAgY29uc3Qgc3Vic2NyaWJlZFF1ZXJpZXMgPSAoZHJhZnRbdHlwZV0gPz89IHt9KVtpZCB8fCBcIl9faW50ZXJuYWxfd2l0aG91dF9pZFwiXSA/Pz0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHF1ZXJ5Q2FjaGVLZXkgb2YgY2FjaGVLZXlzKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGFscmVhZHlTdWJzY3JpYmVkID0gc3Vic2NyaWJlZFF1ZXJpZXMuaW5jbHVkZXMocXVlcnlDYWNoZUtleSk7XG4gICAgICAgICAgICAgIGlmICghYWxyZWFkeVN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVkUXVlcmllcy5wdXNoKHF1ZXJ5Q2FjaGVLZXkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5hZGRNYXRjaGVyKGlzQW55T2YoaXNGdWxmaWxsZWQocXVlcnlUaHVuayksIGlzUmVqZWN0ZWRXaXRoVmFsdWUocXVlcnlUaHVuaykpLCAoZHJhZnQsIGFjdGlvbikgPT4ge1xuICAgICAgICBjb25zdCBwcm92aWRlZFRhZ3MgPSBjYWxjdWxhdGVQcm92aWRlZEJ5VGh1bmsoYWN0aW9uLCBcInByb3ZpZGVzVGFnc1wiLCBkZWZpbml0aW9ucywgYXNzZXJ0VGFnVHlwZSk7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBxdWVyeUNhY2hlS2V5XG4gICAgICAgIH0gPSBhY3Rpb24ubWV0YS5hcmc7XG4gICAgICAgIGludmFsaWRhdGlvblNsaWNlLmNhc2VSZWR1Y2Vycy51cGRhdGVQcm92aWRlZEJ5KGRyYWZ0LCBpbnZhbGlkYXRpb25TbGljZS5hY3Rpb25zLnVwZGF0ZVByb3ZpZGVkQnkoe1xuICAgICAgICAgIHF1ZXJ5Q2FjaGVLZXksXG4gICAgICAgICAgcHJvdmlkZWRUYWdzXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHN1YnNjcmlwdGlvblNsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICAgIG5hbWU6IGAke3JlZHVjZXJQYXRofS9zdWJzY3JpcHRpb25zYCxcbiAgICBpbml0aWFsU3RhdGUsXG4gICAgcmVkdWNlcnM6IHtcbiAgICAgIHVwZGF0ZVN1YnNjcmlwdGlvbk9wdGlvbnMoZCwgYSkge1xuICAgICAgfSxcbiAgICAgIHVuc3Vic2NyaWJlUXVlcnlSZXN1bHQoZCwgYSkge1xuICAgICAgfSxcbiAgICAgIGludGVybmFsX2dldFJUS1FTdWJzY3JpcHRpb25zKCkge1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGludGVybmFsU3Vic2NyaXB0aW9uc1NsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICAgIG5hbWU6IGAke3JlZHVjZXJQYXRofS9pbnRlcm5hbFN1YnNjcmlwdGlvbnNgLFxuICAgIGluaXRpYWxTdGF0ZSxcbiAgICByZWR1Y2Vyczoge1xuICAgICAgc3Vic2NyaXB0aW9uc1VwZGF0ZWQ6IHtcbiAgICAgICAgcmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGFwcGx5UGF0Y2hlcyhzdGF0ZSwgYWN0aW9uLnBheWxvYWQpO1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJlOiBwcmVwYXJlQXV0b0JhdGNoZWQoKVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGNvbmZpZ1NsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICAgIG5hbWU6IGAke3JlZHVjZXJQYXRofS9jb25maWdgLFxuICAgIGluaXRpYWxTdGF0ZToge1xuICAgICAgb25saW5lOiBpc09ubGluZSgpLFxuICAgICAgZm9jdXNlZDogaXNEb2N1bWVudFZpc2libGUoKSxcbiAgICAgIG1pZGRsZXdhcmVSZWdpc3RlcmVkOiBmYWxzZSxcbiAgICAgIC4uLmNvbmZpZ1xuICAgIH0sXG4gICAgcmVkdWNlcnM6IHtcbiAgICAgIG1pZGRsZXdhcmVSZWdpc3RlcmVkKHN0YXRlLCB7XG4gICAgICAgIHBheWxvYWRcbiAgICAgIH0pIHtcbiAgICAgICAgc3RhdGUubWlkZGxld2FyZVJlZ2lzdGVyZWQgPSBzdGF0ZS5taWRkbGV3YXJlUmVnaXN0ZXJlZCA9PT0gXCJjb25mbGljdFwiIHx8IGFwaVVpZCAhPT0gcGF5bG9hZCA/IFwiY29uZmxpY3RcIiA6IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBleHRyYVJlZHVjZXJzOiAoYnVpbGRlcikgPT4ge1xuICAgICAgYnVpbGRlci5hZGRDYXNlKG9uT25saW5lLCAoc3RhdGUpID0+IHtcbiAgICAgICAgc3RhdGUub25saW5lID0gdHJ1ZTtcbiAgICAgIH0pLmFkZENhc2Uob25PZmZsaW5lLCAoc3RhdGUpID0+IHtcbiAgICAgICAgc3RhdGUub25saW5lID0gZmFsc2U7XG4gICAgICB9KS5hZGRDYXNlKG9uRm9jdXMsIChzdGF0ZSkgPT4ge1xuICAgICAgICBzdGF0ZS5mb2N1c2VkID0gdHJ1ZTtcbiAgICAgIH0pLmFkZENhc2Uob25Gb2N1c0xvc3QsIChzdGF0ZSkgPT4ge1xuICAgICAgICBzdGF0ZS5mb2N1c2VkID0gZmFsc2U7XG4gICAgICB9KS5hZGRNYXRjaGVyKGhhc1JlaHlkcmF0aW9uSW5mbywgKGRyYWZ0KSA9PiAoe1xuICAgICAgICAuLi5kcmFmdFxuICAgICAgfSkpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGNvbWJpbmVkUmVkdWNlciA9IGNvbWJpbmVSZWR1Y2Vycyh7XG4gICAgcXVlcmllczogcXVlcnlTbGljZS5yZWR1Y2VyLFxuICAgIG11dGF0aW9uczogbXV0YXRpb25TbGljZS5yZWR1Y2VyLFxuICAgIHByb3ZpZGVkOiBpbnZhbGlkYXRpb25TbGljZS5yZWR1Y2VyLFxuICAgIHN1YnNjcmlwdGlvbnM6IGludGVybmFsU3Vic2NyaXB0aW9uc1NsaWNlLnJlZHVjZXIsXG4gICAgY29uZmlnOiBjb25maWdTbGljZS5yZWR1Y2VyXG4gIH0pO1xuICBjb25zdCByZWR1Y2VyID0gKHN0YXRlLCBhY3Rpb24pID0+IGNvbWJpbmVkUmVkdWNlcihyZXNldEFwaVN0YXRlLm1hdGNoKGFjdGlvbikgPyB2b2lkIDAgOiBzdGF0ZSwgYWN0aW9uKTtcbiAgY29uc3QgYWN0aW9ucyA9IHtcbiAgICAuLi5jb25maWdTbGljZS5hY3Rpb25zLFxuICAgIC4uLnF1ZXJ5U2xpY2UuYWN0aW9ucyxcbiAgICAuLi5zdWJzY3JpcHRpb25TbGljZS5hY3Rpb25zLFxuICAgIC4uLmludGVybmFsU3Vic2NyaXB0aW9uc1NsaWNlLmFjdGlvbnMsXG4gICAgLi4ubXV0YXRpb25TbGljZS5hY3Rpb25zLFxuICAgIC4uLmludmFsaWRhdGlvblNsaWNlLmFjdGlvbnMsXG4gICAgcmVzZXRBcGlTdGF0ZVxuICB9O1xuICByZXR1cm4ge1xuICAgIHJlZHVjZXIsXG4gICAgYWN0aW9uc1xuICB9O1xufVxuXG4vLyBzcmMvcXVlcnkvY29yZS9idWlsZFNlbGVjdG9ycy50c1xudmFyIHNraXBUb2tlbiA9IC8qIEBfX1BVUkVfXyAqLyBTeW1ib2wuZm9yKFwiUlRLUS9za2lwVG9rZW5cIik7XG52YXIgaW5pdGlhbFN1YlN0YXRlID0ge1xuICBzdGF0dXM6IFwidW5pbml0aWFsaXplZFwiIC8qIHVuaW5pdGlhbGl6ZWQgKi9cbn07XG52YXIgZGVmYXVsdFF1ZXJ5U3ViU3RhdGUgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlTmV4dFN0YXRlKGluaXRpYWxTdWJTdGF0ZSwgKCkgPT4ge1xufSk7XG52YXIgZGVmYXVsdE11dGF0aW9uU3ViU3RhdGUgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlTmV4dFN0YXRlKGluaXRpYWxTdWJTdGF0ZSwgKCkgPT4ge1xufSk7XG5mdW5jdGlvbiBidWlsZFNlbGVjdG9ycyh7XG4gIHNlcmlhbGl6ZVF1ZXJ5QXJncyxcbiAgcmVkdWNlclBhdGgsXG4gIGNyZWF0ZVNlbGVjdG9yOiBjcmVhdGVTZWxlY3RvcjJcbn0pIHtcbiAgY29uc3Qgc2VsZWN0U2tpcHBlZFF1ZXJ5ID0gKHN0YXRlKSA9PiBkZWZhdWx0UXVlcnlTdWJTdGF0ZTtcbiAgY29uc3Qgc2VsZWN0U2tpcHBlZE11dGF0aW9uID0gKHN0YXRlKSA9PiBkZWZhdWx0TXV0YXRpb25TdWJTdGF0ZTtcbiAgcmV0dXJuIHtcbiAgICBidWlsZFF1ZXJ5U2VsZWN0b3IsXG4gICAgYnVpbGRNdXRhdGlvblNlbGVjdG9yLFxuICAgIHNlbGVjdEludmFsaWRhdGVkQnksXG4gICAgc2VsZWN0Q2FjaGVkQXJnc0ZvclF1ZXJ5XG4gIH07XG4gIGZ1bmN0aW9uIHdpdGhSZXF1ZXN0RmxhZ3Moc3Vic3RhdGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uc3Vic3RhdGUsXG4gICAgICAuLi5nZXRSZXF1ZXN0U3RhdHVzRmxhZ3Moc3Vic3RhdGUuc3RhdHVzKVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gc2VsZWN0SW50ZXJuYWxTdGF0ZShyb290U3RhdGUpIHtcbiAgICBjb25zdCBzdGF0ZSA9IHJvb3RTdGF0ZVtyZWR1Y2VyUGF0aF07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICBpZiAoc2VsZWN0SW50ZXJuYWxTdGF0ZS50cmlnZ2VyZWQpXG4gICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICBzZWxlY3RJbnRlcm5hbFN0YXRlLnRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yOiBObyBkYXRhIGZvdW5kIGF0IFxcYHN0YXRlLiR7cmVkdWNlclBhdGh9XFxgLiBEaWQgeW91IGZvcmdldCB0byBhZGQgdGhlIHJlZHVjZXIgdG8gdGhlIHN0b3JlP2ApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cbiAgZnVuY3Rpb24gYnVpbGRRdWVyeVNlbGVjdG9yKGVuZHBvaW50TmFtZSwgZW5kcG9pbnREZWZpbml0aW9uKSB7XG4gICAgcmV0dXJuIChxdWVyeUFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHNlcmlhbGl6ZWRBcmdzID0gc2VyaWFsaXplUXVlcnlBcmdzKHtcbiAgICAgICAgcXVlcnlBcmdzLFxuICAgICAgICBlbmRwb2ludERlZmluaXRpb24sXG4gICAgICAgIGVuZHBvaW50TmFtZVxuICAgICAgfSk7XG4gICAgICBjb25zdCBzZWxlY3RRdWVyeVN1YnN0YXRlID0gKHN0YXRlKSA9PiBzZWxlY3RJbnRlcm5hbFN0YXRlKHN0YXRlKT8ucXVlcmllcz8uW3NlcmlhbGl6ZWRBcmdzXSA/PyBkZWZhdWx0UXVlcnlTdWJTdGF0ZTtcbiAgICAgIGNvbnN0IGZpbmFsU2VsZWN0UXVlcnlTdWJTdGF0ZSA9IHF1ZXJ5QXJncyA9PT0gc2tpcFRva2VuID8gc2VsZWN0U2tpcHBlZFF1ZXJ5IDogc2VsZWN0UXVlcnlTdWJzdGF0ZTtcbiAgICAgIHJldHVybiBjcmVhdGVTZWxlY3RvcjIoZmluYWxTZWxlY3RRdWVyeVN1YlN0YXRlLCB3aXRoUmVxdWVzdEZsYWdzKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGJ1aWxkTXV0YXRpb25TZWxlY3RvcigpIHtcbiAgICByZXR1cm4gKGlkKSA9PiB7XG4gICAgICBsZXQgbXV0YXRpb25JZDtcbiAgICAgIGlmICh0eXBlb2YgaWQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgbXV0YXRpb25JZCA9IGdldE11dGF0aW9uQ2FjaGVLZXkoaWQpID8/IHNraXBUb2tlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11dGF0aW9uSWQgPSBpZDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNlbGVjdE11dGF0aW9uU3Vic3RhdGUgPSAoc3RhdGUpID0+IHNlbGVjdEludGVybmFsU3RhdGUoc3RhdGUpPy5tdXRhdGlvbnM/LlttdXRhdGlvbklkXSA/PyBkZWZhdWx0TXV0YXRpb25TdWJTdGF0ZTtcbiAgICAgIGNvbnN0IGZpbmFsU2VsZWN0TXV0YXRpb25TdWJzdGF0ZSA9IG11dGF0aW9uSWQgPT09IHNraXBUb2tlbiA/IHNlbGVjdFNraXBwZWRNdXRhdGlvbiA6IHNlbGVjdE11dGF0aW9uU3Vic3RhdGU7XG4gICAgICByZXR1cm4gY3JlYXRlU2VsZWN0b3IyKGZpbmFsU2VsZWN0TXV0YXRpb25TdWJzdGF0ZSwgd2l0aFJlcXVlc3RGbGFncyk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBzZWxlY3RJbnZhbGlkYXRlZEJ5KHN0YXRlLCB0YWdzKSB7XG4gICAgY29uc3QgYXBpU3RhdGUgPSBzdGF0ZVtyZWR1Y2VyUGF0aF07XG4gICAgY29uc3QgdG9JbnZhbGlkYXRlID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IHRhZyBvZiB0YWdzLm1hcChleHBhbmRUYWdEZXNjcmlwdGlvbikpIHtcbiAgICAgIGNvbnN0IHByb3ZpZGVkID0gYXBpU3RhdGUucHJvdmlkZWRbdGFnLnR5cGVdO1xuICAgICAgaWYgKCFwcm92aWRlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGxldCBpbnZhbGlkYXRlU3Vic2NyaXB0aW9ucyA9ICh0YWcuaWQgIT09IHZvaWQgMCA/IChcbiAgICAgICAgLy8gaWQgZ2l2ZW46IGludmFsaWRhdGUgYWxsIHF1ZXJpZXMgdGhhdCBwcm92aWRlIHRoaXMgdHlwZSAmIGlkXG4gICAgICAgIHByb3ZpZGVkW3RhZy5pZF1cbiAgICAgICkgOiAoXG4gICAgICAgIC8vIG5vIGlkOiBpbnZhbGlkYXRlIGFsbCBxdWVyaWVzIHRoYXQgcHJvdmlkZSB0aGlzIHR5cGVcbiAgICAgICAgZmxhdHRlbihPYmplY3QudmFsdWVzKHByb3ZpZGVkKSlcbiAgICAgICkpID8/IFtdO1xuICAgICAgZm9yIChjb25zdCBpbnZhbGlkYXRlIG9mIGludmFsaWRhdGVTdWJzY3JpcHRpb25zKSB7XG4gICAgICAgIHRvSW52YWxpZGF0ZS5hZGQoaW52YWxpZGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmbGF0dGVuKEFycmF5LmZyb20odG9JbnZhbGlkYXRlLnZhbHVlcygpKS5tYXAoKHF1ZXJ5Q2FjaGVLZXkpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5U3ViU3RhdGUgPSBhcGlTdGF0ZS5xdWVyaWVzW3F1ZXJ5Q2FjaGVLZXldO1xuICAgICAgcmV0dXJuIHF1ZXJ5U3ViU3RhdGUgPyBbe1xuICAgICAgICBxdWVyeUNhY2hlS2V5LFxuICAgICAgICBlbmRwb2ludE5hbWU6IHF1ZXJ5U3ViU3RhdGUuZW5kcG9pbnROYW1lLFxuICAgICAgICBvcmlnaW5hbEFyZ3M6IHF1ZXJ5U3ViU3RhdGUub3JpZ2luYWxBcmdzXG4gICAgICB9XSA6IFtdO1xuICAgIH0pKTtcbiAgfVxuICBmdW5jdGlvbiBzZWxlY3RDYWNoZWRBcmdzRm9yUXVlcnkoc3RhdGUsIHF1ZXJ5TmFtZSkge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHN0YXRlW3JlZHVjZXJQYXRoXS5xdWVyaWVzKS5maWx0ZXIoKGVudHJ5KSA9PiBlbnRyeT8uZW5kcG9pbnROYW1lID09PSBxdWVyeU5hbWUgJiYgZW50cnkuc3RhdHVzICE9PSBcInVuaW5pdGlhbGl6ZWRcIiAvKiB1bmluaXRpYWxpemVkICovKS5tYXAoKGVudHJ5KSA9PiBlbnRyeS5vcmlnaW5hbEFyZ3MpO1xuICB9XG59XG5cbi8vIHNyYy9xdWVyeS9kZWZhdWx0U2VyaWFsaXplUXVlcnlBcmdzLnRzXG52YXIgY2FjaGUgPSBXZWFrTWFwID8gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCkgOiB2b2lkIDA7XG52YXIgZGVmYXVsdFNlcmlhbGl6ZVF1ZXJ5QXJncyA9ICh7XG4gIGVuZHBvaW50TmFtZSxcbiAgcXVlcnlBcmdzXG59KSA9PiB7XG4gIGxldCBzZXJpYWxpemVkID0gXCJcIjtcbiAgY29uc3QgY2FjaGVkID0gY2FjaGU/LmdldChxdWVyeUFyZ3MpO1xuICBpZiAodHlwZW9mIGNhY2hlZCA9PT0gXCJzdHJpbmdcIikge1xuICAgIHNlcmlhbGl6ZWQgPSBjYWNoZWQ7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc3RyaW5naWZpZWQgPSBKU09OLnN0cmluZ2lmeShxdWVyeUFyZ3MsIChrZXksIHZhbHVlKSA9PiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IE9iamVjdC5rZXlzKHZhbHVlKS5zb3J0KCkucmVkdWNlKChhY2MsIGtleTIpID0+IHtcbiAgICAgIGFjY1trZXkyXSA9IHZhbHVlW2tleTJdO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSkgOiB2YWx1ZSk7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocXVlcnlBcmdzKSkge1xuICAgICAgY2FjaGU/LnNldChxdWVyeUFyZ3MsIHN0cmluZ2lmaWVkKTtcbiAgICB9XG4gICAgc2VyaWFsaXplZCA9IHN0cmluZ2lmaWVkO1xuICB9XG4gIHJldHVybiBgJHtlbmRwb2ludE5hbWV9KCR7c2VyaWFsaXplZH0pYDtcbn07XG5cbi8vIHNyYy9xdWVyeS9jcmVhdGVBcGkudHNcbmltcG9ydCB7IHdlYWtNYXBNZW1vaXplIH0gZnJvbSBcInJlc2VsZWN0XCI7XG5mdW5jdGlvbiBidWlsZENyZWF0ZUFwaSguLi5tb2R1bGVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiYXNlQ3JlYXRlQXBpKG9wdGlvbnMpIHtcbiAgICBjb25zdCBleHRyYWN0UmVoeWRyYXRpb25JbmZvID0gd2Vha01hcE1lbW9pemUoKGFjdGlvbikgPT4gb3B0aW9ucy5leHRyYWN0UmVoeWRyYXRpb25JbmZvPy4oYWN0aW9uLCB7XG4gICAgICByZWR1Y2VyUGF0aDogb3B0aW9ucy5yZWR1Y2VyUGF0aCA/PyBcImFwaVwiXG4gICAgfSkpO1xuICAgIGNvbnN0IG9wdGlvbnNXaXRoRGVmYXVsdHMgPSB7XG4gICAgICByZWR1Y2VyUGF0aDogXCJhcGlcIixcbiAgICAgIGtlZXBVbnVzZWREYXRhRm9yOiA2MCxcbiAgICAgIHJlZmV0Y2hPbk1vdW50T3JBcmdDaGFuZ2U6IGZhbHNlLFxuICAgICAgcmVmZXRjaE9uRm9jdXM6IGZhbHNlLFxuICAgICAgcmVmZXRjaE9uUmVjb25uZWN0OiBmYWxzZSxcbiAgICAgIGludmFsaWRhdGlvbkJlaGF2aW9yOiBcImRlbGF5ZWRcIixcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBleHRyYWN0UmVoeWRyYXRpb25JbmZvLFxuICAgICAgc2VyaWFsaXplUXVlcnlBcmdzKHF1ZXJ5QXJnc0FwaSkge1xuICAgICAgICBsZXQgZmluYWxTZXJpYWxpemVRdWVyeUFyZ3MgPSBkZWZhdWx0U2VyaWFsaXplUXVlcnlBcmdzO1xuICAgICAgICBpZiAoXCJzZXJpYWxpemVRdWVyeUFyZ3NcIiBpbiBxdWVyeUFyZ3NBcGkuZW5kcG9pbnREZWZpbml0aW9uKSB7XG4gICAgICAgICAgY29uc3QgZW5kcG9pbnRTUUEgPSBxdWVyeUFyZ3NBcGkuZW5kcG9pbnREZWZpbml0aW9uLnNlcmlhbGl6ZVF1ZXJ5QXJncztcbiAgICAgICAgICBmaW5hbFNlcmlhbGl6ZVF1ZXJ5QXJncyA9IChxdWVyeUFyZ3NBcGkyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbml0aWFsUmVzdWx0ID0gZW5kcG9pbnRTUUEocXVlcnlBcmdzQXBpMik7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGluaXRpYWxSZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxSZXN1bHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gZGVmYXVsdFNlcmlhbGl6ZVF1ZXJ5QXJncyh7XG4gICAgICAgICAgICAgICAgLi4ucXVlcnlBcmdzQXBpMixcbiAgICAgICAgICAgICAgICBxdWVyeUFyZ3M6IGluaXRpYWxSZXN1bHRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnNlcmlhbGl6ZVF1ZXJ5QXJncykge1xuICAgICAgICAgIGZpbmFsU2VyaWFsaXplUXVlcnlBcmdzID0gb3B0aW9ucy5zZXJpYWxpemVRdWVyeUFyZ3M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbmFsU2VyaWFsaXplUXVlcnlBcmdzKHF1ZXJ5QXJnc0FwaSk7XG4gICAgICB9LFxuICAgICAgdGFnVHlwZXM6IFsuLi5vcHRpb25zLnRhZ1R5cGVzIHx8IFtdXVxuICAgIH07XG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgIGVuZHBvaW50RGVmaW5pdGlvbnM6IHt9LFxuICAgICAgYmF0Y2goZm4pIHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sXG4gICAgICBhcGlVaWQ6IG5hbm9pZCgpLFxuICAgICAgZXh0cmFjdFJlaHlkcmF0aW9uSW5mbyxcbiAgICAgIGhhc1JlaHlkcmF0aW9uSW5mbzogd2Vha01hcE1lbW9pemUoKGFjdGlvbikgPT4gZXh0cmFjdFJlaHlkcmF0aW9uSW5mbyhhY3Rpb24pICE9IG51bGwpXG4gICAgfTtcbiAgICBjb25zdCBhcGkgPSB7XG4gICAgICBpbmplY3RFbmRwb2ludHMsXG4gICAgICBlbmhhbmNlRW5kcG9pbnRzKHtcbiAgICAgICAgYWRkVGFnVHlwZXMsXG4gICAgICAgIGVuZHBvaW50c1xuICAgICAgfSkge1xuICAgICAgICBpZiAoYWRkVGFnVHlwZXMpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGVUIG9mIGFkZFRhZ1R5cGVzKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnNXaXRoRGVmYXVsdHMudGFnVHlwZXMuaW5jbHVkZXMoZVQpKSB7XG4gICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgb3B0aW9uc1dpdGhEZWZhdWx0cy50YWdUeXBlcy5wdXNoKGVUKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZHBvaW50cykge1xuICAgICAgICAgIGZvciAoY29uc3QgW2VuZHBvaW50TmFtZSwgcGFydGlhbERlZmluaXRpb25dIG9mIE9iamVjdC5lbnRyaWVzKGVuZHBvaW50cykpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFydGlhbERlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICBwYXJ0aWFsRGVmaW5pdGlvbihjb250ZXh0LmVuZHBvaW50RGVmaW5pdGlvbnNbZW5kcG9pbnROYW1lXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGNvbnRleHQuZW5kcG9pbnREZWZpbml0aW9uc1tlbmRwb2ludE5hbWVdIHx8IHt9LCBwYXJ0aWFsRGVmaW5pdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcGk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBpbml0aWFsaXplZE1vZHVsZXMgPSBtb2R1bGVzLm1hcCgobSkgPT4gbS5pbml0KGFwaSwgb3B0aW9uc1dpdGhEZWZhdWx0cywgY29udGV4dCkpO1xuICAgIGZ1bmN0aW9uIGluamVjdEVuZHBvaW50cyhpbmplY3QpIHtcbiAgICAgIGNvbnN0IGV2YWx1YXRlZEVuZHBvaW50cyA9IGluamVjdC5lbmRwb2ludHMoe1xuICAgICAgICBxdWVyeTogKHgpID0+ICh7XG4gICAgICAgICAgLi4ueCxcbiAgICAgICAgICB0eXBlOiBcInF1ZXJ5XCIgLyogcXVlcnkgKi9cbiAgICAgICAgfSksXG4gICAgICAgIG11dGF0aW9uOiAoeCkgPT4gKHtcbiAgICAgICAgICAuLi54LFxuICAgICAgICAgIHR5cGU6IFwibXV0YXRpb25cIiAvKiBtdXRhdGlvbiAqL1xuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICBmb3IgKGNvbnN0IFtlbmRwb2ludE5hbWUsIGRlZmluaXRpb25dIG9mIE9iamVjdC5lbnRyaWVzKGV2YWx1YXRlZEVuZHBvaW50cykpIHtcbiAgICAgICAgaWYgKCFpbmplY3Qub3ZlcnJpZGVFeGlzdGluZyAmJiBlbmRwb2ludE5hbWUgaW4gY29udGV4dC5lbmRwb2ludERlZmluaXRpb25zKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYGNhbGxlZCBcXGBpbmplY3RFbmRwb2ludHNcXGAgdG8gb3ZlcnJpZGUgYWxyZWFkeS1leGlzdGluZyBlbmRwb2ludE5hbWUgJHtlbmRwb2ludE5hbWV9IHdpdGhvdXQgc3BlY2lmeWluZyBcXGBvdmVycmlkZUV4aXN0aW5nOiB0cnVlXFxgYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuZW5kcG9pbnREZWZpbml0aW9uc1tlbmRwb2ludE5hbWVdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgZm9yIChjb25zdCBtIG9mIGluaXRpYWxpemVkTW9kdWxlcykge1xuICAgICAgICAgIG0uaW5qZWN0RW5kcG9pbnQoZW5kcG9pbnROYW1lLCBkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFwaTtcbiAgICB9XG4gICAgcmV0dXJuIGFwaS5pbmplY3RFbmRwb2ludHMoe1xuICAgICAgZW5kcG9pbnRzOiBvcHRpb25zLmVuZHBvaW50c1xuICAgIH0pO1xuICB9O1xufVxuXG4vLyBzcmMvcXVlcnkvZmFrZUJhc2VRdWVyeS50c1xuaW1wb3J0IHsgZm9ybWF0UHJvZEVycm9yTWVzc2FnZSBhcyBfZm9ybWF0UHJvZEVycm9yTWVzc2FnZTIgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xuZnVuY3Rpb24gZmFrZUJhc2VRdWVyeSgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBfZm9ybWF0UHJvZEVycm9yTWVzc2FnZTIoMzMpIDogXCJXaGVuIHVzaW5nIGBmYWtlQmFzZVF1ZXJ5YCwgYWxsIHF1ZXJpZXMgJiBtdXRhdGlvbnMgbXVzdCB1c2UgdGhlIGBxdWVyeUZuYCBkZWZpbml0aW9uIHN5bnRheC5cIik7XG4gIH07XG59XG5cbi8vIHNyYy9xdWVyeS9jb3JlL2J1aWxkTWlkZGxld2FyZS9jYWNoZUNvbGxlY3Rpb24udHNcbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gIGZvciAobGV0IGsgaW4gb2JqKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxudmFyIFRISVJUWV9UV09fQklUX01BWF9USU1FUl9TRUNPTkRTID0gMjE0NzQ4MzY0NyAvIDFlMyAtIDE7XG52YXIgYnVpbGRDYWNoZUNvbGxlY3Rpb25IYW5kbGVyID0gKHtcbiAgcmVkdWNlclBhdGgsXG4gIGFwaSxcbiAgY29udGV4dCxcbiAgaW50ZXJuYWxTdGF0ZVxufSkgPT4ge1xuICBjb25zdCB7XG4gICAgcmVtb3ZlUXVlcnlSZXN1bHQsXG4gICAgdW5zdWJzY3JpYmVRdWVyeVJlc3VsdFxuICB9ID0gYXBpLmludGVybmFsQWN0aW9ucztcbiAgZnVuY3Rpb24gYW55U3Vic2NyaXB0aW9uc1JlbWFpbmluZ0ZvcktleShxdWVyeUNhY2hlS2V5KSB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IGludGVybmFsU3RhdGUuY3VycmVudFN1YnNjcmlwdGlvbnNbcXVlcnlDYWNoZUtleV07XG4gICAgcmV0dXJuICEhc3Vic2NyaXB0aW9ucyAmJiAhaXNPYmplY3RFbXB0eShzdWJzY3JpcHRpb25zKTtcbiAgfVxuICBjb25zdCBjdXJyZW50UmVtb3ZhbFRpbWVvdXRzID0ge307XG4gIGNvbnN0IGhhbmRsZXIgPSAoYWN0aW9uLCBtd0FwaSwgaW50ZXJuYWxTdGF0ZTIpID0+IHtcbiAgICBpZiAodW5zdWJzY3JpYmVRdWVyeVJlc3VsdC5tYXRjaChhY3Rpb24pKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IG13QXBpLmdldFN0YXRlKClbcmVkdWNlclBhdGhdO1xuICAgICAgY29uc3Qge1xuICAgICAgICBxdWVyeUNhY2hlS2V5XG4gICAgICB9ID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICBoYW5kbGVVbnN1YnNjcmliZShxdWVyeUNhY2hlS2V5LCBzdGF0ZS5xdWVyaWVzW3F1ZXJ5Q2FjaGVLZXldPy5lbmRwb2ludE5hbWUsIG13QXBpLCBzdGF0ZS5jb25maWcpO1xuICAgIH1cbiAgICBpZiAoYXBpLnV0aWwucmVzZXRBcGlTdGF0ZS5tYXRjaChhY3Rpb24pKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHRpbWVvdXRdIG9mIE9iamVjdC5lbnRyaWVzKGN1cnJlbnRSZW1vdmFsVGltZW91dHMpKSB7XG4gICAgICAgIGlmICh0aW1lb3V0KVxuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgZGVsZXRlIGN1cnJlbnRSZW1vdmFsVGltZW91dHNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbnRleHQuaGFzUmVoeWRyYXRpb25JbmZvKGFjdGlvbikpIHtcbiAgICAgIGNvbnN0IHN0YXRlID0gbXdBcGkuZ2V0U3RhdGUoKVtyZWR1Y2VyUGF0aF07XG4gICAgICBjb25zdCB7XG4gICAgICAgIHF1ZXJpZXNcbiAgICAgIH0gPSBjb250ZXh0LmV4dHJhY3RSZWh5ZHJhdGlvbkluZm8oYWN0aW9uKTtcbiAgICAgIGZvciAoY29uc3QgW3F1ZXJ5Q2FjaGVLZXksIHF1ZXJ5U3RhdGVdIG9mIE9iamVjdC5lbnRyaWVzKHF1ZXJpZXMpKSB7XG4gICAgICAgIGhhbmRsZVVuc3Vic2NyaWJlKHF1ZXJ5Q2FjaGVLZXksIHF1ZXJ5U3RhdGU/LmVuZHBvaW50TmFtZSwgbXdBcGksIHN0YXRlLmNvbmZpZyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBoYW5kbGVVbnN1YnNjcmliZShxdWVyeUNhY2hlS2V5LCBlbmRwb2ludE5hbWUsIGFwaTIsIGNvbmZpZykge1xuICAgIGNvbnN0IGVuZHBvaW50RGVmaW5pdGlvbiA9IGNvbnRleHQuZW5kcG9pbnREZWZpbml0aW9uc1tlbmRwb2ludE5hbWVdO1xuICAgIGNvbnN0IGtlZXBVbnVzZWREYXRhRm9yID0gZW5kcG9pbnREZWZpbml0aW9uPy5rZWVwVW51c2VkRGF0YUZvciA/PyBjb25maWcua2VlcFVudXNlZERhdGFGb3I7XG4gICAgaWYgKGtlZXBVbnVzZWREYXRhRm9yID09PSBJbmZpbml0eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmaW5hbEtlZXBVbnVzZWREYXRhRm9yID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oa2VlcFVudXNlZERhdGFGb3IsIFRISVJUWV9UV09fQklUX01BWF9USU1FUl9TRUNPTkRTKSk7XG4gICAgaWYgKCFhbnlTdWJzY3JpcHRpb25zUmVtYWluaW5nRm9yS2V5KHF1ZXJ5Q2FjaGVLZXkpKSB7XG4gICAgICBjb25zdCBjdXJyZW50VGltZW91dCA9IGN1cnJlbnRSZW1vdmFsVGltZW91dHNbcXVlcnlDYWNoZUtleV07XG4gICAgICBpZiAoY3VycmVudFRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGN1cnJlbnRUaW1lb3V0KTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRSZW1vdmFsVGltZW91dHNbcXVlcnlDYWNoZUtleV0gPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKCFhbnlTdWJzY3JpcHRpb25zUmVtYWluaW5nRm9yS2V5KHF1ZXJ5Q2FjaGVLZXkpKSB7XG4gICAgICAgICAgYXBpMi5kaXNwYXRjaChyZW1vdmVRdWVyeVJlc3VsdCh7XG4gICAgICAgICAgICBxdWVyeUNhY2hlS2V5XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBjdXJyZW50UmVtb3ZhbFRpbWVvdXRzW3F1ZXJ5Q2FjaGVLZXldO1xuICAgICAgfSwgZmluYWxLZWVwVW51c2VkRGF0YUZvciAqIDFlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBoYW5kbGVyO1xufTtcblxuLy8gc3JjL3F1ZXJ5L2NvcmUvYnVpbGRNaWRkbGV3YXJlL2ludmFsaWRhdGlvbkJ5VGFncy50c1xudmFyIGJ1aWxkSW52YWxpZGF0aW9uQnlUYWdzSGFuZGxlciA9ICh7XG4gIHJlZHVjZXJQYXRoLFxuICBjb250ZXh0LFxuICBjb250ZXh0OiB7XG4gICAgZW5kcG9pbnREZWZpbml0aW9uc1xuICB9LFxuICBtdXRhdGlvblRodW5rLFxuICBxdWVyeVRodW5rLFxuICBhcGksXG4gIGFzc2VydFRhZ1R5cGUsXG4gIHJlZmV0Y2hRdWVyeSxcbiAgaW50ZXJuYWxTdGF0ZVxufSkgPT4ge1xuICBjb25zdCB7XG4gICAgcmVtb3ZlUXVlcnlSZXN1bHRcbiAgfSA9IGFwaS5pbnRlcm5hbEFjdGlvbnM7XG4gIGNvbnN0IGlzVGh1bmtBY3Rpb25XaXRoVGFncyA9IGlzQW55T2YoaXNGdWxmaWxsZWQobXV0YXRpb25UaHVuayksIGlzUmVqZWN0ZWRXaXRoVmFsdWUobXV0YXRpb25UaHVuaykpO1xuICBjb25zdCBpc1F1ZXJ5RW5kID0gaXNBbnlPZihpc0Z1bGZpbGxlZChtdXRhdGlvblRodW5rLCBxdWVyeVRodW5rKSwgaXNSZWplY3RlZChtdXRhdGlvblRodW5rLCBxdWVyeVRodW5rKSk7XG4gIGxldCBwZW5kaW5nVGFnSW52YWxpZGF0aW9ucyA9IFtdO1xuICBjb25zdCBoYW5kbGVyID0gKGFjdGlvbiwgbXdBcGkpID0+IHtcbiAgICBpZiAoaXNUaHVua0FjdGlvbldpdGhUYWdzKGFjdGlvbikpIHtcbiAgICAgIGludmFsaWRhdGVUYWdzKGNhbGN1bGF0ZVByb3ZpZGVkQnlUaHVuayhhY3Rpb24sIFwiaW52YWxpZGF0ZXNUYWdzXCIsIGVuZHBvaW50RGVmaW5pdGlvbnMsIGFzc2VydFRhZ1R5cGUpLCBtd0FwaSk7XG4gICAgfSBlbHNlIGlmIChpc1F1ZXJ5RW5kKGFjdGlvbikpIHtcbiAgICAgIGludmFsaWRhdGVUYWdzKFtdLCBtd0FwaSk7XG4gICAgfSBlbHNlIGlmIChhcGkudXRpbC5pbnZhbGlkYXRlVGFncy5tYXRjaChhY3Rpb24pKSB7XG4gICAgICBpbnZhbGlkYXRlVGFncyhjYWxjdWxhdGVQcm92aWRlZEJ5KGFjdGlvbi5wYXlsb2FkLCB2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGFzc2VydFRhZ1R5cGUpLCBtd0FwaSk7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBoYXNQZW5kaW5nUmVxdWVzdHMoc3RhdGUpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzdGF0ZS5xdWVyaWVzKSB7XG4gICAgICBpZiAoc3RhdGUucXVlcmllc1trZXldPy5zdGF0dXMgPT09IFwicGVuZGluZ1wiIC8qIHBlbmRpbmcgKi8pXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzdGF0ZS5tdXRhdGlvbnMpIHtcbiAgICAgIGlmIChzdGF0ZS5tdXRhdGlvbnNba2V5XT8uc3RhdHVzID09PSBcInBlbmRpbmdcIiAvKiBwZW5kaW5nICovKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIGludmFsaWRhdGVUYWdzKG5ld1RhZ3MsIG13QXBpKSB7XG4gICAgY29uc3Qgcm9vdFN0YXRlID0gbXdBcGkuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBzdGF0ZSA9IHJvb3RTdGF0ZVtyZWR1Y2VyUGF0aF07XG4gICAgcGVuZGluZ1RhZ0ludmFsaWRhdGlvbnMucHVzaCguLi5uZXdUYWdzKTtcbiAgICBpZiAoc3RhdGUuY29uZmlnLmludmFsaWRhdGlvbkJlaGF2aW9yID09PSBcImRlbGF5ZWRcIiAmJiBoYXNQZW5kaW5nUmVxdWVzdHMoc3RhdGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhZ3MgPSBwZW5kaW5nVGFnSW52YWxpZGF0aW9ucztcbiAgICBwZW5kaW5nVGFnSW52YWxpZGF0aW9ucyA9IFtdO1xuICAgIGlmICh0YWdzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB0b0ludmFsaWRhdGUgPSBhcGkudXRpbC5zZWxlY3RJbnZhbGlkYXRlZEJ5KHJvb3RTdGF0ZSwgdGFncyk7XG4gICAgY29udGV4dC5iYXRjaCgoKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZXNBcnJheSA9IEFycmF5LmZyb20odG9JbnZhbGlkYXRlLnZhbHVlcygpKTtcbiAgICAgIGZvciAoY29uc3Qge1xuICAgICAgICBxdWVyeUNhY2hlS2V5XG4gICAgICB9IG9mIHZhbHVlc0FycmF5KSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5U3ViU3RhdGUgPSBzdGF0ZS5xdWVyaWVzW3F1ZXJ5Q2FjaGVLZXldO1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25TdWJTdGF0ZSA9IGludGVybmFsU3RhdGUuY3VycmVudFN1YnNjcmlwdGlvbnNbcXVlcnlDYWNoZUtleV0gPz8ge307XG4gICAgICAgIGlmIChxdWVyeVN1YlN0YXRlKSB7XG4gICAgICAgICAgaWYgKGNvdW50T2JqZWN0S2V5cyhzdWJzY3JpcHRpb25TdWJTdGF0ZSkgPT09IDApIHtcbiAgICAgICAgICAgIG13QXBpLmRpc3BhdGNoKHJlbW92ZVF1ZXJ5UmVzdWx0KHtcbiAgICAgICAgICAgICAgcXVlcnlDYWNoZUtleVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocXVlcnlTdWJTdGF0ZS5zdGF0dXMgIT09IFwidW5pbml0aWFsaXplZFwiIC8qIHVuaW5pdGlhbGl6ZWQgKi8pIHtcbiAgICAgICAgICAgIG13QXBpLmRpc3BhdGNoKHJlZmV0Y2hRdWVyeShxdWVyeVN1YlN0YXRlLCBxdWVyeUNhY2hlS2V5KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGhhbmRsZXI7XG59O1xuXG4vLyBzcmMvcXVlcnkvY29yZS9idWlsZE1pZGRsZXdhcmUvcG9sbGluZy50c1xudmFyIGJ1aWxkUG9sbGluZ0hhbmRsZXIgPSAoe1xuICByZWR1Y2VyUGF0aCxcbiAgcXVlcnlUaHVuayxcbiAgYXBpLFxuICByZWZldGNoUXVlcnksXG4gIGludGVybmFsU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgY3VycmVudFBvbGxzID0ge307XG4gIGNvbnN0IGhhbmRsZXIgPSAoYWN0aW9uLCBtd0FwaSkgPT4ge1xuICAgIGlmIChhcGkuaW50ZXJuYWxBY3Rpb25zLnVwZGF0ZVN1YnNjcmlwdGlvbk9wdGlvbnMubWF0Y2goYWN0aW9uKSB8fCBhcGkuaW50ZXJuYWxBY3Rpb25zLnVuc3Vic2NyaWJlUXVlcnlSZXN1bHQubWF0Y2goYWN0aW9uKSkge1xuICAgICAgdXBkYXRlUG9sbGluZ0ludGVydmFsKGFjdGlvbi5wYXlsb2FkLCBtd0FwaSk7XG4gICAgfVxuICAgIGlmIChxdWVyeVRodW5rLnBlbmRpbmcubWF0Y2goYWN0aW9uKSB8fCBxdWVyeVRodW5rLnJlamVjdGVkLm1hdGNoKGFjdGlvbikgJiYgYWN0aW9uLm1ldGEuY29uZGl0aW9uKSB7XG4gICAgICB1cGRhdGVQb2xsaW5nSW50ZXJ2YWwoYWN0aW9uLm1ldGEuYXJnLCBtd0FwaSk7XG4gICAgfVxuICAgIGlmIChxdWVyeVRodW5rLmZ1bGZpbGxlZC5tYXRjaChhY3Rpb24pIHx8IHF1ZXJ5VGh1bmsucmVqZWN0ZWQubWF0Y2goYWN0aW9uKSAmJiAhYWN0aW9uLm1ldGEuY29uZGl0aW9uKSB7XG4gICAgICBzdGFydE5leHRQb2xsKGFjdGlvbi5tZXRhLmFyZywgbXdBcGkpO1xuICAgIH1cbiAgICBpZiAoYXBpLnV0aWwucmVzZXRBcGlTdGF0ZS5tYXRjaChhY3Rpb24pKSB7XG4gICAgICBjbGVhclBvbGxzKCk7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBzdGFydE5leHRQb2xsKHtcbiAgICBxdWVyeUNhY2hlS2V5XG4gIH0sIGFwaTIpIHtcbiAgICBjb25zdCBzdGF0ZSA9IGFwaTIuZ2V0U3RhdGUoKVtyZWR1Y2VyUGF0aF07XG4gICAgY29uc3QgcXVlcnlTdWJTdGF0ZSA9IHN0YXRlLnF1ZXJpZXNbcXVlcnlDYWNoZUtleV07XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IGludGVybmFsU3RhdGUuY3VycmVudFN1YnNjcmlwdGlvbnNbcXVlcnlDYWNoZUtleV07XG4gICAgaWYgKCFxdWVyeVN1YlN0YXRlIHx8IHF1ZXJ5U3ViU3RhdGUuc3RhdHVzID09PSBcInVuaW5pdGlhbGl6ZWRcIiAvKiB1bmluaXRpYWxpemVkICovKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIGxvd2VzdFBvbGxpbmdJbnRlcnZhbCxcbiAgICAgIHNraXBQb2xsaW5nSWZVbmZvY3VzZWRcbiAgICB9ID0gZmluZExvd2VzdFBvbGxpbmdJbnRlcnZhbChzdWJzY3JpcHRpb25zKTtcbiAgICBpZiAoIU51bWJlci5pc0Zpbml0ZShsb3dlc3RQb2xsaW5nSW50ZXJ2YWwpKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGN1cnJlbnRQb2xsID0gY3VycmVudFBvbGxzW3F1ZXJ5Q2FjaGVLZXldO1xuICAgIGlmIChjdXJyZW50UG9sbD8udGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGN1cnJlbnRQb2xsLnRpbWVvdXQpO1xuICAgICAgY3VycmVudFBvbGwudGltZW91dCA9IHZvaWQgMDtcbiAgICB9XG4gICAgY29uc3QgbmV4dFBvbGxUaW1lc3RhbXAgPSBEYXRlLm5vdygpICsgbG93ZXN0UG9sbGluZ0ludGVydmFsO1xuICAgIGN1cnJlbnRQb2xsc1txdWVyeUNhY2hlS2V5XSA9IHtcbiAgICAgIG5leHRQb2xsVGltZXN0YW1wLFxuICAgICAgcG9sbGluZ0ludGVydmFsOiBsb3dlc3RQb2xsaW5nSW50ZXJ2YWwsXG4gICAgICB0aW1lb3V0OiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHN0YXRlLmNvbmZpZy5mb2N1c2VkIHx8ICFza2lwUG9sbGluZ0lmVW5mb2N1c2VkKSB7XG4gICAgICAgICAgYXBpMi5kaXNwYXRjaChyZWZldGNoUXVlcnkocXVlcnlTdWJTdGF0ZSwgcXVlcnlDYWNoZUtleSkpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0TmV4dFBvbGwoe1xuICAgICAgICAgIHF1ZXJ5Q2FjaGVLZXlcbiAgICAgICAgfSwgYXBpMik7XG4gICAgICB9LCBsb3dlc3RQb2xsaW5nSW50ZXJ2YWwpXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVQb2xsaW5nSW50ZXJ2YWwoe1xuICAgIHF1ZXJ5Q2FjaGVLZXlcbiAgfSwgYXBpMikge1xuICAgIGNvbnN0IHN0YXRlID0gYXBpMi5nZXRTdGF0ZSgpW3JlZHVjZXJQYXRoXTtcbiAgICBjb25zdCBxdWVyeVN1YlN0YXRlID0gc3RhdGUucXVlcmllc1txdWVyeUNhY2hlS2V5XTtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gaW50ZXJuYWxTdGF0ZS5jdXJyZW50U3Vic2NyaXB0aW9uc1txdWVyeUNhY2hlS2V5XTtcbiAgICBpZiAoIXF1ZXJ5U3ViU3RhdGUgfHwgcXVlcnlTdWJTdGF0ZS5zdGF0dXMgPT09IFwidW5pbml0aWFsaXplZFwiIC8qIHVuaW5pdGlhbGl6ZWQgKi8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgbG93ZXN0UG9sbGluZ0ludGVydmFsXG4gICAgfSA9IGZpbmRMb3dlc3RQb2xsaW5nSW50ZXJ2YWwoc3Vic2NyaXB0aW9ucyk7XG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUobG93ZXN0UG9sbGluZ0ludGVydmFsKSkge1xuICAgICAgY2xlYW51cFBvbGxGb3JLZXkocXVlcnlDYWNoZUtleSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN1cnJlbnRQb2xsID0gY3VycmVudFBvbGxzW3F1ZXJ5Q2FjaGVLZXldO1xuICAgIGNvbnN0IG5leHRQb2xsVGltZXN0YW1wID0gRGF0ZS5ub3coKSArIGxvd2VzdFBvbGxpbmdJbnRlcnZhbDtcbiAgICBpZiAoIWN1cnJlbnRQb2xsIHx8IG5leHRQb2xsVGltZXN0YW1wIDwgY3VycmVudFBvbGwubmV4dFBvbGxUaW1lc3RhbXApIHtcbiAgICAgIHN0YXJ0TmV4dFBvbGwoe1xuICAgICAgICBxdWVyeUNhY2hlS2V5XG4gICAgICB9LCBhcGkyKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2xlYW51cFBvbGxGb3JLZXkoa2V5KSB7XG4gICAgY29uc3QgZXhpc3RpbmdQb2xsID0gY3VycmVudFBvbGxzW2tleV07XG4gICAgaWYgKGV4aXN0aW5nUG9sbD8udGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGV4aXN0aW5nUG9sbC50aW1lb3V0KTtcbiAgICB9XG4gICAgZGVsZXRlIGN1cnJlbnRQb2xsc1trZXldO1xuICB9XG4gIGZ1bmN0aW9uIGNsZWFyUG9sbHMoKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY3VycmVudFBvbGxzKSkge1xuICAgICAgY2xlYW51cFBvbGxGb3JLZXkoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZmluZExvd2VzdFBvbGxpbmdJbnRlcnZhbChzdWJzY3JpYmVycyA9IHt9KSB7XG4gICAgbGV0IHNraXBQb2xsaW5nSWZVbmZvY3VzZWQgPSBmYWxzZTtcbiAgICBsZXQgbG93ZXN0UG9sbGluZ0ludGVydmFsID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIGZvciAobGV0IGtleSBpbiBzdWJzY3JpYmVycykge1xuICAgICAgaWYgKCEhc3Vic2NyaWJlcnNba2V5XS5wb2xsaW5nSW50ZXJ2YWwpIHtcbiAgICAgICAgbG93ZXN0UG9sbGluZ0ludGVydmFsID0gTWF0aC5taW4oc3Vic2NyaWJlcnNba2V5XS5wb2xsaW5nSW50ZXJ2YWwsIGxvd2VzdFBvbGxpbmdJbnRlcnZhbCk7XG4gICAgICAgIHNraXBQb2xsaW5nSWZVbmZvY3VzZWQgPSBzdWJzY3JpYmVyc1trZXldLnNraXBQb2xsaW5nSWZVbmZvY3VzZWQgfHwgc2tpcFBvbGxpbmdJZlVuZm9jdXNlZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvd2VzdFBvbGxpbmdJbnRlcnZhbCxcbiAgICAgIHNraXBQb2xsaW5nSWZVbmZvY3VzZWRcbiAgICB9O1xuICB9XG4gIHJldHVybiBoYW5kbGVyO1xufTtcblxuLy8gc3JjL3F1ZXJ5L2NvcmUvYnVpbGRNaWRkbGV3YXJlL3dpbmRvd0V2ZW50SGFuZGxpbmcudHNcbnZhciBidWlsZFdpbmRvd0V2ZW50SGFuZGxlciA9ICh7XG4gIHJlZHVjZXJQYXRoLFxuICBjb250ZXh0LFxuICBhcGksXG4gIHJlZmV0Y2hRdWVyeSxcbiAgaW50ZXJuYWxTdGF0ZVxufSkgPT4ge1xuICBjb25zdCB7XG4gICAgcmVtb3ZlUXVlcnlSZXN1bHRcbiAgfSA9IGFwaS5pbnRlcm5hbEFjdGlvbnM7XG4gIGNvbnN0IGhhbmRsZXIgPSAoYWN0aW9uLCBtd0FwaSkgPT4ge1xuICAgIGlmIChvbkZvY3VzLm1hdGNoKGFjdGlvbikpIHtcbiAgICAgIHJlZmV0Y2hWYWxpZFF1ZXJpZXMobXdBcGksIFwicmVmZXRjaE9uRm9jdXNcIik7XG4gICAgfVxuICAgIGlmIChvbk9ubGluZS5tYXRjaChhY3Rpb24pKSB7XG4gICAgICByZWZldGNoVmFsaWRRdWVyaWVzKG13QXBpLCBcInJlZmV0Y2hPblJlY29ubmVjdFwiKTtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIHJlZmV0Y2hWYWxpZFF1ZXJpZXMoYXBpMiwgdHlwZSkge1xuICAgIGNvbnN0IHN0YXRlID0gYXBpMi5nZXRTdGF0ZSgpW3JlZHVjZXJQYXRoXTtcbiAgICBjb25zdCBxdWVyaWVzID0gc3RhdGUucXVlcmllcztcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gaW50ZXJuYWxTdGF0ZS5jdXJyZW50U3Vic2NyaXB0aW9ucztcbiAgICBjb250ZXh0LmJhdGNoKCgpID0+IHtcbiAgICAgIGZvciAoY29uc3QgcXVlcnlDYWNoZUtleSBvZiBPYmplY3Qua2V5cyhzdWJzY3JpcHRpb25zKSkge1xuICAgICAgICBjb25zdCBxdWVyeVN1YlN0YXRlID0gcXVlcmllc1txdWVyeUNhY2hlS2V5XTtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uU3ViU3RhdGUgPSBzdWJzY3JpcHRpb25zW3F1ZXJ5Q2FjaGVLZXldO1xuICAgICAgICBpZiAoIXN1YnNjcmlwdGlvblN1YlN0YXRlIHx8ICFxdWVyeVN1YlN0YXRlKVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBzaG91bGRSZWZldGNoID0gT2JqZWN0LnZhbHVlcyhzdWJzY3JpcHRpb25TdWJTdGF0ZSkuc29tZSgoc3ViKSA9PiBzdWJbdHlwZV0gPT09IHRydWUpIHx8IE9iamVjdC52YWx1ZXMoc3Vic2NyaXB0aW9uU3ViU3RhdGUpLmV2ZXJ5KChzdWIpID0+IHN1Ylt0eXBlXSA9PT0gdm9pZCAwKSAmJiBzdGF0ZS5jb25maWdbdHlwZV07XG4gICAgICAgIGlmIChzaG91bGRSZWZldGNoKSB7XG4gICAgICAgICAgaWYgKGNvdW50T2JqZWN0S2V5cyhzdWJzY3JpcHRpb25TdWJTdGF0ZSkgPT09IDApIHtcbiAgICAgICAgICAgIGFwaTIuZGlzcGF0Y2gocmVtb3ZlUXVlcnlSZXN1bHQoe1xuICAgICAgICAgICAgICBxdWVyeUNhY2hlS2V5XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChxdWVyeVN1YlN0YXRlLnN0YXR1cyAhPT0gXCJ1bmluaXRpYWxpemVkXCIgLyogdW5pbml0aWFsaXplZCAqLykge1xuICAgICAgICAgICAgYXBpMi5kaXNwYXRjaChyZWZldGNoUXVlcnkocXVlcnlTdWJTdGF0ZSwgcXVlcnlDYWNoZUtleSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBoYW5kbGVyO1xufTtcblxuLy8gc3JjL3F1ZXJ5L2NvcmUvYnVpbGRNaWRkbGV3YXJlL2NhY2hlTGlmZWN5Y2xlLnRzXG52YXIgbmV2ZXJSZXNvbHZlZEVycm9yID0gbmV3IEVycm9yKFwiUHJvbWlzZSBuZXZlciByZXNvbHZlZCBiZWZvcmUgY2FjaGVFbnRyeVJlbW92ZWQuXCIpO1xudmFyIGJ1aWxkQ2FjaGVMaWZlY3ljbGVIYW5kbGVyID0gKHtcbiAgYXBpLFxuICByZWR1Y2VyUGF0aCxcbiAgY29udGV4dCxcbiAgcXVlcnlUaHVuayxcbiAgbXV0YXRpb25UaHVuayxcbiAgaW50ZXJuYWxTdGF0ZVxufSkgPT4ge1xuICBjb25zdCBpc1F1ZXJ5VGh1bmsgPSBpc0FzeW5jVGh1bmtBY3Rpb24ocXVlcnlUaHVuayk7XG4gIGNvbnN0IGlzTXV0YXRpb25UaHVuayA9IGlzQXN5bmNUaHVua0FjdGlvbihtdXRhdGlvblRodW5rKTtcbiAgY29uc3QgaXNGdWxmaWxsZWRUaHVuayA9IGlzRnVsZmlsbGVkKHF1ZXJ5VGh1bmssIG11dGF0aW9uVGh1bmspO1xuICBjb25zdCBsaWZlY3ljbGVNYXAgPSB7fTtcbiAgY29uc3QgaGFuZGxlciA9IChhY3Rpb24sIG13QXBpLCBzdGF0ZUJlZm9yZSkgPT4ge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gZ2V0Q2FjaGVLZXkoYWN0aW9uKTtcbiAgICBpZiAocXVlcnlUaHVuay5wZW5kaW5nLm1hdGNoKGFjdGlvbikpIHtcbiAgICAgIGNvbnN0IG9sZFN0YXRlID0gc3RhdGVCZWZvcmVbcmVkdWNlclBhdGhdLnF1ZXJpZXNbY2FjaGVLZXldO1xuICAgICAgY29uc3Qgc3RhdGUgPSBtd0FwaS5nZXRTdGF0ZSgpW3JlZHVjZXJQYXRoXS5xdWVyaWVzW2NhY2hlS2V5XTtcbiAgICAgIGlmICghb2xkU3RhdGUgJiYgc3RhdGUpIHtcbiAgICAgICAgaGFuZGxlTmV3S2V5KGFjdGlvbi5tZXRhLmFyZy5lbmRwb2ludE5hbWUsIGFjdGlvbi5tZXRhLmFyZy5vcmlnaW5hbEFyZ3MsIGNhY2hlS2V5LCBtd0FwaSwgYWN0aW9uLm1ldGEucmVxdWVzdElkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG11dGF0aW9uVGh1bmsucGVuZGluZy5tYXRjaChhY3Rpb24pKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IG13QXBpLmdldFN0YXRlKClbcmVkdWNlclBhdGhdLm11dGF0aW9uc1tjYWNoZUtleV07XG4gICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgaGFuZGxlTmV3S2V5KGFjdGlvbi5tZXRhLmFyZy5lbmRwb2ludE5hbWUsIGFjdGlvbi5tZXRhLmFyZy5vcmlnaW5hbEFyZ3MsIGNhY2hlS2V5LCBtd0FwaSwgYWN0aW9uLm1ldGEucmVxdWVzdElkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRnVsZmlsbGVkVGh1bmsoYWN0aW9uKSkge1xuICAgICAgY29uc3QgbGlmZWN5Y2xlID0gbGlmZWN5Y2xlTWFwW2NhY2hlS2V5XTtcbiAgICAgIGlmIChsaWZlY3ljbGU/LnZhbHVlUmVzb2x2ZWQpIHtcbiAgICAgICAgbGlmZWN5Y2xlLnZhbHVlUmVzb2x2ZWQoe1xuICAgICAgICAgIGRhdGE6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgIG1ldGE6IGFjdGlvbi5tZXRhLmJhc2VRdWVyeU1ldGFcbiAgICAgICAgfSk7XG4gICAgICAgIGRlbGV0ZSBsaWZlY3ljbGUudmFsdWVSZXNvbHZlZDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFwaS5pbnRlcm5hbEFjdGlvbnMucmVtb3ZlUXVlcnlSZXN1bHQubWF0Y2goYWN0aW9uKSB8fCBhcGkuaW50ZXJuYWxBY3Rpb25zLnJlbW92ZU11dGF0aW9uUmVzdWx0Lm1hdGNoKGFjdGlvbikpIHtcbiAgICAgIGNvbnN0IGxpZmVjeWNsZSA9IGxpZmVjeWNsZU1hcFtjYWNoZUtleV07XG4gICAgICBpZiAobGlmZWN5Y2xlKSB7XG4gICAgICAgIGRlbGV0ZSBsaWZlY3ljbGVNYXBbY2FjaGVLZXldO1xuICAgICAgICBsaWZlY3ljbGUuY2FjaGVFbnRyeVJlbW92ZWQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFwaS51dGlsLnJlc2V0QXBpU3RhdGUubWF0Y2goYWN0aW9uKSkge1xuICAgICAgZm9yIChjb25zdCBbY2FjaGVLZXkyLCBsaWZlY3ljbGVdIG9mIE9iamVjdC5lbnRyaWVzKGxpZmVjeWNsZU1hcCkpIHtcbiAgICAgICAgZGVsZXRlIGxpZmVjeWNsZU1hcFtjYWNoZUtleTJdO1xuICAgICAgICBsaWZlY3ljbGUuY2FjaGVFbnRyeVJlbW92ZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGdldENhY2hlS2V5KGFjdGlvbikge1xuICAgIGlmIChpc1F1ZXJ5VGh1bmsoYWN0aW9uKSlcbiAgICAgIHJldHVybiBhY3Rpb24ubWV0YS5hcmcucXVlcnlDYWNoZUtleTtcbiAgICBpZiAoaXNNdXRhdGlvblRodW5rKGFjdGlvbikpIHtcbiAgICAgIHJldHVybiBhY3Rpb24ubWV0YS5hcmcuZml4ZWRDYWNoZUtleSA/PyBhY3Rpb24ubWV0YS5yZXF1ZXN0SWQ7XG4gICAgfVxuICAgIGlmIChhcGkuaW50ZXJuYWxBY3Rpb25zLnJlbW92ZVF1ZXJ5UmVzdWx0Lm1hdGNoKGFjdGlvbikpXG4gICAgICByZXR1cm4gYWN0aW9uLnBheWxvYWQucXVlcnlDYWNoZUtleTtcbiAgICBpZiAoYXBpLmludGVybmFsQWN0aW9ucy5yZW1vdmVNdXRhdGlvblJlc3VsdC5tYXRjaChhY3Rpb24pKVxuICAgICAgcmV0dXJuIGdldE11dGF0aW9uQ2FjaGVLZXkoYWN0aW9uLnBheWxvYWQpO1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZU5ld0tleShlbmRwb2ludE5hbWUsIG9yaWdpbmFsQXJncywgcXVlcnlDYWNoZUtleSwgbXdBcGksIHJlcXVlc3RJZCkge1xuICAgIGNvbnN0IGVuZHBvaW50RGVmaW5pdGlvbiA9IGNvbnRleHQuZW5kcG9pbnREZWZpbml0aW9uc1tlbmRwb2ludE5hbWVdO1xuICAgIGNvbnN0IG9uQ2FjaGVFbnRyeUFkZGVkID0gZW5kcG9pbnREZWZpbml0aW9uPy5vbkNhY2hlRW50cnlBZGRlZDtcbiAgICBpZiAoIW9uQ2FjaGVFbnRyeUFkZGVkKVxuICAgICAgcmV0dXJuO1xuICAgIGxldCBsaWZlY3ljbGUgPSB7fTtcbiAgICBjb25zdCBjYWNoZUVudHJ5UmVtb3ZlZCA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBsaWZlY3ljbGUuY2FjaGVFbnRyeVJlbW92ZWQgPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIGNvbnN0IGNhY2hlRGF0YUxvYWRlZCA9IFByb21pc2UucmFjZShbbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGxpZmVjeWNsZS52YWx1ZVJlc29sdmVkID0gcmVzb2x2ZTtcbiAgICB9KSwgY2FjaGVFbnRyeVJlbW92ZWQudGhlbigoKSA9PiB7XG4gICAgICB0aHJvdyBuZXZlclJlc29sdmVkRXJyb3I7XG4gICAgfSldKTtcbiAgICBjYWNoZURhdGFMb2FkZWQuY2F0Y2goKCkgPT4ge1xuICAgIH0pO1xuICAgIGxpZmVjeWNsZU1hcFtxdWVyeUNhY2hlS2V5XSA9IGxpZmVjeWNsZTtcbiAgICBjb25zdCBzZWxlY3RvciA9IGFwaS5lbmRwb2ludHNbZW5kcG9pbnROYW1lXS5zZWxlY3QoZW5kcG9pbnREZWZpbml0aW9uLnR5cGUgPT09IFwicXVlcnlcIiAvKiBxdWVyeSAqLyA/IG9yaWdpbmFsQXJncyA6IHF1ZXJ5Q2FjaGVLZXkpO1xuICAgIGNvbnN0IGV4dHJhID0gbXdBcGkuZGlzcGF0Y2goKF8sIF9fLCBleHRyYTIpID0+IGV4dHJhMik7XG4gICAgY29uc3QgbGlmZWN5Y2xlQXBpID0ge1xuICAgICAgLi4ubXdBcGksXG4gICAgICBnZXRDYWNoZUVudHJ5OiAoKSA9PiBzZWxlY3Rvcihtd0FwaS5nZXRTdGF0ZSgpKSxcbiAgICAgIHJlcXVlc3RJZCxcbiAgICAgIGV4dHJhLFxuICAgICAgdXBkYXRlQ2FjaGVkRGF0YTogZW5kcG9pbnREZWZpbml0aW9uLnR5cGUgPT09IFwicXVlcnlcIiAvKiBxdWVyeSAqLyA/ICh1cGRhdGVSZWNpcGUpID0+IG13QXBpLmRpc3BhdGNoKGFwaS51dGlsLnVwZGF0ZVF1ZXJ5RGF0YShlbmRwb2ludE5hbWUsIG9yaWdpbmFsQXJncywgdXBkYXRlUmVjaXBlKSkgOiB2b2lkIDAsXG4gICAgICBjYWNoZURhdGFMb2FkZWQsXG4gICAgICBjYWNoZUVudHJ5UmVtb3ZlZFxuICAgIH07XG4gICAgY29uc3QgcnVubmluZ0hhbmRsZXIgPSBvbkNhY2hlRW50cnlBZGRlZChvcmlnaW5hbEFyZ3MsIGxpZmVjeWNsZUFwaSk7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHJ1bm5pbmdIYW5kbGVyKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgaWYgKGUgPT09IG5ldmVyUmVzb2x2ZWRFcnJvcilcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaGFuZGxlcjtcbn07XG5cbi8vIHNyYy9xdWVyeS9jb3JlL2J1aWxkTWlkZGxld2FyZS9xdWVyeUxpZmVjeWNsZS50c1xudmFyIGJ1aWxkUXVlcnlMaWZlY3ljbGVIYW5kbGVyID0gKHtcbiAgYXBpLFxuICBjb250ZXh0LFxuICBxdWVyeVRodW5rLFxuICBtdXRhdGlvblRodW5rXG59KSA9PiB7XG4gIGNvbnN0IGlzUGVuZGluZ1RodW5rID0gaXNQZW5kaW5nKHF1ZXJ5VGh1bmssIG11dGF0aW9uVGh1bmspO1xuICBjb25zdCBpc1JlamVjdGVkVGh1bmsgPSBpc1JlamVjdGVkKHF1ZXJ5VGh1bmssIG11dGF0aW9uVGh1bmspO1xuICBjb25zdCBpc0Z1bGxmaWxsZWRUaHVuayA9IGlzRnVsZmlsbGVkKHF1ZXJ5VGh1bmssIG11dGF0aW9uVGh1bmspO1xuICBjb25zdCBsaWZlY3ljbGVNYXAgPSB7fTtcbiAgY29uc3QgaGFuZGxlciA9IChhY3Rpb24sIG13QXBpKSA9PiB7XG4gICAgaWYgKGlzUGVuZGluZ1RodW5rKGFjdGlvbikpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICBhcmc6IHtcbiAgICAgICAgICBlbmRwb2ludE5hbWUsXG4gICAgICAgICAgb3JpZ2luYWxBcmdzXG4gICAgICAgIH1cbiAgICAgIH0gPSBhY3Rpb24ubWV0YTtcbiAgICAgIGNvbnN0IGVuZHBvaW50RGVmaW5pdGlvbiA9IGNvbnRleHQuZW5kcG9pbnREZWZpbml0aW9uc1tlbmRwb2ludE5hbWVdO1xuICAgICAgY29uc3Qgb25RdWVyeVN0YXJ0ZWQgPSBlbmRwb2ludERlZmluaXRpb24/Lm9uUXVlcnlTdGFydGVkO1xuICAgICAgaWYgKG9uUXVlcnlTdGFydGVkKSB7XG4gICAgICAgIGNvbnN0IGxpZmVjeWNsZSA9IHt9O1xuICAgICAgICBjb25zdCBxdWVyeUZ1bGZpbGxlZCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBsaWZlY3ljbGUucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgbGlmZWN5Y2xlLnJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIHF1ZXJ5RnVsZmlsbGVkLmNhdGNoKCgpID0+IHtcbiAgICAgICAgfSk7XG4gICAgICAgIGxpZmVjeWNsZU1hcFtyZXF1ZXN0SWRdID0gbGlmZWN5Y2xlO1xuICAgICAgICBjb25zdCBzZWxlY3RvciA9IGFwaS5lbmRwb2ludHNbZW5kcG9pbnROYW1lXS5zZWxlY3QoZW5kcG9pbnREZWZpbml0aW9uLnR5cGUgPT09IFwicXVlcnlcIiAvKiBxdWVyeSAqLyA/IG9yaWdpbmFsQXJncyA6IHJlcXVlc3RJZCk7XG4gICAgICAgIGNvbnN0IGV4dHJhID0gbXdBcGkuZGlzcGF0Y2goKF8sIF9fLCBleHRyYTIpID0+IGV4dHJhMik7XG4gICAgICAgIGNvbnN0IGxpZmVjeWNsZUFwaSA9IHtcbiAgICAgICAgICAuLi5td0FwaSxcbiAgICAgICAgICBnZXRDYWNoZUVudHJ5OiAoKSA9PiBzZWxlY3Rvcihtd0FwaS5nZXRTdGF0ZSgpKSxcbiAgICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgICAgZXh0cmEsXG4gICAgICAgICAgdXBkYXRlQ2FjaGVkRGF0YTogZW5kcG9pbnREZWZpbml0aW9uLnR5cGUgPT09IFwicXVlcnlcIiAvKiBxdWVyeSAqLyA/ICh1cGRhdGVSZWNpcGUpID0+IG13QXBpLmRpc3BhdGNoKGFwaS51dGlsLnVwZGF0ZVF1ZXJ5RGF0YShlbmRwb2ludE5hbWUsIG9yaWdpbmFsQXJncywgdXBkYXRlUmVjaXBlKSkgOiB2b2lkIDAsXG4gICAgICAgICAgcXVlcnlGdWxmaWxsZWRcbiAgICAgICAgfTtcbiAgICAgICAgb25RdWVyeVN0YXJ0ZWQob3JpZ2luYWxBcmdzLCBsaWZlY3ljbGVBcGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNGdWxsZmlsbGVkVGh1bmsoYWN0aW9uKSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgIGJhc2VRdWVyeU1ldGFcbiAgICAgIH0gPSBhY3Rpb24ubWV0YTtcbiAgICAgIGxpZmVjeWNsZU1hcFtyZXF1ZXN0SWRdPy5yZXNvbHZlKHtcbiAgICAgICAgZGF0YTogYWN0aW9uLnBheWxvYWQsXG4gICAgICAgIG1ldGE6IGJhc2VRdWVyeU1ldGFcbiAgICAgIH0pO1xuICAgICAgZGVsZXRlIGxpZmVjeWNsZU1hcFtyZXF1ZXN0SWRdO1xuICAgIH0gZWxzZSBpZiAoaXNSZWplY3RlZFRodW5rKGFjdGlvbikpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICByZWplY3RlZFdpdGhWYWx1ZSxcbiAgICAgICAgYmFzZVF1ZXJ5TWV0YVxuICAgICAgfSA9IGFjdGlvbi5tZXRhO1xuICAgICAgbGlmZWN5Y2xlTWFwW3JlcXVlc3RJZF0/LnJlamVjdCh7XG4gICAgICAgIGVycm9yOiBhY3Rpb24ucGF5bG9hZCA/PyBhY3Rpb24uZXJyb3IsXG4gICAgICAgIGlzVW5oYW5kbGVkRXJyb3I6ICFyZWplY3RlZFdpdGhWYWx1ZSxcbiAgICAgICAgbWV0YTogYmFzZVF1ZXJ5TWV0YVxuICAgICAgfSk7XG4gICAgICBkZWxldGUgbGlmZWN5Y2xlTWFwW3JlcXVlc3RJZF07XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGFuZGxlcjtcbn07XG5cbi8vIHNyYy9xdWVyeS9jb3JlL2J1aWxkTWlkZGxld2FyZS9kZXZNaWRkbGV3YXJlLnRzXG52YXIgYnVpbGREZXZDaGVja0hhbmRsZXIgPSAoe1xuICBhcGksXG4gIGNvbnRleHQ6IHtcbiAgICBhcGlVaWRcbiAgfSxcbiAgcmVkdWNlclBhdGhcbn0pID0+IHtcbiAgcmV0dXJuIChhY3Rpb24sIG13QXBpKSA9PiB7XG4gICAgaWYgKGFwaS51dGlsLnJlc2V0QXBpU3RhdGUubWF0Y2goYWN0aW9uKSkge1xuICAgICAgbXdBcGkuZGlzcGF0Y2goYXBpLmludGVybmFsQWN0aW9ucy5taWRkbGV3YXJlUmVnaXN0ZXJlZChhcGlVaWQpKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgIGlmIChhcGkuaW50ZXJuYWxBY3Rpb25zLm1pZGRsZXdhcmVSZWdpc3RlcmVkLm1hdGNoKGFjdGlvbikgJiYgYWN0aW9uLnBheWxvYWQgPT09IGFwaVVpZCAmJiBtd0FwaS5nZXRTdGF0ZSgpW3JlZHVjZXJQYXRoXT8uY29uZmlnPy5taWRkbGV3YXJlUmVnaXN0ZXJlZCA9PT0gXCJjb25mbGljdFwiKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgVGhlcmUgaXMgYSBtaXNtYXRjaCBiZXR3ZWVuIHNsaWNlIGFuZCBtaWRkbGV3YXJlIGZvciB0aGUgcmVkdWNlclBhdGggXCIke3JlZHVjZXJQYXRofVwiLlxuWW91IGNhbiBvbmx5IGhhdmUgb25lIGFwaSBwZXIgcmVkdWNlciBwYXRoLCB0aGlzIHdpbGwgbGVhZCB0byBjcmFzaGVzIGluIHZhcmlvdXMgc2l0dWF0aW9ucyEke3JlZHVjZXJQYXRoID09PSBcImFwaVwiID8gYFxuSWYgeW91IGhhdmUgbXVsdGlwbGUgYXBpcywgeW91ICpoYXZlKiB0byBzcGVjaWZ5IHRoZSByZWR1Y2VyUGF0aCBvcHRpb24gd2hlbiB1c2luZyBjcmVhdGVBcGkhYCA6IFwiXCJ9YCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuLy8gc3JjL3F1ZXJ5L2NvcmUvYnVpbGRNaWRkbGV3YXJlL2JhdGNoQWN0aW9ucy50c1xuaW1wb3J0IHsgcHJvZHVjZVdpdGhQYXRjaGVzIGFzIHByb2R1Y2VXaXRoUGF0Y2hlczIgfSBmcm9tIFwiaW1tZXJcIjtcbnZhciBidWlsZEJhdGNoZWRBY3Rpb25zSGFuZGxlciA9ICh7XG4gIGFwaSxcbiAgcXVlcnlUaHVuayxcbiAgaW50ZXJuYWxTdGF0ZVxufSkgPT4ge1xuICBjb25zdCBzdWJzY3JpcHRpb25zUHJlZml4ID0gYCR7YXBpLnJlZHVjZXJQYXRofS9zdWJzY3JpcHRpb25zYDtcbiAgbGV0IHByZXZpb3VzU3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gIGxldCB1cGRhdGVTeW5jVGltZXIgPSBudWxsO1xuICBjb25zdCB7XG4gICAgdXBkYXRlU3Vic2NyaXB0aW9uT3B0aW9ucyxcbiAgICB1bnN1YnNjcmliZVF1ZXJ5UmVzdWx0XG4gIH0gPSBhcGkuaW50ZXJuYWxBY3Rpb25zO1xuICBjb25zdCBhY3R1YWxseU11dGF0ZVN1YnNjcmlwdGlvbnMgPSAobXV0YWJsZVN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBpZiAodXBkYXRlU3Vic2NyaXB0aW9uT3B0aW9ucy5tYXRjaChhY3Rpb24pKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHF1ZXJ5Q2FjaGVLZXksXG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgfSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgaWYgKG11dGFibGVTdGF0ZT8uW3F1ZXJ5Q2FjaGVLZXldPy5bcmVxdWVzdElkXSkge1xuICAgICAgICBtdXRhYmxlU3RhdGVbcXVlcnlDYWNoZUtleV1bcmVxdWVzdElkXSA9IG9wdGlvbnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHVuc3Vic2NyaWJlUXVlcnlSZXN1bHQubWF0Y2goYWN0aW9uKSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBxdWVyeUNhY2hlS2V5LFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIGlmIChtdXRhYmxlU3RhdGVbcXVlcnlDYWNoZUtleV0pIHtcbiAgICAgICAgZGVsZXRlIG11dGFibGVTdGF0ZVtxdWVyeUNhY2hlS2V5XVtyZXF1ZXN0SWRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChhcGkuaW50ZXJuYWxBY3Rpb25zLnJlbW92ZVF1ZXJ5UmVzdWx0Lm1hdGNoKGFjdGlvbikpIHtcbiAgICAgIGRlbGV0ZSBtdXRhYmxlU3RhdGVbYWN0aW9uLnBheWxvYWQucXVlcnlDYWNoZUtleV07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHF1ZXJ5VGh1bmsucGVuZGluZy5tYXRjaChhY3Rpb24pKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICBhcmcsXG4gICAgICAgICAgcmVxdWVzdElkXG4gICAgICAgIH1cbiAgICAgIH0gPSBhY3Rpb247XG4gICAgICBjb25zdCBzdWJzdGF0ZSA9IG11dGFibGVTdGF0ZVthcmcucXVlcnlDYWNoZUtleV0gPz89IHt9O1xuICAgICAgc3Vic3RhdGVbYCR7cmVxdWVzdElkfV9ydW5uaW5nYF0gPSB7fTtcbiAgICAgIGlmIChhcmcuc3Vic2NyaWJlKSB7XG4gICAgICAgIHN1YnN0YXRlW3JlcXVlc3RJZF0gPSBhcmcuc3Vic2NyaXB0aW9uT3B0aW9ucyA/PyBzdWJzdGF0ZVtyZXF1ZXN0SWRdID8/IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCBtdXRhdGVkID0gZmFsc2U7XG4gICAgaWYgKHF1ZXJ5VGh1bmsuZnVsZmlsbGVkLm1hdGNoKGFjdGlvbikgfHwgcXVlcnlUaHVuay5yZWplY3RlZC5tYXRjaChhY3Rpb24pKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IG11dGFibGVTdGF0ZVthY3Rpb24ubWV0YS5hcmcucXVlcnlDYWNoZUtleV0gfHwge307XG4gICAgICBjb25zdCBrZXkgPSBgJHthY3Rpb24ubWV0YS5yZXF1ZXN0SWR9X3J1bm5pbmdgO1xuICAgICAgbXV0YXRlZCB8fD0gISFzdGF0ZVtrZXldO1xuICAgICAgZGVsZXRlIHN0YXRlW2tleV07XG4gICAgfVxuICAgIGlmIChxdWVyeVRodW5rLnJlamVjdGVkLm1hdGNoKGFjdGlvbikpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgIGNvbmRpdGlvbixcbiAgICAgICAgICBhcmcsXG4gICAgICAgICAgcmVxdWVzdElkXG4gICAgICAgIH1cbiAgICAgIH0gPSBhY3Rpb247XG4gICAgICBpZiAoY29uZGl0aW9uICYmIGFyZy5zdWJzY3JpYmUpIHtcbiAgICAgICAgY29uc3Qgc3Vic3RhdGUgPSBtdXRhYmxlU3RhdGVbYXJnLnF1ZXJ5Q2FjaGVLZXldID8/PSB7fTtcbiAgICAgICAgc3Vic3RhdGVbcmVxdWVzdElkXSA9IGFyZy5zdWJzY3JpcHRpb25PcHRpb25zID8/IHN1YnN0YXRlW3JlcXVlc3RJZF0gPz8ge307XG4gICAgICAgIG11dGF0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbXV0YXRlZDtcbiAgfTtcbiAgY29uc3QgZ2V0U3Vic2NyaXB0aW9ucyA9ICgpID0+IGludGVybmFsU3RhdGUuY3VycmVudFN1YnNjcmlwdGlvbnM7XG4gIGNvbnN0IGdldFN1YnNjcmlwdGlvbkNvdW50ID0gKHF1ZXJ5Q2FjaGVLZXkpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gZ2V0U3Vic2NyaXB0aW9ucygpO1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbnNGb3JRdWVyeUFyZyA9IHN1YnNjcmlwdGlvbnNbcXVlcnlDYWNoZUtleV0gPz8ge307XG4gICAgcmV0dXJuIGNvdW50T2JqZWN0S2V5cyhzdWJzY3JpcHRpb25zRm9yUXVlcnlBcmcpO1xuICB9O1xuICBjb25zdCBpc1JlcXVlc3RTdWJzY3JpYmVkID0gKHF1ZXJ5Q2FjaGVLZXksIHJlcXVlc3RJZCkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSBnZXRTdWJzY3JpcHRpb25zKCk7XG4gICAgcmV0dXJuICEhc3Vic2NyaXB0aW9ucz8uW3F1ZXJ5Q2FjaGVLZXldPy5bcmVxdWVzdElkXTtcbiAgfTtcbiAgY29uc3Qgc3Vic2NyaXB0aW9uU2VsZWN0b3JzID0ge1xuICAgIGdldFN1YnNjcmlwdGlvbnMsXG4gICAgZ2V0U3Vic2NyaXB0aW9uQ291bnQsXG4gICAgaXNSZXF1ZXN0U3Vic2NyaWJlZFxuICB9O1xuICByZXR1cm4gKGFjdGlvbiwgbXdBcGkpID0+IHtcbiAgICBpZiAoIXByZXZpb3VzU3Vic2NyaXB0aW9ucykge1xuICAgICAgcHJldmlvdXNTdWJzY3JpcHRpb25zID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShpbnRlcm5hbFN0YXRlLmN1cnJlbnRTdWJzY3JpcHRpb25zKSk7XG4gICAgfVxuICAgIGlmIChhcGkudXRpbC5yZXNldEFwaVN0YXRlLm1hdGNoKGFjdGlvbikpIHtcbiAgICAgIHByZXZpb3VzU3Vic2NyaXB0aW9ucyA9IGludGVybmFsU3RhdGUuY3VycmVudFN1YnNjcmlwdGlvbnMgPSB7fTtcbiAgICAgIHVwZGF0ZVN5bmNUaW1lciA9IG51bGw7XG4gICAgICByZXR1cm4gW3RydWUsIGZhbHNlXTtcbiAgICB9XG4gICAgaWYgKGFwaS5pbnRlcm5hbEFjdGlvbnMuaW50ZXJuYWxfZ2V0UlRLUVN1YnNjcmlwdGlvbnMubWF0Y2goYWN0aW9uKSkge1xuICAgICAgcmV0dXJuIFtmYWxzZSwgc3Vic2NyaXB0aW9uU2VsZWN0b3JzXTtcbiAgICB9XG4gICAgY29uc3QgZGlkTXV0YXRlID0gYWN0dWFsbHlNdXRhdGVTdWJzY3JpcHRpb25zKGludGVybmFsU3RhdGUuY3VycmVudFN1YnNjcmlwdGlvbnMsIGFjdGlvbik7XG4gICAgbGV0IGFjdGlvblNob3VsZENvbnRpbnVlID0gdHJ1ZTtcbiAgICBpZiAoZGlkTXV0YXRlKSB7XG4gICAgICBpZiAoIXVwZGF0ZVN5bmNUaW1lcikge1xuICAgICAgICB1cGRhdGVTeW5jVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBjb25zdCBuZXdTdWJzY3JpcHRpb25zID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShpbnRlcm5hbFN0YXRlLmN1cnJlbnRTdWJzY3JpcHRpb25zKSk7XG4gICAgICAgICAgY29uc3QgWywgcGF0Y2hlc10gPSBwcm9kdWNlV2l0aFBhdGNoZXMyKHByZXZpb3VzU3Vic2NyaXB0aW9ucywgKCkgPT4gbmV3U3Vic2NyaXB0aW9ucyk7XG4gICAgICAgICAgbXdBcGkubmV4dChhcGkuaW50ZXJuYWxBY3Rpb25zLnN1YnNjcmlwdGlvbnNVcGRhdGVkKHBhdGNoZXMpKTtcbiAgICAgICAgICBwcmV2aW91c1N1YnNjcmlwdGlvbnMgPSBuZXdTdWJzY3JpcHRpb25zO1xuICAgICAgICAgIHVwZGF0ZVN5bmNUaW1lciA9IG51bGw7XG4gICAgICAgIH0sIDUwMCk7XG4gICAgICB9XG4gICAgICBjb25zdCBpc1N1YnNjcmlwdGlvblNsaWNlQWN0aW9uID0gdHlwZW9mIGFjdGlvbi50eXBlID09IFwic3RyaW5nXCIgJiYgISFhY3Rpb24udHlwZS5zdGFydHNXaXRoKHN1YnNjcmlwdGlvbnNQcmVmaXgpO1xuICAgICAgY29uc3QgaXNBZGRpdGlvbmFsU3Vic2NyaXB0aW9uQWN0aW9uID0gcXVlcnlUaHVuay5yZWplY3RlZC5tYXRjaChhY3Rpb24pICYmIGFjdGlvbi5tZXRhLmNvbmRpdGlvbiAmJiAhIWFjdGlvbi5tZXRhLmFyZy5zdWJzY3JpYmU7XG4gICAgICBhY3Rpb25TaG91bGRDb250aW51ZSA9ICFpc1N1YnNjcmlwdGlvblNsaWNlQWN0aW9uICYmICFpc0FkZGl0aW9uYWxTdWJzY3JpcHRpb25BY3Rpb247XG4gICAgfVxuICAgIHJldHVybiBbYWN0aW9uU2hvdWxkQ29udGludWUsIGZhbHNlXTtcbiAgfTtcbn07XG5cbi8vIHNyYy9xdWVyeS9jb3JlL2J1aWxkTWlkZGxld2FyZS9pbmRleC50c1xuZnVuY3Rpb24gYnVpbGRNaWRkbGV3YXJlKGlucHV0KSB7XG4gIGNvbnN0IHtcbiAgICByZWR1Y2VyUGF0aCxcbiAgICBxdWVyeVRodW5rLFxuICAgIGFwaSxcbiAgICBjb250ZXh0XG4gIH0gPSBpbnB1dDtcbiAgY29uc3Qge1xuICAgIGFwaVVpZFxuICB9ID0gY29udGV4dDtcbiAgY29uc3QgYWN0aW9ucyA9IHtcbiAgICBpbnZhbGlkYXRlVGFnczogY3JlYXRlQWN0aW9uKGAke3JlZHVjZXJQYXRofS9pbnZhbGlkYXRlVGFnc2ApXG4gIH07XG4gIGNvbnN0IGlzVGhpc0FwaVNsaWNlQWN0aW9uID0gKGFjdGlvbikgPT4gYWN0aW9uLnR5cGUuc3RhcnRzV2l0aChgJHtyZWR1Y2VyUGF0aH0vYCk7XG4gIGNvbnN0IGhhbmRsZXJCdWlsZGVycyA9IFtidWlsZERldkNoZWNrSGFuZGxlciwgYnVpbGRDYWNoZUNvbGxlY3Rpb25IYW5kbGVyLCBidWlsZEludmFsaWRhdGlvbkJ5VGFnc0hhbmRsZXIsIGJ1aWxkUG9sbGluZ0hhbmRsZXIsIGJ1aWxkQ2FjaGVMaWZlY3ljbGVIYW5kbGVyLCBidWlsZFF1ZXJ5TGlmZWN5Y2xlSGFuZGxlcl07XG4gIGNvbnN0IG1pZGRsZXdhcmUgPSAobXdBcGkpID0+IHtcbiAgICBsZXQgaW5pdGlhbGl6ZWQyID0gZmFsc2U7XG4gICAgbGV0IGludGVybmFsU3RhdGUgPSB7XG4gICAgICBjdXJyZW50U3Vic2NyaXB0aW9uczoge31cbiAgICB9O1xuICAgIGNvbnN0IGJ1aWxkZXJBcmdzID0ge1xuICAgICAgLi4uaW5wdXQsXG4gICAgICBpbnRlcm5hbFN0YXRlLFxuICAgICAgcmVmZXRjaFF1ZXJ5LFxuICAgICAgaXNUaGlzQXBpU2xpY2VBY3Rpb25cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZXJzID0gaGFuZGxlckJ1aWxkZXJzLm1hcCgoYnVpbGQpID0+IGJ1aWxkKGJ1aWxkZXJBcmdzKSk7XG4gICAgY29uc3QgYmF0Y2hlZEFjdGlvbnNIYW5kbGVyID0gYnVpbGRCYXRjaGVkQWN0aW9uc0hhbmRsZXIoYnVpbGRlckFyZ3MpO1xuICAgIGNvbnN0IHdpbmRvd0V2ZW50c0hhbmRsZXIgPSBidWlsZFdpbmRvd0V2ZW50SGFuZGxlcihidWlsZGVyQXJncyk7XG4gICAgcmV0dXJuIChuZXh0KSA9PiB7XG4gICAgICByZXR1cm4gKGFjdGlvbikgPT4ge1xuICAgICAgICBpZiAoIWlzQWN0aW9uKGFjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW5pdGlhbGl6ZWQyKSB7XG4gICAgICAgICAgaW5pdGlhbGl6ZWQyID0gdHJ1ZTtcbiAgICAgICAgICBtd0FwaS5kaXNwYXRjaChhcGkuaW50ZXJuYWxBY3Rpb25zLm1pZGRsZXdhcmVSZWdpc3RlcmVkKGFwaVVpZCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG13QXBpV2l0aE5leHQgPSB7XG4gICAgICAgICAgLi4ubXdBcGksXG4gICAgICAgICAgbmV4dFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdGF0ZUJlZm9yZSA9IG13QXBpLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IFthY3Rpb25TaG91bGRDb250aW51ZSwgaW50ZXJuYWxQcm9iZVJlc3VsdF0gPSBiYXRjaGVkQWN0aW9uc0hhbmRsZXIoYWN0aW9uLCBtd0FwaVdpdGhOZXh0LCBzdGF0ZUJlZm9yZSk7XG4gICAgICAgIGxldCByZXM7XG4gICAgICAgIGlmIChhY3Rpb25TaG91bGRDb250aW51ZSkge1xuICAgICAgICAgIHJlcyA9IG5leHQoYWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSBpbnRlcm5hbFByb2JlUmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghIW13QXBpLmdldFN0YXRlKClbcmVkdWNlclBhdGhdKSB7XG4gICAgICAgICAgd2luZG93RXZlbnRzSGFuZGxlcihhY3Rpb24sIG13QXBpV2l0aE5leHQsIHN0YXRlQmVmb3JlKTtcbiAgICAgICAgICBpZiAoaXNUaGlzQXBpU2xpY2VBY3Rpb24oYWN0aW9uKSB8fCBjb250ZXh0Lmhhc1JlaHlkcmF0aW9uSW5mbyhhY3Rpb24pKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBoYW5kbGVyIG9mIGhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgIGhhbmRsZXIoYWN0aW9uLCBtd0FwaVdpdGhOZXh0LCBzdGF0ZUJlZm9yZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG4gIHJldHVybiB7XG4gICAgbWlkZGxld2FyZSxcbiAgICBhY3Rpb25zXG4gIH07XG4gIGZ1bmN0aW9uIHJlZmV0Y2hRdWVyeShxdWVyeVN1YlN0YXRlLCBxdWVyeUNhY2hlS2V5LCBvdmVycmlkZSA9IHt9KSB7XG4gICAgcmV0dXJuIHF1ZXJ5VGh1bmsoe1xuICAgICAgdHlwZTogXCJxdWVyeVwiLFxuICAgICAgZW5kcG9pbnROYW1lOiBxdWVyeVN1YlN0YXRlLmVuZHBvaW50TmFtZSxcbiAgICAgIG9yaWdpbmFsQXJnczogcXVlcnlTdWJTdGF0ZS5vcmlnaW5hbEFyZ3MsXG4gICAgICBzdWJzY3JpYmU6IGZhbHNlLFxuICAgICAgZm9yY2VSZWZldGNoOiB0cnVlLFxuICAgICAgcXVlcnlDYWNoZUtleSxcbiAgICAgIC4uLm92ZXJyaWRlXG4gICAgfSk7XG4gIH1cbn1cblxuLy8gc3JjL3F1ZXJ5L3RzSGVscGVycy50c1xuZnVuY3Rpb24gYXNzZXJ0Q2FzdCh2KSB7XG59XG5mdW5jdGlvbiBzYWZlQXNzaWduKHRhcmdldCwgLi4uYXJncykge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih0YXJnZXQsIC4uLmFyZ3MpO1xufVxuXG4vLyBzcmMvcXVlcnkvY29yZS9tb2R1bGUudHNcbmltcG9ydCB7IGVuYWJsZVBhdGNoZXMgfSBmcm9tIFwiaW1tZXJcIjtcbnZhciBjb3JlTW9kdWxlTmFtZSA9IC8qIEBfX1BVUkVfXyAqLyBTeW1ib2woKTtcbnZhciBjb3JlTW9kdWxlID0gKHtcbiAgY3JlYXRlU2VsZWN0b3I6IGNyZWF0ZVNlbGVjdG9yMiA9IGNyZWF0ZVNlbGVjdG9yXG59ID0ge30pID0+ICh7XG4gIG5hbWU6IGNvcmVNb2R1bGVOYW1lLFxuICBpbml0KGFwaSwge1xuICAgIGJhc2VRdWVyeSxcbiAgICB0YWdUeXBlcyxcbiAgICByZWR1Y2VyUGF0aCxcbiAgICBzZXJpYWxpemVRdWVyeUFyZ3MsXG4gICAga2VlcFVudXNlZERhdGFGb3IsXG4gICAgcmVmZXRjaE9uTW91bnRPckFyZ0NoYW5nZSxcbiAgICByZWZldGNoT25Gb2N1cyxcbiAgICByZWZldGNoT25SZWNvbm5lY3QsXG4gICAgaW52YWxpZGF0aW9uQmVoYXZpb3JcbiAgfSwgY29udGV4dCkge1xuICAgIGVuYWJsZVBhdGNoZXMoKTtcbiAgICBhc3NlcnRDYXN0KHNlcmlhbGl6ZVF1ZXJ5QXJncyk7XG4gICAgY29uc3QgYXNzZXJ0VGFnVHlwZSA9ICh0YWcpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiKSB7XG4gICAgICAgIGlmICghdGFnVHlwZXMuaW5jbHVkZXModGFnLnR5cGUpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihgVGFnIHR5cGUgJyR7dGFnLnR5cGV9JyB3YXMgdXNlZCwgYnV0IG5vdCBzcGVjaWZpZWQgaW4gXFxgdGFnVHlwZXNcXGAhYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0YWc7XG4gICAgfTtcbiAgICBPYmplY3QuYXNzaWduKGFwaSwge1xuICAgICAgcmVkdWNlclBhdGgsXG4gICAgICBlbmRwb2ludHM6IHt9LFxuICAgICAgaW50ZXJuYWxBY3Rpb25zOiB7XG4gICAgICAgIG9uT25saW5lLFxuICAgICAgICBvbk9mZmxpbmUsXG4gICAgICAgIG9uRm9jdXMsXG4gICAgICAgIG9uRm9jdXNMb3N0XG4gICAgICB9LFxuICAgICAgdXRpbDoge31cbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBxdWVyeVRodW5rLFxuICAgICAgbXV0YXRpb25UaHVuayxcbiAgICAgIHBhdGNoUXVlcnlEYXRhLFxuICAgICAgdXBkYXRlUXVlcnlEYXRhLFxuICAgICAgdXBzZXJ0UXVlcnlEYXRhLFxuICAgICAgcHJlZmV0Y2gsXG4gICAgICBidWlsZE1hdGNoVGh1bmtBY3Rpb25zXG4gICAgfSA9IGJ1aWxkVGh1bmtzKHtcbiAgICAgIGJhc2VRdWVyeSxcbiAgICAgIHJlZHVjZXJQYXRoLFxuICAgICAgY29udGV4dCxcbiAgICAgIGFwaSxcbiAgICAgIHNlcmlhbGl6ZVF1ZXJ5QXJncyxcbiAgICAgIGFzc2VydFRhZ1R5cGVcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICByZWR1Y2VyLFxuICAgICAgYWN0aW9uczogc2xpY2VBY3Rpb25zXG4gICAgfSA9IGJ1aWxkU2xpY2Uoe1xuICAgICAgY29udGV4dCxcbiAgICAgIHF1ZXJ5VGh1bmssXG4gICAgICBtdXRhdGlvblRodW5rLFxuICAgICAgcmVkdWNlclBhdGgsXG4gICAgICBhc3NlcnRUYWdUeXBlLFxuICAgICAgY29uZmlnOiB7XG4gICAgICAgIHJlZmV0Y2hPbkZvY3VzLFxuICAgICAgICByZWZldGNoT25SZWNvbm5lY3QsXG4gICAgICAgIHJlZmV0Y2hPbk1vdW50T3JBcmdDaGFuZ2UsXG4gICAgICAgIGtlZXBVbnVzZWREYXRhRm9yLFxuICAgICAgICByZWR1Y2VyUGF0aCxcbiAgICAgICAgaW52YWxpZGF0aW9uQmVoYXZpb3JcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzYWZlQXNzaWduKGFwaS51dGlsLCB7XG4gICAgICBwYXRjaFF1ZXJ5RGF0YSxcbiAgICAgIHVwZGF0ZVF1ZXJ5RGF0YSxcbiAgICAgIHVwc2VydFF1ZXJ5RGF0YSxcbiAgICAgIHByZWZldGNoLFxuICAgICAgcmVzZXRBcGlTdGF0ZTogc2xpY2VBY3Rpb25zLnJlc2V0QXBpU3RhdGVcbiAgICB9KTtcbiAgICBzYWZlQXNzaWduKGFwaS5pbnRlcm5hbEFjdGlvbnMsIHNsaWNlQWN0aW9ucyk7XG4gICAgY29uc3Qge1xuICAgICAgbWlkZGxld2FyZSxcbiAgICAgIGFjdGlvbnM6IG1pZGRsZXdhcmVBY3Rpb25zXG4gICAgfSA9IGJ1aWxkTWlkZGxld2FyZSh7XG4gICAgICByZWR1Y2VyUGF0aCxcbiAgICAgIGNvbnRleHQsXG4gICAgICBxdWVyeVRodW5rLFxuICAgICAgbXV0YXRpb25UaHVuayxcbiAgICAgIGFwaSxcbiAgICAgIGFzc2VydFRhZ1R5cGVcbiAgICB9KTtcbiAgICBzYWZlQXNzaWduKGFwaS51dGlsLCBtaWRkbGV3YXJlQWN0aW9ucyk7XG4gICAgc2FmZUFzc2lnbihhcGksIHtcbiAgICAgIHJlZHVjZXIsXG4gICAgICBtaWRkbGV3YXJlXG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgYnVpbGRRdWVyeVNlbGVjdG9yLFxuICAgICAgYnVpbGRNdXRhdGlvblNlbGVjdG9yLFxuICAgICAgc2VsZWN0SW52YWxpZGF0ZWRCeSxcbiAgICAgIHNlbGVjdENhY2hlZEFyZ3NGb3JRdWVyeVxuICAgIH0gPSBidWlsZFNlbGVjdG9ycyh7XG4gICAgICBzZXJpYWxpemVRdWVyeUFyZ3MsXG4gICAgICByZWR1Y2VyUGF0aCxcbiAgICAgIGNyZWF0ZVNlbGVjdG9yOiBjcmVhdGVTZWxlY3RvcjJcbiAgICB9KTtcbiAgICBzYWZlQXNzaWduKGFwaS51dGlsLCB7XG4gICAgICBzZWxlY3RJbnZhbGlkYXRlZEJ5LFxuICAgICAgc2VsZWN0Q2FjaGVkQXJnc0ZvclF1ZXJ5XG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgYnVpbGRJbml0aWF0ZVF1ZXJ5LFxuICAgICAgYnVpbGRJbml0aWF0ZU11dGF0aW9uLFxuICAgICAgZ2V0UnVubmluZ011dGF0aW9uVGh1bmssXG4gICAgICBnZXRSdW5uaW5nTXV0YXRpb25zVGh1bmssXG4gICAgICBnZXRSdW5uaW5nUXVlcmllc1RodW5rLFxuICAgICAgZ2V0UnVubmluZ1F1ZXJ5VGh1bmtcbiAgICB9ID0gYnVpbGRJbml0aWF0ZSh7XG4gICAgICBxdWVyeVRodW5rLFxuICAgICAgbXV0YXRpb25UaHVuayxcbiAgICAgIGFwaSxcbiAgICAgIHNlcmlhbGl6ZVF1ZXJ5QXJncyxcbiAgICAgIGNvbnRleHRcbiAgICB9KTtcbiAgICBzYWZlQXNzaWduKGFwaS51dGlsLCB7XG4gICAgICBnZXRSdW5uaW5nTXV0YXRpb25UaHVuayxcbiAgICAgIGdldFJ1bm5pbmdNdXRhdGlvbnNUaHVuayxcbiAgICAgIGdldFJ1bm5pbmdRdWVyeVRodW5rLFxuICAgICAgZ2V0UnVubmluZ1F1ZXJpZXNUaHVua1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBjb3JlTW9kdWxlTmFtZSxcbiAgICAgIGluamVjdEVuZHBvaW50KGVuZHBvaW50TmFtZSwgZGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBhbnlBcGkgPSBhcGk7XG4gICAgICAgIGFueUFwaS5lbmRwb2ludHNbZW5kcG9pbnROYW1lXSA/Pz0ge307XG4gICAgICAgIGlmIChpc1F1ZXJ5RGVmaW5pdGlvbihkZWZpbml0aW9uKSkge1xuICAgICAgICAgIHNhZmVBc3NpZ24oYW55QXBpLmVuZHBvaW50c1tlbmRwb2ludE5hbWVdLCB7XG4gICAgICAgICAgICBuYW1lOiBlbmRwb2ludE5hbWUsXG4gICAgICAgICAgICBzZWxlY3Q6IGJ1aWxkUXVlcnlTZWxlY3RvcihlbmRwb2ludE5hbWUsIGRlZmluaXRpb24pLFxuICAgICAgICAgICAgaW5pdGlhdGU6IGJ1aWxkSW5pdGlhdGVRdWVyeShlbmRwb2ludE5hbWUsIGRlZmluaXRpb24pXG4gICAgICAgICAgfSwgYnVpbGRNYXRjaFRodW5rQWN0aW9ucyhxdWVyeVRodW5rLCBlbmRwb2ludE5hbWUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc011dGF0aW9uRGVmaW5pdGlvbihkZWZpbml0aW9uKSkge1xuICAgICAgICAgIHNhZmVBc3NpZ24oYW55QXBpLmVuZHBvaW50c1tlbmRwb2ludE5hbWVdLCB7XG4gICAgICAgICAgICBuYW1lOiBlbmRwb2ludE5hbWUsXG4gICAgICAgICAgICBzZWxlY3Q6IGJ1aWxkTXV0YXRpb25TZWxlY3RvcigpLFxuICAgICAgICAgICAgaW5pdGlhdGU6IGJ1aWxkSW5pdGlhdGVNdXRhdGlvbihlbmRwb2ludE5hbWUpXG4gICAgICAgICAgfSwgYnVpbGRNYXRjaFRodW5rQWN0aW9ucyhtdXRhdGlvblRodW5rLCBlbmRwb2ludE5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuXG4vLyBzcmMvcXVlcnkvY29yZS9pbmRleC50c1xudmFyIGNyZWF0ZUFwaSA9IC8qIEBfX1BVUkVfXyAqLyBidWlsZENyZWF0ZUFwaShjb3JlTW9kdWxlKCkpO1xuZXhwb3J0IHtcbiAgUXVlcnlTdGF0dXMsXG4gIGJ1aWxkQ3JlYXRlQXBpLFxuICBjb3B5V2l0aFN0cnVjdHVyYWxTaGFyaW5nLFxuICBjb3JlTW9kdWxlLFxuICBjb3JlTW9kdWxlTmFtZSxcbiAgY3JlYXRlQXBpLFxuICBkZWZhdWx0U2VyaWFsaXplUXVlcnlBcmdzLFxuICBmYWtlQmFzZVF1ZXJ5LFxuICBmZXRjaEJhc2VRdWVyeSxcbiAgcmV0cnksXG4gIHNldHVwTGlzdGVuZXJzLFxuICBza2lwVG9rZW5cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydGstcXVlcnkubW9kZXJuLm1qcy5tYXAiXSwibmFtZXMiOlsiUXVlcnlTdGF0dXMiLCJRdWVyeVN0YXR1czIiLCJnZXRSZXF1ZXN0U3RhdHVzRmxhZ3MiLCJzdGF0dXMiLCJpc1VuaW5pdGlhbGl6ZWQiLCJpc0xvYWRpbmciLCJpc1N1Y2Nlc3MiLCJpc0Vycm9yIiwiaXNBYnNvbHV0ZVVybCIsInVybCIsIlJlZ0V4cCIsInRlc3QiLCJ3aXRob3V0VHJhaWxpbmdTbGFzaCIsInJlcGxhY2UiLCJ3aXRob3V0TGVhZGluZ1NsYXNoIiwiam9pblVybHMiLCJiYXNlIiwiZGVsaW1pdGVyIiwiZW5kc1dpdGgiLCJzdGFydHNXaXRoIiwiZmxhdHRlbiIsImFyciIsImNvbmNhdCIsImlzT25saW5lIiwibmF2aWdhdG9yIiwib25MaW5lIiwiaXNEb2N1bWVudFZpc2libGUiLCJkb2N1bWVudCIsInZpc2liaWxpdHlTdGF0ZSIsImNyZWF0ZUFjdGlvbiIsImNyZWF0ZVNsaWNlIiwiY3JlYXRlU2VsZWN0b3IiLCJjcmVhdGVBc3luY1RodW5rIiwiY29tYmluZVJlZHVjZXJzIiwiY3JlYXRlTmV4dFN0YXRlIiwiaXNBbnlPZiIsImlzQWxsT2YiLCJpc0FjdGlvbiIsImlzUGVuZGluZyIsImlzUmVqZWN0ZWQiLCJpc0Z1bGZpbGxlZCIsImlzUmVqZWN0ZWRXaXRoVmFsdWUiLCJpc0FzeW5jVGh1bmtBY3Rpb24iLCJwcmVwYXJlQXV0b0JhdGNoZWQiLCJTSE9VTERfQVVUT0JBVENIIiwiaXNQbGFpbk9iamVjdCIsIm5hbm9pZCIsImlzUGxhaW5PYmplY3QyIiwiY29weVdpdGhTdHJ1Y3R1cmFsU2hhcmluZyIsIm9sZE9iaiIsIm5ld09iaiIsIkFycmF5IiwiaXNBcnJheSIsIm5ld0tleXMiLCJPYmplY3QiLCJrZXlzIiwib2xkS2V5cyIsImlzU2FtZU9iamVjdCIsImxlbmd0aCIsIm1lcmdlT2JqIiwia2V5IiwiZGVmYXVsdEZldGNoRm4iLCJhcmdzIiwiZmV0Y2giLCJkZWZhdWx0VmFsaWRhdGVTdGF0dXMiLCJyZXNwb25zZSIsImRlZmF1bHRJc0pzb25Db250ZW50VHlwZSIsImhlYWRlcnMiLCJnZXQiLCJzdHJpcFVuZGVmaW5lZCIsIm9iaiIsImNvcHkiLCJrIiwidiIsImVudHJpZXMiLCJmZXRjaEJhc2VRdWVyeSIsImJhc2VVcmwiLCJwcmVwYXJlSGVhZGVycyIsIngiLCJmZXRjaEZuIiwicGFyYW1zU2VyaWFsaXplciIsImlzSnNvbkNvbnRlbnRUeXBlIiwianNvbkNvbnRlbnRUeXBlIiwianNvblJlcGxhY2VyIiwidGltZW91dCIsImRlZmF1bHRUaW1lb3V0IiwicmVzcG9uc2VIYW5kbGVyIiwiZ2xvYmFsUmVzcG9uc2VIYW5kbGVyIiwidmFsaWRhdGVTdGF0dXMiLCJnbG9iYWxWYWxpZGF0ZVN0YXR1cyIsImJhc2VGZXRjaE9wdGlvbnMiLCJjb25zb2xlIiwid2FybiIsImFyZyIsImFwaSIsInNpZ25hbCIsImdldFN0YXRlIiwiZXh0cmEiLCJlbmRwb2ludCIsImZvcmNlZCIsInR5cGUiLCJtZXRhIiwiSGVhZGVycyIsInBhcmFtcyIsInJlc3QiLCJjb25maWciLCJpc0pzb25pZmlhYmxlIiwiYm9keSIsInRvSlNPTiIsImhhcyIsInNldCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkaXZpZGVyIiwiaW5kZXhPZiIsInF1ZXJ5IiwiVVJMU2VhcmNoUGFyYW1zIiwicmVxdWVzdCIsIlJlcXVlc3QiLCJyZXF1ZXN0Q2xvbmUiLCJ0aW1lZE91dCIsInRpbWVvdXRJZCIsInNldFRpbWVvdXQiLCJhYm9ydCIsImUiLCJlcnJvciIsIlN0cmluZyIsImNsZWFyVGltZW91dCIsInJlc3BvbnNlQ2xvbmUiLCJjbG9uZSIsInJlc3VsdERhdGEiLCJyZXNwb25zZVRleHQiLCJoYW5kbGVSZXNwb25zZUVycm9yIiwiUHJvbWlzZSIsImFsbCIsImhhbmRsZVJlc3BvbnNlIiwidGhlbiIsInIiLCJ0ZXh0Iiwib3JpZ2luYWxTdGF0dXMiLCJkYXRhIiwicGFyc2UiLCJIYW5kbGVkRXJyb3IiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiZGVmYXVsdEJhY2tvZmYiLCJhdHRlbXB0IiwibWF4UmV0cmllcyIsImF0dGVtcHRzIiwiTWF0aCIsIm1pbiIsInJhbmRvbSIsInJlc29sdmUiLCJyZXMiLCJmYWlsIiwiYXNzaWduIiwidGhyb3dJbW1lZGlhdGVseSIsIkVNUFRZX09QVElPTlMiLCJyZXRyeVdpdGhCYWNrb2ZmIiwiYmFzZVF1ZXJ5IiwiZGVmYXVsdE9wdGlvbnMiLCJleHRyYU9wdGlvbnMiLCJwb3NzaWJsZU1heFJldHJpZXMiLCJmaWx0ZXIiLCJzbGljZSIsImRlZmF1bHRSZXRyeUNvbmRpdGlvbiIsIl8iLCJfXyIsIm9wdGlvbnMiLCJiYWNrb2ZmIiwicmV0cnlDb25kaXRpb24iLCJyZXRyeTIiLCJyZXN1bHQiLCJiYXNlUXVlcnlBcGkiLCJyZXRyeSIsIm9uRm9jdXMiLCJvbkZvY3VzTG9zdCIsIm9uT25saW5lIiwib25PZmZsaW5lIiwiaW5pdGlhbGl6ZWQiLCJzZXR1cExpc3RlbmVycyIsImRpc3BhdGNoIiwiY3VzdG9tSGFuZGxlciIsImRlZmF1bHRIYW5kbGVyIiwiaGFuZGxlRm9jdXMiLCJoYW5kbGVGb2N1c0xvc3QiLCJoYW5kbGVPbmxpbmUiLCJoYW5kbGVPZmZsaW5lIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ1bnN1YnNjcmliZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc1F1ZXJ5RGVmaW5pdGlvbiIsImlzTXV0YXRpb25EZWZpbml0aW9uIiwiY2FsY3VsYXRlUHJvdmlkZWRCeSIsImRlc2NyaXB0aW9uIiwicXVlcnlBcmciLCJhc3NlcnRUYWdUeXBlcyIsImlzRnVuY3Rpb24iLCJtYXAiLCJleHBhbmRUYWdEZXNjcmlwdGlvbiIsInQiLCJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwiX2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCJpc05vdE51bGxpc2giLCJjb3VudE9iamVjdEtleXMiLCJjb3VudCIsIl9rZXkiLCJhc1NhZmVQcm9taXNlIiwicHJvbWlzZSIsImZhbGxiYWNrIiwiY2F0Y2giLCJmb3JjZVF1ZXJ5Rm5TeW1ib2wiLCJTeW1ib2wiLCJpc1Vwc2VydFF1ZXJ5IiwiYnVpbGRJbml0aWF0ZSIsInNlcmlhbGl6ZVF1ZXJ5QXJncyIsInF1ZXJ5VGh1bmsiLCJtdXRhdGlvblRodW5rIiwiY29udGV4dCIsInJ1bm5pbmdRdWVyaWVzIiwiTWFwIiwicnVubmluZ011dGF0aW9ucyIsInVuc3Vic2NyaWJlUXVlcnlSZXN1bHQiLCJyZW1vdmVNdXRhdGlvblJlc3VsdCIsInVwZGF0ZVN1YnNjcmlwdGlvbk9wdGlvbnMiLCJpbnRlcm5hbEFjdGlvbnMiLCJidWlsZEluaXRpYXRlUXVlcnkiLCJidWlsZEluaXRpYXRlTXV0YXRpb24iLCJnZXRSdW5uaW5nUXVlcnlUaHVuayIsImdldFJ1bm5pbmdNdXRhdGlvblRodW5rIiwiZ2V0UnVubmluZ1F1ZXJpZXNUaHVuayIsImdldFJ1bm5pbmdNdXRhdGlvbnNUaHVuayIsImVuZHBvaW50TmFtZSIsInF1ZXJ5QXJncyIsImVuZHBvaW50RGVmaW5pdGlvbiIsImVuZHBvaW50RGVmaW5pdGlvbnMiLCJxdWVyeUNhY2hlS2V5IiwiX2VuZHBvaW50TmFtZSIsImZpeGVkQ2FjaGVLZXlPclJlcXVlc3RJZCIsInZhbHVlcyIsIm1pZGRsZXdhcmVXYXJuaW5nIiwicHJvY2VzcyIsInRyaWdnZXJlZCIsInJldHVybmVkVmFsdWUiLCJpbnRlcm5hbF9nZXRSVEtRU3Vic2NyaXB0aW9ucyIsIkVycm9yIiwicmVkdWNlclBhdGgiLCJxdWVyeUFjdGlvbiIsInN1YnNjcmliZSIsImZvcmNlUmVmZXRjaCIsInN1YnNjcmlwdGlvbk9wdGlvbnMiLCJmb3JjZVF1ZXJ5Rm4iLCJ0aHVuayIsIm9yaWdpbmFsQXJncyIsInNlbGVjdG9yIiwiZW5kcG9pbnRzIiwic2VsZWN0IiwidGh1bmtSZXN1bHQiLCJzdGF0ZUFmdGVyIiwicmVxdWVzdElkIiwic2tpcHBlZFN5bmNocm9ub3VzbHkiLCJydW5uaW5nUXVlcnkiLCJzZWxlY3RGcm9tU3RhdGUiLCJzdGF0ZVByb21pc2UiLCJ1bndyYXAiLCJyZWZldGNoIiwicnVubmluZyIsImRlbGV0ZSIsInRyYWNrIiwiZml4ZWRDYWNoZUtleSIsInJldHVyblZhbHVlUHJvbWlzZSIsInJlc2V0IiwicmV0IiwiaXNEcmFmdGFibGUiLCJwcm9kdWNlV2l0aFBhdGNoZXMiLCJkZWZhdWx0VHJhbnNmb3JtUmVzcG9uc2UiLCJiYXNlUXVlcnlSZXR1cm5WYWx1ZSIsImJ1aWxkVGh1bmtzIiwiYXNzZXJ0VGFnVHlwZSIsInBhdGNoUXVlcnlEYXRhIiwicGF0Y2hlcyIsInVwZGF0ZVByb3ZpZGVkIiwicXVlcnlSZXN1bHRQYXRjaGVkIiwibmV3VmFsdWUiLCJwcm92aWRlZFRhZ3MiLCJwcm92aWRlc1RhZ3MiLCJ1cGRhdGVQcm92aWRlZEJ5IiwidXBkYXRlUXVlcnlEYXRhIiwidXBkYXRlUmVjaXBlIiwiY3VycmVudFN0YXRlIiwiaW52ZXJzZVBhdGNoZXMiLCJ1bmRvIiwidXRpbCIsInB1c2giLCJvcCIsInBhdGgiLCJ1cHNlcnRRdWVyeURhdGEiLCJpbml0aWF0ZSIsImV4ZWN1dGVFbmRwb2ludCIsInJlamVjdFdpdGhWYWx1ZSIsImZ1bGZpbGxXaXRoVmFsdWUiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsImlzRm9yY2VkUXVlcnkiLCJxdWVyeUZuIiwiYXJnMiIsIndoYXQiLCJlcnIiLCJmdWxmaWxsZWRUaW1lU3RhbXAiLCJEYXRlIiwibm93IiwiYmFzZVF1ZXJ5TWV0YSIsImNhdGNoZWRFcnJvciIsInRyYW5zZm9ybUVycm9yUmVzcG9uc2UiLCJzdGF0ZSIsInJlcXVlc3RTdGF0ZSIsInF1ZXJpZXMiLCJiYXNlRmV0Y2hPbk1vdW50T3JBcmdDaGFuZ2UiLCJyZWZldGNoT25Nb3VudE9yQXJnQ2hhbmdlIiwiZnVsZmlsbGVkVmFsIiwicmVmZXRjaFZhbCIsIk51bWJlciIsImdldFBlbmRpbmdNZXRhIiwic3RhcnRlZFRpbWVTdGFtcCIsImNvbmRpdGlvbiIsInF1ZXJ5VGh1bmtBcmdzIiwiY3VycmVudEFyZyIsInByZXZpb3VzQXJnIiwiZW5kcG9pbnRTdGF0ZSIsImRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uIiwiaGFzVGhlRm9yY2UiLCJoYXNNYXhBZ2UiLCJwcmVmZXRjaCIsImZvcmNlIiwibWF4QWdlIiwiaWZPbGRlclRoYW4iLCJmb3JjZTIiLCJsYXRlc3RTdGF0ZVZhbHVlIiwibGFzdEZ1bGZpbGxlZFRzIiwic2hvdWxkUmV0cmlnZ2VyIiwibWF0Y2hlc0VuZHBvaW50IiwiYWN0aW9uIiwiYnVpbGRNYXRjaFRodW5rQWN0aW9ucyIsIm1hdGNoUGVuZGluZyIsIm1hdGNoRnVsZmlsbGVkIiwibWF0Y2hSZWplY3RlZCIsImNhbGN1bGF0ZVByb3ZpZGVkQnlUaHVuayIsInBheWxvYWQiLCJpc0RyYWZ0IiwiYXBwbHlQYXRjaGVzIiwib3JpZ2luYWwiLCJ1cGRhdGVRdWVyeVN1YnN0YXRlSWZFeGlzdHMiLCJ1cGRhdGUiLCJzdWJzdGF0ZSIsImdldE11dGF0aW9uQ2FjaGVLZXkiLCJpZCIsInVwZGF0ZU11dGF0aW9uU3Vic3RhdGVJZkV4aXN0cyIsImluaXRpYWxTdGF0ZSIsImJ1aWxkU2xpY2UiLCJkZWZpbml0aW9ucyIsImFwaVVpZCIsImV4dHJhY3RSZWh5ZHJhdGlvbkluZm8iLCJoYXNSZWh5ZHJhdGlvbkluZm8iLCJyZXNldEFwaVN0YXRlIiwicXVlcnlTbGljZSIsIm5hbWUiLCJyZWR1Y2VycyIsInJlbW92ZVF1ZXJ5UmVzdWx0IiwicmVkdWNlciIsImRyYWZ0IiwicHJlcGFyZSIsImV4dHJhUmVkdWNlcnMiLCJidWlsZGVyIiwiYWRkQ2FzZSIsInBlbmRpbmciLCJ1cHNlcnRpbmciLCJmdWxmaWxsZWQiLCJtZXJnZSIsIm5ld0RhdGEiLCJkcmFmdFN1YnN0YXRlRGF0YSIsInN0cnVjdHVyYWxTaGFyaW5nIiwicmVqZWN0ZWQiLCJhZGRNYXRjaGVyIiwiZW50cnkiLCJtdXRhdGlvblNsaWNlIiwiY2FjaGVLZXkiLCJtdXRhdGlvbnMiLCJpbnZhbGlkYXRpb25TbGljZSIsInRhZ1R5cGVTdWJzY3JpcHRpb25zIiwiaWRTdWJzY3JpcHRpb25zIiwiZm91bmRBdCIsInNwbGljZSIsInN1YnNjcmliZWRRdWVyaWVzIiwiYWxyZWFkeVN1YnNjcmliZWQiLCJpbmNsdWRlcyIsImFjdGlvbnMiLCJwcm92aWRlZCIsImluY29taW5nVGFncyIsImNhY2hlS2V5cyIsImNhc2VSZWR1Y2VycyIsInN1YnNjcmlwdGlvblNsaWNlIiwiZCIsImEiLCJpbnRlcm5hbFN1YnNjcmlwdGlvbnNTbGljZSIsInN1YnNjcmlwdGlvbnNVcGRhdGVkIiwiY29uZmlnU2xpY2UiLCJvbmxpbmUiLCJmb2N1c2VkIiwibWlkZGxld2FyZVJlZ2lzdGVyZWQiLCJjb21iaW5lZFJlZHVjZXIiLCJzdWJzY3JpcHRpb25zIiwibWF0Y2giLCJza2lwVG9rZW4iLCJmb3IiLCJpbml0aWFsU3ViU3RhdGUiLCJkZWZhdWx0UXVlcnlTdWJTdGF0ZSIsImRlZmF1bHRNdXRhdGlvblN1YlN0YXRlIiwiYnVpbGRTZWxlY3RvcnMiLCJjcmVhdGVTZWxlY3RvcjIiLCJzZWxlY3RTa2lwcGVkUXVlcnkiLCJzZWxlY3RTa2lwcGVkTXV0YXRpb24iLCJidWlsZFF1ZXJ5U2VsZWN0b3IiLCJidWlsZE11dGF0aW9uU2VsZWN0b3IiLCJzZWxlY3RJbnZhbGlkYXRlZEJ5Iiwic2VsZWN0Q2FjaGVkQXJnc0ZvclF1ZXJ5Iiwid2l0aFJlcXVlc3RGbGFncyIsInNlbGVjdEludGVybmFsU3RhdGUiLCJyb290U3RhdGUiLCJzZXJpYWxpemVkQXJncyIsInNlbGVjdFF1ZXJ5U3Vic3RhdGUiLCJmaW5hbFNlbGVjdFF1ZXJ5U3ViU3RhdGUiLCJtdXRhdGlvbklkIiwic2VsZWN0TXV0YXRpb25TdWJzdGF0ZSIsImZpbmFsU2VsZWN0TXV0YXRpb25TdWJzdGF0ZSIsInRhZ3MiLCJhcGlTdGF0ZSIsInRvSW52YWxpZGF0ZSIsIlNldCIsInRhZyIsImludmFsaWRhdGVTdWJzY3JpcHRpb25zIiwiaW52YWxpZGF0ZSIsImFkZCIsImZyb20iLCJxdWVyeVN1YlN0YXRlIiwicXVlcnlOYW1lIiwiY2FjaGUiLCJXZWFrTWFwIiwiZGVmYXVsdFNlcmlhbGl6ZVF1ZXJ5QXJncyIsInNlcmlhbGl6ZWQiLCJjYWNoZWQiLCJzdHJpbmdpZmllZCIsInNvcnQiLCJyZWR1Y2UiLCJhY2MiLCJrZXkyIiwid2Vha01hcE1lbW9pemUiLCJidWlsZENyZWF0ZUFwaSIsIm1vZHVsZXMiLCJiYXNlQ3JlYXRlQXBpIiwib3B0aW9uc1dpdGhEZWZhdWx0cyIsImtlZXBVbnVzZWREYXRhRm9yIiwicmVmZXRjaE9uRm9jdXMiLCJyZWZldGNoT25SZWNvbm5lY3QiLCJpbnZhbGlkYXRpb25CZWhhdmlvciIsInF1ZXJ5QXJnc0FwaSIsImZpbmFsU2VyaWFsaXplUXVlcnlBcmdzIiwiZW5kcG9pbnRTUUEiLCJxdWVyeUFyZ3NBcGkyIiwiaW5pdGlhbFJlc3VsdCIsInRhZ1R5cGVzIiwiYmF0Y2giLCJmbiIsImluamVjdEVuZHBvaW50cyIsImVuaGFuY2VFbmRwb2ludHMiLCJhZGRUYWdUeXBlcyIsImVUIiwicGFydGlhbERlZmluaXRpb24iLCJpbml0aWFsaXplZE1vZHVsZXMiLCJtIiwiaW5pdCIsImluamVjdCIsImV2YWx1YXRlZEVuZHBvaW50cyIsIm11dGF0aW9uIiwiZGVmaW5pdGlvbiIsIm92ZXJyaWRlRXhpc3RpbmciLCJpbmplY3RFbmRwb2ludCIsIl9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlMiIsImZha2VCYXNlUXVlcnkiLCJpc09iamVjdEVtcHR5IiwiVEhJUlRZX1RXT19CSVRfTUFYX1RJTUVSX1NFQ09ORFMiLCJidWlsZENhY2hlQ29sbGVjdGlvbkhhbmRsZXIiLCJpbnRlcm5hbFN0YXRlIiwiYW55U3Vic2NyaXB0aW9uc1JlbWFpbmluZ0ZvcktleSIsImN1cnJlbnRTdWJzY3JpcHRpb25zIiwiY3VycmVudFJlbW92YWxUaW1lb3V0cyIsImhhbmRsZXIiLCJtd0FwaSIsImludGVybmFsU3RhdGUyIiwiaGFuZGxlVW5zdWJzY3JpYmUiLCJxdWVyeVN0YXRlIiwiYXBpMiIsIkluZmluaXR5IiwiZmluYWxLZWVwVW51c2VkRGF0YUZvciIsIm1heCIsImN1cnJlbnRUaW1lb3V0IiwiYnVpbGRJbnZhbGlkYXRpb25CeVRhZ3NIYW5kbGVyIiwicmVmZXRjaFF1ZXJ5IiwiaXNUaHVua0FjdGlvbldpdGhUYWdzIiwiaXNRdWVyeUVuZCIsInBlbmRpbmdUYWdJbnZhbGlkYXRpb25zIiwiaW52YWxpZGF0ZVRhZ3MiLCJoYXNQZW5kaW5nUmVxdWVzdHMiLCJuZXdUYWdzIiwidmFsdWVzQXJyYXkiLCJzdWJzY3JpcHRpb25TdWJTdGF0ZSIsImJ1aWxkUG9sbGluZ0hhbmRsZXIiLCJjdXJyZW50UG9sbHMiLCJ1cGRhdGVQb2xsaW5nSW50ZXJ2YWwiLCJzdGFydE5leHRQb2xsIiwiY2xlYXJQb2xscyIsImxvd2VzdFBvbGxpbmdJbnRlcnZhbCIsInNraXBQb2xsaW5nSWZVbmZvY3VzZWQiLCJmaW5kTG93ZXN0UG9sbGluZ0ludGVydmFsIiwiaXNGaW5pdGUiLCJjdXJyZW50UG9sbCIsIm5leHRQb2xsVGltZXN0YW1wIiwicG9sbGluZ0ludGVydmFsIiwiY2xlYW51cFBvbGxGb3JLZXkiLCJleGlzdGluZ1BvbGwiLCJzdWJzY3JpYmVycyIsIlBPU0lUSVZFX0lORklOSVRZIiwiYnVpbGRXaW5kb3dFdmVudEhhbmRsZXIiLCJyZWZldGNoVmFsaWRRdWVyaWVzIiwic2hvdWxkUmVmZXRjaCIsInNvbWUiLCJzdWIiLCJldmVyeSIsIm5ldmVyUmVzb2x2ZWRFcnJvciIsImJ1aWxkQ2FjaGVMaWZlY3ljbGVIYW5kbGVyIiwiaXNRdWVyeVRodW5rIiwiaXNNdXRhdGlvblRodW5rIiwiaXNGdWxmaWxsZWRUaHVuayIsImxpZmVjeWNsZU1hcCIsInN0YXRlQmVmb3JlIiwiZ2V0Q2FjaGVLZXkiLCJvbGRTdGF0ZSIsImhhbmRsZU5ld0tleSIsImxpZmVjeWNsZSIsInZhbHVlUmVzb2x2ZWQiLCJjYWNoZUVudHJ5UmVtb3ZlZCIsImNhY2hlS2V5MiIsIm9uQ2FjaGVFbnRyeUFkZGVkIiwiY2FjaGVEYXRhTG9hZGVkIiwicmFjZSIsImV4dHJhMiIsImxpZmVjeWNsZUFwaSIsImdldENhY2hlRW50cnkiLCJ1cGRhdGVDYWNoZWREYXRhIiwicnVubmluZ0hhbmRsZXIiLCJidWlsZFF1ZXJ5TGlmZWN5Y2xlSGFuZGxlciIsImlzUGVuZGluZ1RodW5rIiwiaXNSZWplY3RlZFRodW5rIiwiaXNGdWxsZmlsbGVkVGh1bmsiLCJvblF1ZXJ5U3RhcnRlZCIsInF1ZXJ5RnVsZmlsbGVkIiwicmVqZWN0IiwicmVqZWN0ZWRXaXRoVmFsdWUiLCJpc1VuaGFuZGxlZEVycm9yIiwiYnVpbGREZXZDaGVja0hhbmRsZXIiLCJwcm9kdWNlV2l0aFBhdGNoZXMyIiwiYnVpbGRCYXRjaGVkQWN0aW9uc0hhbmRsZXIiLCJzdWJzY3JpcHRpb25zUHJlZml4IiwicHJldmlvdXNTdWJzY3JpcHRpb25zIiwidXBkYXRlU3luY1RpbWVyIiwiYWN0dWFsbHlNdXRhdGVTdWJzY3JpcHRpb25zIiwibXV0YWJsZVN0YXRlIiwibXV0YXRlZCIsImdldFN1YnNjcmlwdGlvbnMiLCJnZXRTdWJzY3JpcHRpb25Db3VudCIsInN1YnNjcmlwdGlvbnNGb3JRdWVyeUFyZyIsImlzUmVxdWVzdFN1YnNjcmliZWQiLCJzdWJzY3JpcHRpb25TZWxlY3RvcnMiLCJkaWRNdXRhdGUiLCJhY3Rpb25TaG91bGRDb250aW51ZSIsIm5ld1N1YnNjcmlwdGlvbnMiLCJuZXh0IiwiaXNTdWJzY3JpcHRpb25TbGljZUFjdGlvbiIsImlzQWRkaXRpb25hbFN1YnNjcmlwdGlvbkFjdGlvbiIsImJ1aWxkTWlkZGxld2FyZSIsImlucHV0IiwiaXNUaGlzQXBpU2xpY2VBY3Rpb24iLCJoYW5kbGVyQnVpbGRlcnMiLCJtaWRkbGV3YXJlIiwiaW5pdGlhbGl6ZWQyIiwiYnVpbGRlckFyZ3MiLCJoYW5kbGVycyIsImJ1aWxkIiwiYmF0Y2hlZEFjdGlvbnNIYW5kbGVyIiwid2luZG93RXZlbnRzSGFuZGxlciIsIm13QXBpV2l0aE5leHQiLCJpbnRlcm5hbFByb2JlUmVzdWx0Iiwib3ZlcnJpZGUiLCJhc3NlcnRDYXN0Iiwic2FmZUFzc2lnbiIsInRhcmdldCIsImVuYWJsZVBhdGNoZXMiLCJjb3JlTW9kdWxlTmFtZSIsImNvcmVNb2R1bGUiLCJzbGljZUFjdGlvbnMiLCJtaWRkbGV3YXJlQWN0aW9ucyIsImFueUFwaSIsImNyZWF0ZUFwaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReducerType: () => (/* binding */ ReducerType),\n/* harmony export */   SHOULD_AUTOBATCH: () => (/* binding */ SHOULD_AUTOBATCH),\n/* harmony export */   TaskAbortError: () => (/* binding */ TaskAbortError),\n/* harmony export */   Tuple: () => (/* binding */ Tuple),\n/* harmony export */   __DO_NOT_USE__ActionTypes: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.__DO_NOT_USE__ActionTypes),\n/* harmony export */   addListener: () => (/* binding */ addListener),\n/* harmony export */   applyMiddleware: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware),\n/* harmony export */   asyncThunkCreator: () => (/* binding */ asyncThunkCreator),\n/* harmony export */   autoBatchEnhancer: () => (/* binding */ autoBatchEnhancer),\n/* harmony export */   bindActionCreators: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.bindActionCreators),\n/* harmony export */   buildCreateSlice: () => (/* binding */ buildCreateSlice),\n/* harmony export */   clearAllListeners: () => (/* binding */ clearAllListeners),\n/* harmony export */   combineReducers: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers),\n/* harmony export */   combineSlices: () => (/* binding */ combineSlices),\n/* harmony export */   compose: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.compose),\n/* harmony export */   configureStore: () => (/* binding */ configureStore),\n/* harmony export */   createAction: () => (/* binding */ createAction),\n/* harmony export */   createActionCreatorInvariantMiddleware: () => (/* binding */ createActionCreatorInvariantMiddleware),\n/* harmony export */   createAsyncThunk: () => (/* binding */ createAsyncThunk),\n/* harmony export */   createDraftSafeSelector: () => (/* binding */ createDraftSafeSelector),\n/* harmony export */   createDraftSafeSelectorCreator: () => (/* binding */ createDraftSafeSelectorCreator),\n/* harmony export */   createDynamicMiddleware: () => (/* binding */ createDynamicMiddleware),\n/* harmony export */   createEntityAdapter: () => (/* binding */ createEntityAdapter),\n/* harmony export */   createImmutableStateInvariantMiddleware: () => (/* binding */ createImmutableStateInvariantMiddleware),\n/* harmony export */   createListenerMiddleware: () => (/* binding */ createListenerMiddleware),\n/* harmony export */   createNextState: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.produce),\n/* harmony export */   createReducer: () => (/* binding */ createReducer),\n/* harmony export */   createSelector: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelector),\n/* harmony export */   createSelectorCreator: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelectorCreator),\n/* harmony export */   createSerializableStateInvariantMiddleware: () => (/* binding */ createSerializableStateInvariantMiddleware),\n/* harmony export */   createSlice: () => (/* binding */ createSlice),\n/* harmony export */   createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.createStore),\n/* harmony export */   current: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.current),\n/* harmony export */   findNonSerializableValue: () => (/* binding */ findNonSerializableValue),\n/* harmony export */   formatProdErrorMessage: () => (/* binding */ formatProdErrorMessage),\n/* harmony export */   freeze: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.freeze),\n/* harmony export */   isAction: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.isAction),\n/* harmony export */   isActionCreator: () => (/* binding */ isActionCreator),\n/* harmony export */   isAllOf: () => (/* binding */ isAllOf),\n/* harmony export */   isAnyOf: () => (/* binding */ isAnyOf),\n/* harmony export */   isAsyncThunkAction: () => (/* binding */ isAsyncThunkAction),\n/* harmony export */   isDraft: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.isDraft),\n/* harmony export */   isFluxStandardAction: () => (/* binding */ isFSA),\n/* harmony export */   isFulfilled: () => (/* binding */ isFulfilled),\n/* harmony export */   isImmutableDefault: () => (/* binding */ isImmutableDefault),\n/* harmony export */   isPending: () => (/* binding */ isPending),\n/* harmony export */   isPlain: () => (/* binding */ isPlain),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject),\n/* harmony export */   isRejected: () => (/* binding */ isRejected),\n/* harmony export */   isRejectedWithValue: () => (/* binding */ isRejectedWithValue),\n/* harmony export */   legacy_createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.legacy_createStore),\n/* harmony export */   lruMemoize: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.lruMemoize),\n/* harmony export */   miniSerializeError: () => (/* binding */ miniSerializeError),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   original: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.original),\n/* harmony export */   prepareAutoBatched: () => (/* binding */ prepareAutoBatched),\n/* harmony export */   removeListener: () => (/* binding */ removeListener),\n/* harmony export */   unwrapResult: () => (/* binding */ unwrapResult),\n/* harmony export */   weakMapMemoize: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.weakMapMemoize)\n/* harmony export */ });\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/dist/redux.mjs\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/dist/reselect.mjs\");\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux-thunk */ \"(ssr)/./node_modules/redux-thunk/dist/redux-thunk.mjs\");\n// src/index.ts\n\n\n\n// src/createDraftSafeSelector.ts\n\n\nvar createDraftSafeSelectorCreator = (...args)=>{\n    const createSelector2 = (0,reselect__WEBPACK_IMPORTED_MODULE_1__.createSelectorCreator)(...args);\n    const createDraftSafeSelector2 = Object.assign((...args2)=>{\n        const selector = createSelector2(...args2);\n        const wrappedSelector = (value, ...rest)=>selector((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value, ...rest);\n        Object.assign(wrappedSelector, selector);\n        return wrappedSelector;\n    }, {\n        withTypes: ()=>createDraftSafeSelector2\n    });\n    return createDraftSafeSelector2;\n};\nvar createDraftSafeSelector = createDraftSafeSelectorCreator(reselect__WEBPACK_IMPORTED_MODULE_1__.weakMapMemoize);\n// src/configureStore.ts\n\n// src/devtoolsExtension.ts\n\nvar composeWithDevTools =  false ? 0 : function() {\n    if (arguments.length === 0) return void 0;\n    if (typeof arguments[0] === \"object\") return redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n    return redux__WEBPACK_IMPORTED_MODULE_0__.compose.apply(null, arguments);\n};\nvar devToolsEnhancer =  false ? 0 : function() {\n    return function(noop3) {\n        return noop3;\n    };\n};\n// src/getDefaultMiddleware.ts\n\n// src/createAction.ts\n\n// src/tsHelpers.ts\nvar hasMatchFunction = (v)=>{\n    return v && typeof v.match === \"function\";\n};\n// src/createAction.ts\nfunction createAction(type, prepareAction) {\n    function actionCreator(...args) {\n        if (prepareAction) {\n            let prepared = prepareAction(...args);\n            if (!prepared) {\n                throw new Error( false ? 0 : \"prepareAction did not return an object\");\n            }\n            return {\n                type,\n                payload: prepared.payload,\n                ...\"meta\" in prepared && {\n                    meta: prepared.meta\n                },\n                ...\"error\" in prepared && {\n                    error: prepared.error\n                }\n            };\n        }\n        return {\n            type,\n            payload: args[0]\n        };\n    }\n    actionCreator.toString = ()=>`${type}`;\n    actionCreator.type = type;\n    actionCreator.match = (action)=>(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action) && action.type === type;\n    return actionCreator;\n}\nfunction isActionCreator(action) {\n    return typeof action === \"function\" && \"type\" in action && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it\n    hasMatchFunction(action);\n}\nfunction isFSA(action) {\n    return (0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action) && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key) {\n    return [\n        \"type\",\n        \"payload\",\n        \"error\",\n        \"meta\"\n    ].indexOf(key) > -1;\n}\n// src/actionCreatorInvariantMiddleware.ts\nfunction getMessage(type) {\n    const splitType = type ? `${type}`.split(\"/\") : [];\n    const actionName = splitType[splitType.length - 1] || \"actionCreator\";\n    return `Detected an action creator with type \"${type || \"unknown\"}\" being dispatched. \nMake sure you're calling the action creator before dispatching, i.e. \\`dispatch(${actionName}())\\` instead of \\`dispatch(${actionName})\\`. This is necessary even if the action has no payload.`;\n}\nfunction createActionCreatorInvariantMiddleware(options = {}) {\n    if (false) {}\n    const { isActionCreator: isActionCreator2 = isActionCreator } = options;\n    return ()=>(next)=>(action)=>{\n                if (isActionCreator2(action)) {\n                    console.warn(getMessage(action.type));\n                }\n                return next(action);\n            };\n}\n// src/utils.ts\n\nfunction getTimeMeasureUtils(maxDelay, fnName) {\n    let elapsed = 0;\n    return {\n        measureTime (fn) {\n            const started = Date.now();\n            try {\n                return fn();\n            } finally{\n                const finished = Date.now();\n                elapsed += finished - started;\n            }\n        },\n        warnIfExceeded () {\n            if (elapsed > maxDelay) {\n                console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.`);\n            }\n        }\n    };\n}\nfunction find(iterable, comparator) {\n    for (const entry of iterable){\n        if (comparator(entry)) {\n            return entry;\n        }\n    }\n    return void 0;\n}\nvar Tuple = class _Tuple extends Array {\n    constructor(...items){\n        super(...items);\n        Object.setPrototypeOf(this, _Tuple.prototype);\n    }\n    static get [Symbol.species]() {\n        return _Tuple;\n    }\n    concat(...arr) {\n        return super.concat.apply(this, arr);\n    }\n    prepend(...arr) {\n        if (arr.length === 1 && Array.isArray(arr[0])) {\n            return new _Tuple(...arr[0].concat(this));\n        }\n        return new _Tuple(...arr.concat(this));\n    }\n};\nfunction freezeDraftable(val) {\n    return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(val) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(val, ()=>{}) : val;\n}\nfunction emplace(map, key, handler) {\n    if (map.has(key)) {\n        let value = map.get(key);\n        if (handler.update) {\n            value = handler.update(value, key, map);\n            map.set(key, value);\n        }\n        return value;\n    }\n    if (!handler.insert) throw new Error( false ? 0 : \"No insert provided for key not already in map\");\n    const inserted = handler.insert(key, map);\n    map.set(key, inserted);\n    return inserted;\n}\n// src/immutableStateInvariantMiddleware.ts\nfunction isImmutableDefault(value) {\n    return typeof value !== \"object\" || value == null || Object.isFrozen(value);\n}\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\n    const trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n    return {\n        detectMutations () {\n            return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n        }\n    };\n}\nfunction trackProperties(isImmutable, ignorePaths = [], obj, path = \"\", checkedObjects = /* @__PURE__ */ new Set()) {\n    const tracked = {\n        value: obj\n    };\n    if (!isImmutable(obj) && !checkedObjects.has(obj)) {\n        checkedObjects.add(obj);\n        tracked.children = {};\n        for(const key in obj){\n            const childPath = path ? path + \".\" + key : key;\n            if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n                continue;\n            }\n            tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n        }\n    }\n    return tracked;\n}\nfunction detectMutations(isImmutable, ignoredPaths = [], trackedProperty, obj, sameParentRef = false, path = \"\") {\n    const prevObj = trackedProperty ? trackedProperty.value : void 0;\n    const sameRef = prevObj === obj;\n    if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n        return {\n            wasMutated: true,\n            path\n        };\n    }\n    if (isImmutable(prevObj) || isImmutable(obj)) {\n        return {\n            wasMutated: false\n        };\n    }\n    const keysToDetect = {};\n    for(let key in trackedProperty.children){\n        keysToDetect[key] = true;\n    }\n    for(let key in obj){\n        keysToDetect[key] = true;\n    }\n    const hasIgnoredPaths = ignoredPaths.length > 0;\n    for(let key in keysToDetect){\n        const nestedPath = path ? path + \".\" + key : key;\n        if (hasIgnoredPaths) {\n            const hasMatches = ignoredPaths.some((ignored)=>{\n                if (ignored instanceof RegExp) {\n                    return ignored.test(nestedPath);\n                }\n                return nestedPath === ignored;\n            });\n            if (hasMatches) {\n                continue;\n            }\n        }\n        const result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\n        if (result.wasMutated) {\n            return result;\n        }\n    }\n    return {\n        wasMutated: false\n    };\n}\nfunction createImmutableStateInvariantMiddleware(options = {}) {\n    if (false) {} else {\n        let stringify2 = function(obj, serializer, indent, decycler) {\n            return JSON.stringify(obj, getSerialize2(serializer, decycler), indent);\n        }, getSerialize2 = function(serializer, decycler) {\n            let stack = [], keys = [];\n            if (!decycler) decycler = function(_, value) {\n                if (stack[0] === value) return \"[Circular ~]\";\n                return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n            };\n            return function(key, value) {\n                if (stack.length > 0) {\n                    var thisPos = stack.indexOf(this);\n                    ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n                    ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n                    if (~stack.indexOf(value)) value = decycler.call(this, key, value);\n                } else stack.push(value);\n                return serializer == null ? value : serializer.call(this, key, value);\n            };\n        };\n        var stringify = stringify2, getSerialize = getSerialize2;\n        let { isImmutable = isImmutableDefault, ignoredPaths, warnAfter = 32 } = options;\n        const track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n        return ({ getState })=>{\n            let state = getState();\n            let tracker = track(state);\n            let result;\n            return (next)=>(action)=>{\n                    const measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\n                    measureUtils.measureTime(()=>{\n                        state = getState();\n                        result = tracker.detectMutations();\n                        tracker = track(state);\n                        if (result.wasMutated) {\n                            throw new Error( false ? 0 : `A state mutation was detected between dispatches, in the path '${result.path || \"\"}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\n                        }\n                    });\n                    const dispatchedAction = next(action);\n                    measureUtils.measureTime(()=>{\n                        state = getState();\n                        result = tracker.detectMutations();\n                        tracker = track(state);\n                        if (result.wasMutated) {\n                            throw new Error( false ? 0 : `A state mutation was detected inside a dispatch, in the path: ${result.path || \"\"}. Take a look at the reducer(s) handling the action ${stringify2(action)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\n                        }\n                    });\n                    measureUtils.warnIfExceeded();\n                    return dispatchedAction;\n                };\n        };\n    }\n}\n// src/serializableStateInvariantMiddleware.ts\n\nfunction isPlain(val) {\n    const type = typeof val;\n    return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || (0,redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(val);\n}\nfunction findNonSerializableValue(value, path = \"\", isSerializable = isPlain, getEntries, ignoredPaths = [], cache) {\n    let foundNestedSerializable;\n    if (!isSerializable(value)) {\n        return {\n            keyPath: path || \"<root>\",\n            value\n        };\n    }\n    if (typeof value !== \"object\" || value === null) {\n        return false;\n    }\n    if (cache?.has(value)) return false;\n    const entries = getEntries != null ? getEntries(value) : Object.entries(value);\n    const hasIgnoredPaths = ignoredPaths.length > 0;\n    for (const [key, nestedValue] of entries){\n        const nestedPath = path ? path + \".\" + key : key;\n        if (hasIgnoredPaths) {\n            const hasMatches = ignoredPaths.some((ignored)=>{\n                if (ignored instanceof RegExp) {\n                    return ignored.test(nestedPath);\n                }\n                return nestedPath === ignored;\n            });\n            if (hasMatches) {\n                continue;\n            }\n        }\n        if (!isSerializable(nestedValue)) {\n            return {\n                keyPath: nestedPath,\n                value: nestedValue\n            };\n        }\n        if (typeof nestedValue === \"object\") {\n            foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\n            if (foundNestedSerializable) {\n                return foundNestedSerializable;\n            }\n        }\n    }\n    if (cache && isNestedFrozen(value)) cache.add(value);\n    return false;\n}\nfunction isNestedFrozen(value) {\n    if (!Object.isFrozen(value)) return false;\n    for (const nestedValue of Object.values(value)){\n        if (typeof nestedValue !== \"object\" || nestedValue === null) continue;\n        if (!isNestedFrozen(nestedValue)) return false;\n    }\n    return true;\n}\nfunction createSerializableStateInvariantMiddleware(options = {}) {\n    if (false) {} else {\n        const { isSerializable = isPlain, getEntries, ignoredActions = [], ignoredActionPaths = [\n            \"meta.arg\",\n            \"meta.baseQueryMeta\"\n        ], ignoredPaths = [], warnAfter = 32, ignoreState = false, ignoreActions = false, disableCache = false } = options;\n        const cache = !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;\n        return (storeAPI)=>(next)=>(action)=>{\n                    if (!(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n                        return next(action);\n                    }\n                    const result = next(action);\n                    const measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\n                    if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\n                        measureUtils.measureTime(()=>{\n                            const foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache);\n                            if (foundActionNonSerializableValue) {\n                                const { keyPath, value } = foundActionNonSerializableValue;\n                                console.error(`A non-serializable value was detected in an action, in the path: \\`${keyPath}\\`. Value:`, value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\n                            }\n                        });\n                    }\n                    if (!ignoreState) {\n                        measureUtils.measureTime(()=>{\n                            const state = storeAPI.getState();\n                            const foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache);\n                            if (foundStateNonSerializableValue) {\n                                const { keyPath, value } = foundStateNonSerializableValue;\n                                console.error(`A non-serializable value was detected in the state, in the path: \\`${keyPath}\\`. Value:`, value, `\nTake a look at the reducer(s) handling this action type: ${action.type}.\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);\n                            }\n                        });\n                        measureUtils.warnIfExceeded();\n                    }\n                    return result;\n                };\n    }\n}\n// src/getDefaultMiddleware.ts\nfunction isBoolean(x) {\n    return typeof x === \"boolean\";\n}\nvar buildGetDefaultMiddleware = ()=>function getDefaultMiddleware(options) {\n        const { thunk = true, immutableCheck = true, serializableCheck = true, actionCreatorCheck = true } = options ?? {};\n        let middlewareArray = new Tuple();\n        if (thunk) {\n            if (isBoolean(thunk)) {\n                middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_3__.thunk);\n            } else {\n                middlewareArray.push((0,redux_thunk__WEBPACK_IMPORTED_MODULE_3__.withExtraArgument)(thunk.extraArgument));\n            }\n        }\n        if (true) {\n            if (immutableCheck) {\n                let immutableOptions = {};\n                if (!isBoolean(immutableCheck)) {\n                    immutableOptions = immutableCheck;\n                }\n                middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n            }\n            if (serializableCheck) {\n                let serializableOptions = {};\n                if (!isBoolean(serializableCheck)) {\n                    serializableOptions = serializableCheck;\n                }\n                middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n            }\n            if (actionCreatorCheck) {\n                let actionCreatorOptions = {};\n                if (!isBoolean(actionCreatorCheck)) {\n                    actionCreatorOptions = actionCreatorCheck;\n                }\n                middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\n            }\n        }\n        return middlewareArray;\n    };\n// src/autoBatchEnhancer.ts\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\nvar prepareAutoBatched = ()=>(payload)=>({\n            payload,\n            meta: {\n                [SHOULD_AUTOBATCH]: true\n            }\n        });\nvar createQueueWithTimer = (timeout)=>{\n    return (notify)=>{\n        setTimeout(notify, timeout);\n    };\n};\nvar rAF =  false ? 0 : createQueueWithTimer(10);\nvar autoBatchEnhancer = (options = {\n    type: \"raf\"\n})=>(next)=>(...args)=>{\n            const store = next(...args);\n            let notifying = true;\n            let shouldNotifyAtEndOfTick = false;\n            let notificationQueued = false;\n            const listeners = /* @__PURE__ */ new Set();\n            const queueCallback = options.type === \"tick\" ? queueMicrotask : options.type === \"raf\" ? rAF : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\n            const notifyListeners = ()=>{\n                notificationQueued = false;\n                if (shouldNotifyAtEndOfTick) {\n                    shouldNotifyAtEndOfTick = false;\n                    listeners.forEach((l)=>l());\n                }\n            };\n            return Object.assign({}, store, {\n                // Override the base `store.subscribe` method to keep original listeners\n                // from running if we're delaying notifications\n                subscribe (listener2) {\n                    const wrappedListener = ()=>notifying && listener2();\n                    const unsubscribe = store.subscribe(wrappedListener);\n                    listeners.add(listener2);\n                    return ()=>{\n                        unsubscribe();\n                        listeners.delete(listener2);\n                    };\n                },\n                // Override the base `store.dispatch` method so that we can check actions\n                // for the `shouldAutoBatch` flag and determine if batching is active\n                dispatch (action) {\n                    try {\n                        notifying = !action?.meta?.[SHOULD_AUTOBATCH];\n                        shouldNotifyAtEndOfTick = !notifying;\n                        if (shouldNotifyAtEndOfTick) {\n                            if (!notificationQueued) {\n                                notificationQueued = true;\n                                queueCallback(notifyListeners);\n                            }\n                        }\n                        return store.dispatch(action);\n                    } finally{\n                        notifying = true;\n                    }\n                }\n            });\n        };\n// src/getDefaultEnhancers.ts\nvar buildGetDefaultEnhancers = (middlewareEnhancer)=>function getDefaultEnhancers(options) {\n        const { autoBatch = true } = options ?? {};\n        let enhancerArray = new Tuple(middlewareEnhancer);\n        if (autoBatch) {\n            enhancerArray.push(autoBatchEnhancer(typeof autoBatch === \"object\" ? autoBatch : void 0));\n        }\n        return enhancerArray;\n    };\n// src/configureStore.ts\nvar IS_PRODUCTION = \"development\" === \"production\";\nfunction configureStore(options) {\n    const getDefaultMiddleware = buildGetDefaultMiddleware();\n    const { reducer = void 0, middleware, devTools = true, preloadedState = void 0, enhancers = void 0 } = options || {};\n    let rootReducer;\n    if (typeof reducer === \"function\") {\n        rootReducer = reducer;\n    } else if ((0,redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(reducer)) {\n        rootReducer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducer);\n    } else {\n        throw new Error( false ? 0 : \"`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers\");\n    }\n    if (!IS_PRODUCTION && middleware && typeof middleware !== \"function\") {\n        throw new Error( false ? 0 : \"`middleware` field must be a callback\");\n    }\n    let finalMiddleware;\n    if (typeof middleware === \"function\") {\n        finalMiddleware = middleware(getDefaultMiddleware);\n        if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {\n            throw new Error( false ? 0 : \"when using a middleware builder function, an array of middleware must be returned\");\n        }\n    } else {\n        finalMiddleware = getDefaultMiddleware();\n    }\n    if (!IS_PRODUCTION && finalMiddleware.some((item)=>typeof item !== \"function\")) {\n        throw new Error( false ? 0 : \"each middleware provided to configureStore must be a function\");\n    }\n    let finalCompose = redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n    if (devTools) {\n        finalCompose = composeWithDevTools({\n            // Enable capture of stack traces for dispatched Redux actions\n            trace: !IS_PRODUCTION,\n            ...typeof devTools === \"object\" && devTools\n        });\n    }\n    const middlewareEnhancer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware)(...finalMiddleware);\n    const getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);\n    if (!IS_PRODUCTION && enhancers && typeof enhancers !== \"function\") {\n        throw new Error( false ? 0 : \"`enhancers` field must be a callback\");\n    }\n    let storeEnhancers = typeof enhancers === \"function\" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();\n    if (!IS_PRODUCTION && !Array.isArray(storeEnhancers)) {\n        throw new Error( false ? 0 : \"`enhancers` callback must return an array\");\n    }\n    if (!IS_PRODUCTION && storeEnhancers.some((item)=>typeof item !== \"function\")) {\n        throw new Error( false ? 0 : \"each enhancer provided to configureStore must be a function\");\n    }\n    if (!IS_PRODUCTION && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {\n        console.error(\"middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`\");\n    }\n    const composedEnhancer = finalCompose(...storeEnhancers);\n    return (0,redux__WEBPACK_IMPORTED_MODULE_0__.createStore)(rootReducer, preloadedState, composedEnhancer);\n}\n// src/createReducer.ts\n\n// src/mapBuilders.ts\nfunction executeReducerBuilderCallback(builderCallback) {\n    const actionsMap = {};\n    const actionMatchers = [];\n    let defaultCaseReducer;\n    const builder = {\n        addCase (typeOrActionCreator, reducer) {\n            if (true) {\n                if (actionMatchers.length > 0) {\n                    throw new Error( false ? 0 : \"`builder.addCase` should only be called before calling `builder.addMatcher`\");\n                }\n                if (defaultCaseReducer) {\n                    throw new Error( false ? 0 : \"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\n                }\n            }\n            const type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n            if (!type) {\n                throw new Error( false ? 0 : \"`builder.addCase` cannot be called with an empty action type\");\n            }\n            if (type in actionsMap) {\n                throw new Error( false ? 0 : `\\`builder.addCase\\` cannot be called with two reducers for the same action type '${type}'`);\n            }\n            actionsMap[type] = reducer;\n            return builder;\n        },\n        addMatcher (matcher, reducer) {\n            if (true) {\n                if (defaultCaseReducer) {\n                    throw new Error( false ? 0 : \"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\n                }\n            }\n            actionMatchers.push({\n                matcher,\n                reducer\n            });\n            return builder;\n        },\n        addDefaultCase (reducer) {\n            if (true) {\n                if (defaultCaseReducer) {\n                    throw new Error( false ? 0 : \"`builder.addDefaultCase` can only be called once\");\n                }\n            }\n            defaultCaseReducer = reducer;\n            return builder;\n        }\n    };\n    builderCallback(builder);\n    return [\n        actionsMap,\n        actionMatchers,\n        defaultCaseReducer\n    ];\n}\n// src/createReducer.ts\nfunction isStateFunction(x) {\n    return typeof x === \"function\";\n}\nfunction createReducer(initialState, mapOrBuilderCallback) {\n    if (true) {\n        if (typeof mapOrBuilderCallback === \"object\") {\n            throw new Error( false ? 0 : \"The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\n        }\n    }\n    let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);\n    let getInitialState;\n    if (isStateFunction(initialState)) {\n        getInitialState = ()=>freezeDraftable(initialState());\n    } else {\n        const frozenInitialState = freezeDraftable(initialState);\n        getInitialState = ()=>frozenInitialState;\n    }\n    function reducer(state = getInitialState(), action) {\n        let caseReducers = [\n            actionsMap[action.type],\n            ...finalActionMatchers.filter(({ matcher })=>matcher(action)).map(({ reducer: reducer2 })=>reducer2)\n        ];\n        if (caseReducers.filter((cr)=>!!cr).length === 0) {\n            caseReducers = [\n                finalDefaultCaseReducer\n            ];\n        }\n        return caseReducers.reduce((previousState, caseReducer)=>{\n            if (caseReducer) {\n                if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(previousState)) {\n                    const draft = previousState;\n                    const result = caseReducer(draft, action);\n                    if (result === void 0) {\n                        return previousState;\n                    }\n                    return result;\n                } else if (!(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(previousState)) {\n                    const result = caseReducer(previousState, action);\n                    if (result === void 0) {\n                        if (previousState === null) {\n                            return previousState;\n                        }\n                        throw new Error( false ? 0 : \"A case reducer on a non-draftable value must not return undefined\");\n                    }\n                    return result;\n                } else {\n                    return (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(previousState, (draft)=>{\n                        return caseReducer(draft, action);\n                    });\n                }\n            }\n            return previousState;\n        }, state);\n    }\n    reducer.getInitialState = getInitialState;\n    return reducer;\n}\n// src/nanoid.ts\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\nvar nanoid = (size = 21)=>{\n    let id = \"\";\n    let i = size;\n    while(i--){\n        id += urlAlphabet[Math.random() * 64 | 0];\n    }\n    return id;\n};\n// src/matchers.ts\nvar matches = (matcher, action)=>{\n    if (hasMatchFunction(matcher)) {\n        return matcher.match(action);\n    } else {\n        return matcher(action);\n    }\n};\nfunction isAnyOf(...matchers) {\n    return (action)=>{\n        return matchers.some((matcher)=>matches(matcher, action));\n    };\n}\nfunction isAllOf(...matchers) {\n    return (action)=>{\n        return matchers.every((matcher)=>matches(matcher, action));\n    };\n}\nfunction hasExpectedRequestMetadata(action, validStatus) {\n    if (!action || !action.meta) return false;\n    const hasValidRequestId = typeof action.meta.requestId === \"string\";\n    const hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n    return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a) {\n    return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\n}\nfunction isPending(...asyncThunks) {\n    if (asyncThunks.length === 0) {\n        return (action)=>hasExpectedRequestMetadata(action, [\n                \"pending\"\n            ]);\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isPending()(asyncThunks[0]);\n    }\n    return (action)=>{\n        const matchers = asyncThunks.map((asyncThunk)=>asyncThunk.pending);\n        const combinedMatcher = isAnyOf(...matchers);\n        return combinedMatcher(action);\n    };\n}\nfunction isRejected(...asyncThunks) {\n    if (asyncThunks.length === 0) {\n        return (action)=>hasExpectedRequestMetadata(action, [\n                \"rejected\"\n            ]);\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isRejected()(asyncThunks[0]);\n    }\n    return (action)=>{\n        const matchers = asyncThunks.map((asyncThunk)=>asyncThunk.rejected);\n        const combinedMatcher = isAnyOf(...matchers);\n        return combinedMatcher(action);\n    };\n}\nfunction isRejectedWithValue(...asyncThunks) {\n    const hasFlag = (action)=>{\n        return action && action.meta && action.meta.rejectedWithValue;\n    };\n    if (asyncThunks.length === 0) {\n        return (action)=>{\n            const combinedMatcher = isAllOf(isRejected(...asyncThunks), hasFlag);\n            return combinedMatcher(action);\n        };\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isRejectedWithValue()(asyncThunks[0]);\n    }\n    return (action)=>{\n        const combinedMatcher = isAllOf(isRejected(...asyncThunks), hasFlag);\n        return combinedMatcher(action);\n    };\n}\nfunction isFulfilled(...asyncThunks) {\n    if (asyncThunks.length === 0) {\n        return (action)=>hasExpectedRequestMetadata(action, [\n                \"fulfilled\"\n            ]);\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isFulfilled()(asyncThunks[0]);\n    }\n    return (action)=>{\n        const matchers = asyncThunks.map((asyncThunk)=>asyncThunk.fulfilled);\n        const combinedMatcher = isAnyOf(...matchers);\n        return combinedMatcher(action);\n    };\n}\nfunction isAsyncThunkAction(...asyncThunks) {\n    if (asyncThunks.length === 0) {\n        return (action)=>hasExpectedRequestMetadata(action, [\n                \"pending\",\n                \"fulfilled\",\n                \"rejected\"\n            ]);\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isAsyncThunkAction()(asyncThunks[0]);\n    }\n    return (action)=>{\n        const matchers = [];\n        for (const asyncThunk of asyncThunks){\n            matchers.push(asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled);\n        }\n        const combinedMatcher = isAnyOf(...matchers);\n        return combinedMatcher(action);\n    };\n}\n// src/createAsyncThunk.ts\nvar commonProperties = [\n    \"name\",\n    \"message\",\n    \"stack\",\n    \"code\"\n];\nvar RejectWithValue = class {\n    constructor(payload, meta){\n        this.payload = payload;\n        this.meta = meta;\n    }\n};\nvar FulfillWithMeta = class {\n    constructor(payload, meta){\n        this.payload = payload;\n        this.meta = meta;\n    }\n};\nvar miniSerializeError = (value)=>{\n    if (typeof value === \"object\" && value !== null) {\n        const simpleError = {};\n        for (const property of commonProperties){\n            if (typeof value[property] === \"string\") {\n                simpleError[property] = value[property];\n            }\n        }\n        return simpleError;\n    }\n    return {\n        message: String(value)\n    };\n};\nvar createAsyncThunk = /* @__PURE__ */ (()=>{\n    function createAsyncThunk2(typePrefix, payloadCreator, options) {\n        const fulfilled = createAction(typePrefix + \"/fulfilled\", (payload, requestId, arg, meta)=>({\n                payload,\n                meta: {\n                    ...meta || {},\n                    arg,\n                    requestId,\n                    requestStatus: \"fulfilled\"\n                }\n            }));\n        const pending = createAction(typePrefix + \"/pending\", (requestId, arg, meta)=>({\n                payload: void 0,\n                meta: {\n                    ...meta || {},\n                    arg,\n                    requestId,\n                    requestStatus: \"pending\"\n                }\n            }));\n        const rejected = createAction(typePrefix + \"/rejected\", (error, requestId, arg, payload, meta)=>({\n                payload,\n                error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\n                meta: {\n                    ...meta || {},\n                    arg,\n                    requestId,\n                    rejectedWithValue: !!payload,\n                    requestStatus: \"rejected\",\n                    aborted: error?.name === \"AbortError\",\n                    condition: error?.name === \"ConditionError\"\n                }\n            }));\n        function actionCreator(arg) {\n            return (dispatch, getState, extra)=>{\n                const requestId = options?.idGenerator ? options.idGenerator(arg) : nanoid();\n                const abortController = new AbortController();\n                let abortHandler;\n                let abortReason;\n                function abort(reason) {\n                    abortReason = reason;\n                    abortController.abort();\n                }\n                const promise = async function() {\n                    let finalAction;\n                    try {\n                        let conditionResult = options?.condition?.(arg, {\n                            getState,\n                            extra\n                        });\n                        if (isThenable(conditionResult)) {\n                            conditionResult = await conditionResult;\n                        }\n                        if (conditionResult === false || abortController.signal.aborted) {\n                            throw {\n                                name: \"ConditionError\",\n                                message: \"Aborted due to condition callback returning false.\"\n                            };\n                        }\n                        const abortedPromise = new Promise((_, reject)=>{\n                            abortHandler = ()=>{\n                                reject({\n                                    name: \"AbortError\",\n                                    message: abortReason || \"Aborted\"\n                                });\n                            };\n                            abortController.signal.addEventListener(\"abort\", abortHandler);\n                        });\n                        dispatch(pending(requestId, arg, options?.getPendingMeta?.({\n                            requestId,\n                            arg\n                        }, {\n                            getState,\n                            extra\n                        })));\n                        finalAction = await Promise.race([\n                            abortedPromise,\n                            Promise.resolve(payloadCreator(arg, {\n                                dispatch,\n                                getState,\n                                extra,\n                                requestId,\n                                signal: abortController.signal,\n                                abort,\n                                rejectWithValue: (value, meta)=>{\n                                    return new RejectWithValue(value, meta);\n                                },\n                                fulfillWithValue: (value, meta)=>{\n                                    return new FulfillWithMeta(value, meta);\n                                }\n                            })).then((result)=>{\n                                if (result instanceof RejectWithValue) {\n                                    throw result;\n                                }\n                                if (result instanceof FulfillWithMeta) {\n                                    return fulfilled(result.payload, requestId, arg, result.meta);\n                                }\n                                return fulfilled(result, requestId, arg);\n                            })\n                        ]);\n                    } catch (err) {\n                        finalAction = err instanceof RejectWithValue ? rejected(null, requestId, arg, err.payload, err.meta) : rejected(err, requestId, arg);\n                    } finally{\n                        if (abortHandler) {\n                            abortController.signal.removeEventListener(\"abort\", abortHandler);\n                        }\n                    }\n                    const skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\n                    if (!skipDispatch) {\n                        dispatch(finalAction);\n                    }\n                    return finalAction;\n                }();\n                return Object.assign(promise, {\n                    abort,\n                    requestId,\n                    arg,\n                    unwrap () {\n                        return promise.then(unwrapResult);\n                    }\n                });\n            };\n        }\n        return Object.assign(actionCreator, {\n            pending,\n            rejected,\n            fulfilled,\n            settled: isAnyOf(rejected, fulfilled),\n            typePrefix\n        });\n    }\n    createAsyncThunk2.withTypes = ()=>createAsyncThunk2;\n    return createAsyncThunk2;\n})();\nfunction unwrapResult(action) {\n    if (action.meta && action.meta.rejectedWithValue) {\n        throw action.payload;\n    }\n    if (action.error) {\n        throw action.error;\n    }\n    return action.payload;\n}\nfunction isThenable(value) {\n    return value !== null && typeof value === \"object\" && typeof value.then === \"function\";\n}\n// src/createSlice.ts\nvar asyncThunkSymbol = Symbol.for(\"rtk-slice-createasyncthunk\");\nvar asyncThunkCreator = {\n    [asyncThunkSymbol]: createAsyncThunk\n};\nvar ReducerType = /* @__PURE__ */ ((ReducerType2)=>{\n    ReducerType2[\"reducer\"] = \"reducer\";\n    ReducerType2[\"reducerWithPrepare\"] = \"reducerWithPrepare\";\n    ReducerType2[\"asyncThunk\"] = \"asyncThunk\";\n    return ReducerType2;\n})(ReducerType || {});\nfunction getType(slice, actionKey) {\n    return `${slice}/${actionKey}`;\n}\nfunction buildCreateSlice({ creators } = {}) {\n    const cAT = creators?.asyncThunk?.[asyncThunkSymbol];\n    return function createSlice2(options) {\n        const { name, reducerPath = name } = options;\n        if (!name) {\n            throw new Error( false ? 0 : \"`name` is a required option for createSlice\");\n        }\n        if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n            if (options.initialState === void 0) {\n                console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\n            }\n        }\n        const reducers = (typeof options.reducers === \"function\" ? options.reducers(buildReducerCreators()) : options.reducers) || {};\n        const reducerNames = Object.keys(reducers);\n        const context = {\n            sliceCaseReducersByName: {},\n            sliceCaseReducersByType: {},\n            actionCreators: {},\n            sliceMatchers: []\n        };\n        const contextMethods = {\n            addCase (typeOrActionCreator, reducer2) {\n                const type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n                if (!type) {\n                    throw new Error( false ? 0 : \"`context.addCase` cannot be called with an empty action type\");\n                }\n                if (type in context.sliceCaseReducersByType) {\n                    throw new Error( false ? 0 : \"`context.addCase` cannot be called with two reducers for the same action type: \" + type);\n                }\n                context.sliceCaseReducersByType[type] = reducer2;\n                return contextMethods;\n            },\n            addMatcher (matcher, reducer2) {\n                context.sliceMatchers.push({\n                    matcher,\n                    reducer: reducer2\n                });\n                return contextMethods;\n            },\n            exposeAction (name2, actionCreator) {\n                context.actionCreators[name2] = actionCreator;\n                return contextMethods;\n            },\n            exposeCaseReducer (name2, reducer2) {\n                context.sliceCaseReducersByName[name2] = reducer2;\n                return contextMethods;\n            }\n        };\n        reducerNames.forEach((reducerName)=>{\n            const reducerDefinition = reducers[reducerName];\n            const reducerDetails = {\n                reducerName,\n                type: getType(name, reducerName),\n                createNotation: typeof options.reducers === \"function\"\n            };\n            if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {\n                handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);\n            } else {\n                handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);\n            }\n        });\n        function buildReducer() {\n            if (true) {\n                if (typeof options.extraReducers === \"object\") {\n                    throw new Error( false ? 0 : \"The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\n                }\n            }\n            const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = void 0] = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [\n                options.extraReducers\n            ];\n            const finalCaseReducers = {\n                ...extraReducers,\n                ...context.sliceCaseReducersByType\n            };\n            return createReducer(options.initialState, (builder)=>{\n                for(let key in finalCaseReducers){\n                    builder.addCase(key, finalCaseReducers[key]);\n                }\n                for (let sM of context.sliceMatchers){\n                    builder.addMatcher(sM.matcher, sM.reducer);\n                }\n                for (let m of actionMatchers){\n                    builder.addMatcher(m.matcher, m.reducer);\n                }\n                if (defaultCaseReducer) {\n                    builder.addDefaultCase(defaultCaseReducer);\n                }\n            });\n        }\n        const selectSelf = (state)=>state;\n        const injectedSelectorCache = /* @__PURE__ */ new Map();\n        let _reducer;\n        function reducer(state, action) {\n            if (!_reducer) _reducer = buildReducer();\n            return _reducer(state, action);\n        }\n        function getInitialState() {\n            if (!_reducer) _reducer = buildReducer();\n            return _reducer.getInitialState();\n        }\n        function makeSelectorProps(reducerPath2, injected = false) {\n            function selectSlice(state) {\n                let sliceState = state[reducerPath2];\n                if (typeof sliceState === \"undefined\") {\n                    if (injected) {\n                        sliceState = getInitialState();\n                    } else if (true) {\n                        throw new Error( false ? 0 : \"selectSlice returned undefined for an uninjected slice reducer\");\n                    }\n                }\n                return sliceState;\n            }\n            function getSelectors(selectState = selectSelf) {\n                const selectorCache = emplace(injectedSelectorCache, injected, {\n                    insert: ()=>/* @__PURE__ */ new WeakMap()\n                });\n                return emplace(selectorCache, selectState, {\n                    insert: ()=>{\n                        const map = {};\n                        for (const [name2, selector] of Object.entries(options.selectors ?? {})){\n                            map[name2] = wrapSelector(selector, selectState, getInitialState, injected);\n                        }\n                        return map;\n                    }\n                });\n            }\n            return {\n                reducerPath: reducerPath2,\n                getSelectors,\n                get selectors () {\n                    return getSelectors(selectSlice);\n                },\n                selectSlice\n            };\n        }\n        const slice = {\n            name,\n            reducer,\n            actions: context.actionCreators,\n            caseReducers: context.sliceCaseReducersByName,\n            getInitialState,\n            ...makeSelectorProps(reducerPath),\n            injectInto (injectable, { reducerPath: pathOpt, ...config } = {}) {\n                const newReducerPath = pathOpt ?? reducerPath;\n                injectable.inject({\n                    reducerPath: newReducerPath,\n                    reducer\n                }, config);\n                return {\n                    ...slice,\n                    ...makeSelectorProps(newReducerPath, true)\n                };\n            }\n        };\n        return slice;\n    };\n}\nfunction wrapSelector(selector, selectState, getInitialState, injected) {\n    function wrapper(rootState, ...args) {\n        let sliceState = selectState(rootState);\n        if (typeof sliceState === \"undefined\") {\n            if (injected) {\n                sliceState = getInitialState();\n            } else if (true) {\n                throw new Error( false ? 0 : \"selectState returned undefined for an uninjected slice reducer\");\n            }\n        }\n        return selector(sliceState, ...args);\n    }\n    wrapper.unwrapped = selector;\n    return wrapper;\n}\nvar createSlice = buildCreateSlice();\nfunction buildReducerCreators() {\n    function asyncThunk(payloadCreator, config) {\n        return {\n            _reducerDefinitionType: \"asyncThunk\" /* asyncThunk */ ,\n            payloadCreator,\n            ...config\n        };\n    }\n    asyncThunk.withTypes = ()=>asyncThunk;\n    return {\n        reducer (caseReducer) {\n            return Object.assign({\n                // hack so the wrapping function has the same name as the original\n                // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original\n                [caseReducer.name] (...args) {\n                    return caseReducer(...args);\n                }\n            }[caseReducer.name], {\n                _reducerDefinitionType: \"reducer\" /* reducer */ \n            });\n        },\n        preparedReducer (prepare, reducer) {\n            return {\n                _reducerDefinitionType: \"reducerWithPrepare\" /* reducerWithPrepare */ ,\n                prepare,\n                reducer\n            };\n        },\n        asyncThunk\n    };\n}\nfunction handleNormalReducerDefinition({ type, reducerName, createNotation }, maybeReducerWithPrepare, context) {\n    let caseReducer;\n    let prepareCallback;\n    if (\"reducer\" in maybeReducerWithPrepare) {\n        if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {\n            throw new Error( false ? 0 : \"Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.\");\n        }\n        caseReducer = maybeReducerWithPrepare.reducer;\n        prepareCallback = maybeReducerWithPrepare.prepare;\n    } else {\n        caseReducer = maybeReducerWithPrepare;\n    }\n    context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));\n}\nfunction isAsyncThunkSliceReducerDefinition(reducerDefinition) {\n    return reducerDefinition._reducerDefinitionType === \"asyncThunk\" /* asyncThunk */ ;\n}\nfunction isCaseReducerWithPrepareDefinition(reducerDefinition) {\n    return reducerDefinition._reducerDefinitionType === \"reducerWithPrepare\" /* reducerWithPrepare */ ;\n}\nfunction handleThunkCaseReducerDefinition({ type, reducerName }, reducerDefinition, context, cAT) {\n    if (!cAT) {\n        throw new Error( false ? 0 : \"Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.\");\n    }\n    const { payloadCreator, fulfilled, pending, rejected, settled, options } = reducerDefinition;\n    const thunk = cAT(type, payloadCreator, options);\n    context.exposeAction(reducerName, thunk);\n    if (fulfilled) {\n        context.addCase(thunk.fulfilled, fulfilled);\n    }\n    if (pending) {\n        context.addCase(thunk.pending, pending);\n    }\n    if (rejected) {\n        context.addCase(thunk.rejected, rejected);\n    }\n    if (settled) {\n        context.addMatcher(thunk.settled, settled);\n    }\n    context.exposeCaseReducer(reducerName, {\n        fulfilled: fulfilled || noop,\n        pending: pending || noop,\n        rejected: rejected || noop,\n        settled: settled || noop\n    });\n}\nfunction noop() {}\n// src/entities/entity_state.ts\nfunction getInitialEntityState() {\n    return {\n        ids: [],\n        entities: {}\n    };\n}\nfunction createInitialStateFactory() {\n    function getInitialState(additionalState = {}) {\n        return Object.assign(getInitialEntityState(), additionalState);\n    }\n    return {\n        getInitialState\n    };\n}\n// src/entities/state_selectors.ts\nfunction createSelectorsFactory() {\n    function getSelectors(selectState, options = {}) {\n        const { createSelector: createSelector2 = createDraftSafeSelector } = options;\n        const selectIds = (state)=>state.ids;\n        const selectEntities = (state)=>state.entities;\n        const selectAll = createSelector2(selectIds, selectEntities, (ids, entities)=>ids.map((id)=>entities[id]));\n        const selectId = (_, id)=>id;\n        const selectById = (entities, id)=>entities[id];\n        const selectTotal = createSelector2(selectIds, (ids)=>ids.length);\n        if (!selectState) {\n            return {\n                selectIds,\n                selectEntities,\n                selectAll,\n                selectTotal,\n                selectById: createSelector2(selectEntities, selectId, selectById)\n            };\n        }\n        const selectGlobalizedEntities = createSelector2(selectState, selectEntities);\n        return {\n            selectIds: createSelector2(selectState, selectIds),\n            selectEntities: selectGlobalizedEntities,\n            selectAll: createSelector2(selectState, selectAll),\n            selectTotal: createSelector2(selectState, selectTotal),\n            selectById: createSelector2(selectGlobalizedEntities, selectId, selectById)\n        };\n    }\n    return {\n        getSelectors\n    };\n}\n// src/entities/state_adapter.ts\n\nvar isDraftTyped = immer__WEBPACK_IMPORTED_MODULE_2__.isDraft;\nfunction createSingleArgumentStateOperator(mutator) {\n    const operator = createStateOperator((_, state)=>mutator(state));\n    return function operation(state) {\n        return operator(state, void 0);\n    };\n}\nfunction createStateOperator(mutator) {\n    return function operation(state, arg) {\n        function isPayloadActionArgument(arg2) {\n            return isFSA(arg2);\n        }\n        const runMutator = (draft)=>{\n            if (isPayloadActionArgument(arg)) {\n                mutator(arg.payload, draft);\n            } else {\n                mutator(arg, draft);\n            }\n        };\n        if (isDraftTyped(state)) {\n            runMutator(state);\n            return state;\n        }\n        return (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(state, runMutator);\n    };\n}\n// src/entities/utils.ts\nfunction selectIdValue(entity, selectId) {\n    const key = selectId(entity);\n    if ( true && key === void 0) {\n        console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\n    }\n    return key;\n}\nfunction ensureEntitiesArray(entities) {\n    if (!Array.isArray(entities)) {\n        entities = Object.values(entities);\n    }\n    return entities;\n}\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    const added = [];\n    const updated = [];\n    for (const entity of newEntities){\n        const id = selectIdValue(entity, selectId);\n        if (id in state.entities) {\n            updated.push({\n                id,\n                changes: entity\n            });\n        } else {\n            added.push(entity);\n        }\n    }\n    return [\n        added,\n        updated\n    ];\n}\n// src/entities/unsorted_state_adapter.ts\nfunction createUnsortedStateAdapter(selectId) {\n    function addOneMutably(entity, state) {\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            return;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n    }\n    function addManyMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        for (const entity of newEntities){\n            addOneMutably(entity, state);\n        }\n    }\n    function setOneMutably(entity, state) {\n        const key = selectIdValue(entity, selectId);\n        if (!(key in state.entities)) {\n            state.ids.push(key);\n        }\n        state.entities[key] = entity;\n    }\n    function setManyMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        for (const entity of newEntities){\n            setOneMutably(entity, state);\n        }\n    }\n    function setAllMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        state.ids = [];\n        state.entities = {};\n        addManyMutably(newEntities, state);\n    }\n    function removeOneMutably(key, state) {\n        return removeManyMutably([\n            key\n        ], state);\n    }\n    function removeManyMutably(keys, state) {\n        let didMutate = false;\n        keys.forEach((key)=>{\n            if (key in state.entities) {\n                delete state.entities[key];\n                didMutate = true;\n            }\n        });\n        if (didMutate) {\n            state.ids = state.ids.filter((id)=>id in state.entities);\n        }\n    }\n    function removeAllMutably(state) {\n        Object.assign(state, {\n            ids: [],\n            entities: {}\n        });\n    }\n    function takeNewKey(keys, update, state) {\n        const original3 = state.entities[update.id];\n        if (original3 === void 0) {\n            return false;\n        }\n        const updated = Object.assign({}, original3, update.changes);\n        const newKey = selectIdValue(updated, selectId);\n        const hasNewKey = newKey !== update.id;\n        if (hasNewKey) {\n            keys[update.id] = newKey;\n            delete state.entities[update.id];\n        }\n        state.entities[newKey] = updated;\n        return hasNewKey;\n    }\n    function updateOneMutably(update, state) {\n        return updateManyMutably([\n            update\n        ], state);\n    }\n    function updateManyMutably(updates, state) {\n        const newKeys = {};\n        const updatesPerEntity = {};\n        updates.forEach((update)=>{\n            if (update.id in state.entities) {\n                updatesPerEntity[update.id] = {\n                    id: update.id,\n                    // Spreads ignore falsy values, so this works even if there isn't\n                    // an existing update already at this key\n                    changes: {\n                        ...updatesPerEntity[update.id] ? updatesPerEntity[update.id].changes : null,\n                        ...update.changes\n                    }\n                };\n            }\n        });\n        updates = Object.values(updatesPerEntity);\n        const didMutateEntities = updates.length > 0;\n        if (didMutateEntities) {\n            const didMutateIds = updates.filter((update)=>takeNewKey(newKeys, update, state)).length > 0;\n            if (didMutateIds) {\n                state.ids = Object.values(state.entities).map((e)=>selectIdValue(e, selectId));\n            }\n        }\n    }\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([\n            entity\n        ], state);\n    }\n    function upsertManyMutably(newEntities, state) {\n        const [added, updated] = splitAddedUpdatedEntities(newEntities, selectId, state);\n        updateManyMutably(updated, state);\n        addManyMutably(added, state);\n    }\n    return {\n        removeAll: createSingleArgumentStateOperator(removeAllMutably),\n        addOne: createStateOperator(addOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        setOne: createStateOperator(setOneMutably),\n        setMany: createStateOperator(setManyMutably),\n        setAll: createStateOperator(setAllMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        removeOne: createStateOperator(removeOneMutably),\n        removeMany: createStateOperator(removeManyMutably)\n    };\n}\n// src/entities/sorted_state_adapter.ts\nfunction createSortedStateAdapter(selectId, sort) {\n    const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(selectId);\n    function addOneMutably(entity, state) {\n        return addManyMutably([\n            entity\n        ], state);\n    }\n    function addManyMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        const models = newEntities.filter((model)=>!(selectIdValue(model, selectId) in state.entities));\n        if (models.length !== 0) {\n            merge(models, state);\n        }\n    }\n    function setOneMutably(entity, state) {\n        return setManyMutably([\n            entity\n        ], state);\n    }\n    function setManyMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        if (newEntities.length !== 0) {\n            merge(newEntities, state);\n        }\n    }\n    function setAllMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        state.entities = {};\n        state.ids = [];\n        addManyMutably(newEntities, state);\n    }\n    function updateOneMutably(update, state) {\n        return updateManyMutably([\n            update\n        ], state);\n    }\n    function updateManyMutably(updates, state) {\n        let appliedUpdates = false;\n        for (let update of updates){\n            const entity = state.entities[update.id];\n            if (!entity) {\n                continue;\n            }\n            appliedUpdates = true;\n            Object.assign(entity, update.changes);\n            const newId = selectId(entity);\n            if (update.id !== newId) {\n                delete state.entities[update.id];\n                state.entities[newId] = entity;\n            }\n        }\n        if (appliedUpdates) {\n            resortEntities(state);\n        }\n    }\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([\n            entity\n        ], state);\n    }\n    function upsertManyMutably(newEntities, state) {\n        const [added, updated] = splitAddedUpdatedEntities(newEntities, selectId, state);\n        updateManyMutably(updated, state);\n        addManyMutably(added, state);\n    }\n    function areArraysEqual(a, b) {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for(let i = 0; i < a.length && i < b.length; i++){\n            if (a[i] === b[i]) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n    function merge(models, state) {\n        models.forEach((model)=>{\n            state.entities[selectId(model)] = model;\n        });\n        resortEntities(state);\n    }\n    function resortEntities(state) {\n        const allEntities = Object.values(state.entities);\n        allEntities.sort(sort);\n        const newSortedIds = allEntities.map(selectId);\n        const { ids } = state;\n        if (!areArraysEqual(ids, newSortedIds)) {\n            state.ids = newSortedIds;\n        }\n    }\n    return {\n        removeOne,\n        removeMany,\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        setOne: createStateOperator(setOneMutably),\n        setMany: createStateOperator(setManyMutably),\n        setAll: createStateOperator(setAllMutably),\n        addMany: createStateOperator(addManyMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertMany: createStateOperator(upsertManyMutably)\n    };\n}\n// src/entities/create_adapter.ts\nfunction createEntityAdapter(options = {}) {\n    const { selectId, sortComparer } = {\n        sortComparer: false,\n        selectId: (instance)=>instance.id,\n        ...options\n    };\n    const stateFactory = createInitialStateFactory();\n    const selectorsFactory = createSelectorsFactory();\n    const stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n    return {\n        selectId,\n        sortComparer,\n        ...stateFactory,\n        ...selectorsFactory,\n        ...stateAdapter\n    };\n}\n// src/listenerMiddleware/index.ts\n\n// src/listenerMiddleware/exceptions.ts\nvar task = \"task\";\nvar listener = \"listener\";\nvar completed = \"completed\";\nvar cancelled = \"cancelled\";\nvar taskCancelled = `task-${cancelled}`;\nvar taskCompleted = `task-${completed}`;\nvar listenerCancelled = `${listener}-${cancelled}`;\nvar listenerCompleted = `${listener}-${completed}`;\nvar TaskAbortError = class {\n    constructor(code){\n        this.name = \"TaskAbortError\";\n        this.code = code;\n        this.message = `${task} ${cancelled} (reason: ${code})`;\n    }\n};\n// src/listenerMiddleware/utils.ts\nvar assertFunction = (func, expected)=>{\n    if (typeof func !== \"function\") {\n        throw new Error( false ? 0 : `${expected} is not a function`);\n    }\n};\nvar noop2 = ()=>{};\nvar catchRejection = (promise, onError = noop2)=>{\n    promise.catch(onError);\n    return promise;\n};\nvar addAbortSignalListener = (abortSignal, callback)=>{\n    abortSignal.addEventListener(\"abort\", callback, {\n        once: true\n    });\n    return ()=>abortSignal.removeEventListener(\"abort\", callback);\n};\nvar abortControllerWithReason = (abortController, reason)=>{\n    const signal = abortController.signal;\n    if (signal.aborted) {\n        return;\n    }\n    if (!(\"reason\" in signal)) {\n        Object.defineProperty(signal, \"reason\", {\n            enumerable: true,\n            value: reason,\n            configurable: true,\n            writable: true\n        });\n    }\n    ;\n    abortController.abort(reason);\n};\n// src/listenerMiddleware/task.ts\nvar validateActive = (signal)=>{\n    if (signal.aborted) {\n        const { reason } = signal;\n        throw new TaskAbortError(reason);\n    }\n};\nfunction raceWithSignal(signal, promise) {\n    let cleanup = noop2;\n    return new Promise((resolve, reject)=>{\n        const notifyRejection = ()=>reject(new TaskAbortError(signal.reason));\n        if (signal.aborted) {\n            notifyRejection();\n            return;\n        }\n        cleanup = addAbortSignalListener(signal, notifyRejection);\n        promise.finally(()=>cleanup()).then(resolve, reject);\n    }).finally(()=>{\n        cleanup = noop2;\n    });\n}\nvar runTask = async (task2, cleanUp)=>{\n    try {\n        await Promise.resolve();\n        const value = await task2();\n        return {\n            status: \"ok\",\n            value\n        };\n    } catch (error) {\n        return {\n            status: error instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\n            error\n        };\n    } finally{\n        cleanUp?.();\n    }\n};\nvar createPause = (signal)=>{\n    return (promise)=>{\n        return catchRejection(raceWithSignal(signal, promise).then((output)=>{\n            validateActive(signal);\n            return output;\n        }));\n    };\n};\nvar createDelay = (signal)=>{\n    const pause = createPause(signal);\n    return (timeoutMs)=>{\n        return pause(new Promise((resolve)=>setTimeout(resolve, timeoutMs)));\n    };\n};\n// src/listenerMiddleware/index.ts\nvar { assign } = Object;\nvar INTERNAL_NIL_TOKEN = {};\nvar alm = \"listenerMiddleware\";\nvar createFork = (parentAbortSignal, parentBlockingPromises)=>{\n    const linkControllers = (controller)=>addAbortSignalListener(parentAbortSignal, ()=>abortControllerWithReason(controller, parentAbortSignal.reason));\n    return (taskExecutor, opts)=>{\n        assertFunction(taskExecutor, \"taskExecutor\");\n        const childAbortController = new AbortController();\n        linkControllers(childAbortController);\n        const result = runTask(async ()=>{\n            validateActive(parentAbortSignal);\n            validateActive(childAbortController.signal);\n            const result2 = await taskExecutor({\n                pause: createPause(childAbortController.signal),\n                delay: createDelay(childAbortController.signal),\n                signal: childAbortController.signal\n            });\n            validateActive(childAbortController.signal);\n            return result2;\n        }, ()=>abortControllerWithReason(childAbortController, taskCompleted));\n        if (opts?.autoJoin) {\n            parentBlockingPromises.push(result.catch(noop2));\n        }\n        return {\n            result: createPause(parentAbortSignal)(result),\n            cancel () {\n                abortControllerWithReason(childAbortController, taskCancelled);\n            }\n        };\n    };\n};\nvar createTakePattern = (startListening, signal)=>{\n    const take = async (predicate, timeout)=>{\n        validateActive(signal);\n        let unsubscribe = ()=>{};\n        const tuplePromise = new Promise((resolve, reject)=>{\n            let stopListening = startListening({\n                predicate,\n                effect: (action, listenerApi)=>{\n                    listenerApi.unsubscribe();\n                    resolve([\n                        action,\n                        listenerApi.getState(),\n                        listenerApi.getOriginalState()\n                    ]);\n                }\n            });\n            unsubscribe = ()=>{\n                stopListening();\n                reject();\n            };\n        });\n        const promises = [\n            tuplePromise\n        ];\n        if (timeout != null) {\n            promises.push(new Promise((resolve)=>setTimeout(resolve, timeout, null)));\n        }\n        try {\n            const output = await raceWithSignal(signal, Promise.race(promises));\n            validateActive(signal);\n            return output;\n        } finally{\n            unsubscribe();\n        }\n    };\n    return (predicate, timeout)=>catchRejection(take(predicate, timeout));\n};\nvar getListenerEntryPropsFrom = (options)=>{\n    let { type, actionCreator, matcher, predicate, effect } = options;\n    if (type) {\n        predicate = createAction(type).match;\n    } else if (actionCreator) {\n        type = actionCreator.type;\n        predicate = actionCreator.match;\n    } else if (matcher) {\n        predicate = matcher;\n    } else if (predicate) {} else {\n        throw new Error( false ? 0 : \"Creating or removing a listener requires one of the known fields for matching an action\");\n    }\n    assertFunction(effect, \"options.listener\");\n    return {\n        predicate,\n        type,\n        effect\n    };\n};\nvar createListenerEntry = Object.assign((options)=>{\n    const { type, predicate, effect } = getListenerEntryPropsFrom(options);\n    const id = nanoid();\n    const entry = {\n        id,\n        effect,\n        type,\n        predicate,\n        pending: /* @__PURE__ */ new Set(),\n        unsubscribe: ()=>{\n            throw new Error( false ? 0 : \"Unsubscribe not initialized\");\n        }\n    };\n    return entry;\n}, {\n    withTypes: ()=>createListenerEntry\n});\nvar cancelActiveListeners = (entry)=>{\n    entry.pending.forEach((controller)=>{\n        abortControllerWithReason(controller, listenerCancelled);\n    });\n};\nvar createClearListenerMiddleware = (listenerMap)=>{\n    return ()=>{\n        listenerMap.forEach(cancelActiveListeners);\n        listenerMap.clear();\n    };\n};\nvar safelyNotifyError = (errorHandler, errorToNotify, errorInfo)=>{\n    try {\n        errorHandler(errorToNotify, errorInfo);\n    } catch (errorHandlerError) {\n        setTimeout(()=>{\n            throw errorHandlerError;\n        }, 0);\n    }\n};\nvar addListener = Object.assign(createAction(`${alm}/add`), {\n    withTypes: ()=>addListener\n});\nvar clearAllListeners = createAction(`${alm}/removeAll`);\nvar removeListener = Object.assign(createAction(`${alm}/remove`), {\n    withTypes: ()=>removeListener\n});\nvar defaultErrorHandler = (...args)=>{\n    console.error(`${alm}/error`, ...args);\n};\nvar createListenerMiddleware = (middlewareOptions = {})=>{\n    const listenerMap = /* @__PURE__ */ new Map();\n    const { extra, onError = defaultErrorHandler } = middlewareOptions;\n    assertFunction(onError, \"onError\");\n    const insertEntry = (entry)=>{\n        entry.unsubscribe = ()=>listenerMap.delete(entry.id);\n        listenerMap.set(entry.id, entry);\n        return (cancelOptions)=>{\n            entry.unsubscribe();\n            if (cancelOptions?.cancelActive) {\n                cancelActiveListeners(entry);\n            }\n        };\n    };\n    const startListening = (options)=>{\n        let entry = find(Array.from(listenerMap.values()), (existingEntry)=>existingEntry.effect === options.effect);\n        if (!entry) {\n            entry = createListenerEntry(options);\n        }\n        return insertEntry(entry);\n    };\n    Object.assign(startListening, {\n        withTypes: ()=>startListening\n    });\n    const stopListening = (options)=>{\n        const { type, effect, predicate } = getListenerEntryPropsFrom(options);\n        const entry = find(Array.from(listenerMap.values()), (entry2)=>{\n            const matchPredicateOrType = typeof type === \"string\" ? entry2.type === type : entry2.predicate === predicate;\n            return matchPredicateOrType && entry2.effect === effect;\n        });\n        if (entry) {\n            entry.unsubscribe();\n            if (options.cancelActive) {\n                cancelActiveListeners(entry);\n            }\n        }\n        return !!entry;\n    };\n    Object.assign(stopListening, {\n        withTypes: ()=>stopListening\n    });\n    const notifyListener = async (entry, action, api, getOriginalState)=>{\n        const internalTaskController = new AbortController();\n        const take = createTakePattern(startListening, internalTaskController.signal);\n        const autoJoinPromises = [];\n        try {\n            entry.pending.add(internalTaskController);\n            await Promise.resolve(entry.effect(action, // Use assign() rather than ... to avoid extra helper functions added to bundle\n            assign({}, api, {\n                getOriginalState,\n                condition: (predicate, timeout)=>take(predicate, timeout).then(Boolean),\n                take,\n                delay: createDelay(internalTaskController.signal),\n                pause: createPause(internalTaskController.signal),\n                extra,\n                signal: internalTaskController.signal,\n                fork: createFork(internalTaskController.signal, autoJoinPromises),\n                unsubscribe: entry.unsubscribe,\n                subscribe: ()=>{\n                    listenerMap.set(entry.id, entry);\n                },\n                cancelActiveListeners: ()=>{\n                    entry.pending.forEach((controller, _, set)=>{\n                        if (controller !== internalTaskController) {\n                            abortControllerWithReason(controller, listenerCancelled);\n                            set.delete(controller);\n                        }\n                    });\n                },\n                cancel: ()=>{\n                    abortControllerWithReason(internalTaskController, listenerCancelled);\n                    entry.pending.delete(internalTaskController);\n                },\n                throwIfCancelled: ()=>{\n                    validateActive(internalTaskController.signal);\n                }\n            })));\n        } catch (listenerError) {\n            if (!(listenerError instanceof TaskAbortError)) {\n                safelyNotifyError(onError, listenerError, {\n                    raisedBy: \"effect\"\n                });\n            }\n        } finally{\n            await Promise.all(autoJoinPromises);\n            abortControllerWithReason(internalTaskController, listenerCompleted);\n            entry.pending.delete(internalTaskController);\n        }\n    };\n    const clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n    const middleware = (api)=>(next)=>(action)=>{\n                if (!(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n                    return next(action);\n                }\n                if (addListener.match(action)) {\n                    return startListening(action.payload);\n                }\n                if (clearAllListeners.match(action)) {\n                    clearListenerMiddleware();\n                    return;\n                }\n                if (removeListener.match(action)) {\n                    return stopListening(action.payload);\n                }\n                let originalState = api.getState();\n                const getOriginalState = ()=>{\n                    if (originalState === INTERNAL_NIL_TOKEN) {\n                        throw new Error( false ? 0 : `${alm}: getOriginalState can only be called synchronously`);\n                    }\n                    return originalState;\n                };\n                let result;\n                try {\n                    result = next(action);\n                    if (listenerMap.size > 0) {\n                        const currentState = api.getState();\n                        const listenerEntries = Array.from(listenerMap.values());\n                        for (const entry of listenerEntries){\n                            let runListener = false;\n                            try {\n                                runListener = entry.predicate(action, currentState, originalState);\n                            } catch (predicateError) {\n                                runListener = false;\n                                safelyNotifyError(onError, predicateError, {\n                                    raisedBy: \"predicate\"\n                                });\n                            }\n                            if (!runListener) {\n                                continue;\n                            }\n                            notifyListener(entry, action, api, getOriginalState);\n                        }\n                    }\n                } finally{\n                    originalState = INTERNAL_NIL_TOKEN;\n                }\n                return result;\n            };\n    return {\n        middleware,\n        startListening,\n        stopListening,\n        clearListeners: clearListenerMiddleware\n    };\n};\n// src/dynamicMiddleware/index.ts\n\nvar createMiddlewareEntry = (middleware)=>({\n        id: nanoid(),\n        middleware,\n        applied: /* @__PURE__ */ new Map()\n    });\nvar matchInstance = (instanceId)=>(action)=>action?.meta?.instanceId === instanceId;\nvar createDynamicMiddleware = ()=>{\n    const instanceId = nanoid();\n    const middlewareMap = /* @__PURE__ */ new Map();\n    const withMiddleware = Object.assign(createAction(\"dynamicMiddleware/add\", (...middlewares)=>({\n            payload: middlewares,\n            meta: {\n                instanceId\n            }\n        })), {\n        withTypes: ()=>withMiddleware\n    });\n    const addMiddleware = Object.assign(function addMiddleware2(...middlewares) {\n        middlewares.forEach((middleware2)=>{\n            let entry = find(Array.from(middlewareMap.values()), (entry2)=>entry2.middleware === middleware2);\n            if (!entry) {\n                entry = createMiddlewareEntry(middleware2);\n            }\n            middlewareMap.set(entry.id, entry);\n        });\n    }, {\n        withTypes: ()=>addMiddleware\n    });\n    const getFinalMiddleware = (api)=>{\n        const appliedMiddleware = Array.from(middlewareMap.values()).map((entry)=>emplace(entry.applied, api, {\n                insert: ()=>entry.middleware(api)\n            }));\n        return (0,redux__WEBPACK_IMPORTED_MODULE_0__.compose)(...appliedMiddleware);\n    };\n    const isWithMiddleware = isAllOf(withMiddleware, matchInstance(instanceId));\n    const middleware = (api)=>(next)=>(action)=>{\n                if (isWithMiddleware(action)) {\n                    addMiddleware(...action.payload);\n                    return api.dispatch;\n                }\n                return getFinalMiddleware(api)(next)(action);\n            };\n    return {\n        middleware,\n        addMiddleware,\n        withMiddleware,\n        instanceId\n    };\n};\n// src/combineSlices.ts\n\nvar isSliceLike = (maybeSliceLike)=>\"reducerPath\" in maybeSliceLike && typeof maybeSliceLike.reducerPath === \"string\";\nvar getReducers = (slices)=>slices.flatMap((sliceOrMap)=>isSliceLike(sliceOrMap) ? [\n            [\n                sliceOrMap.reducerPath,\n                sliceOrMap.reducer\n            ]\n        ] : Object.entries(sliceOrMap));\nvar ORIGINAL_STATE = Symbol.for(\"rtk-state-proxy-original\");\nvar isStateProxy = (value)=>!!value && !!value[ORIGINAL_STATE];\nvar stateProxyMap = /* @__PURE__ */ new WeakMap();\nvar createStateProxy = (state, reducerMap)=>emplace(stateProxyMap, state, {\n        insert: ()=>new Proxy(state, {\n                get: (target, prop, receiver)=>{\n                    if (prop === ORIGINAL_STATE) return target;\n                    const result = Reflect.get(target, prop, receiver);\n                    if (typeof result === \"undefined\") {\n                        const reducer = reducerMap[prop.toString()];\n                        if (reducer) {\n                            const reducerResult = reducer(void 0, {\n                                type: nanoid()\n                            });\n                            if (typeof reducerResult === \"undefined\") {\n                                throw new Error( false ? 0 : `The slice reducer for key \"${prop.toString()}\" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);\n                            }\n                            return reducerResult;\n                        }\n                    }\n                    return result;\n                }\n            })\n    });\nvar original = (state)=>{\n    if (!isStateProxy(state)) {\n        throw new Error( false ? 0 : \"original must be used on state Proxy\");\n    }\n    return state[ORIGINAL_STATE];\n};\nfunction combineSlices(...slices) {\n    const reducerMap = Object.fromEntries(getReducers(slices));\n    const getReducer = ()=>(0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducerMap);\n    let reducer = getReducer();\n    function combinedReducer(state, action) {\n        return reducer(state, action);\n    }\n    combinedReducer.withLazyLoadedSlices = ()=>combinedReducer;\n    const inject = (slice, config = {})=>{\n        const { reducerPath, reducer: reducerToInject } = slice;\n        const currentReducer = reducerMap[reducerPath];\n        if (!config.overrideExisting && currentReducer && currentReducer !== reducerToInject) {\n            if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n                console.error(`called \\`inject\\` to override already-existing reducer ${reducerPath} without specifying \\`overrideExisting: true\\``);\n            }\n            return combinedReducer;\n        }\n        reducerMap[reducerPath] = reducerToInject;\n        reducer = getReducer();\n        return combinedReducer;\n    };\n    const selector = Object.assign(function makeSelector(selectorFn, selectState) {\n        return function selector2(state, ...args) {\n            return selectorFn(createStateProxy(selectState ? selectState(state, ...args) : state, reducerMap), ...args);\n        };\n    }, {\n        original\n    });\n    return Object.assign(combinedReducer, {\n        inject,\n        selector\n    });\n}\n// src/formatProdErrorMessage.ts\nfunction formatProdErrorMessage(code) {\n    return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;\n}\n //# sourceMappingURL=redux-toolkit.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\n");

/***/ })

};
;